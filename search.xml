<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>== 和 ===区别，分别在什么情况使用</title>
    <url>/JavaScript/JavaScript/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/51b208f0-68df-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、等于操作符"><a href="#一、等于操作符" class="headerlink" title="一、等于操作符"></a>一、等于操作符</h2><p>等于操作符用两个等于号（ &#x3D;&#x3D; ）表示，如果操作数相等，则会返回 <code>true</code></p>
<p>前面文章，我们提到在<code>JavaScript</code>中存在隐式转换。等于操作符（&#x3D;&#x3D;）在比较中会先进行类型转换，再确定操作数是否相等</p>
<p>遵循以下规则：</p>
<p>如果任一操作数是布尔值，则将其转换为数值再比较是否相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">true</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> == <span class="number">55</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果一个操作数是对象，另一个操作数不是，则调用对象的 <code>valueOf() </code>方法取得其原始值，再根据前面的规则进行比较</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">valueOf</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> result1 = (obj == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>null </code>和<code>undefined</code>相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果有任一操作数是 <code>NaN</code> ，则相等操作符返回 <code>false</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="title class_">NaN</span> == <span class="title class_">NaN</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let obj2 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let result1 = (obj1 == obj2 ); // false</span><br></pre></td></tr></table></figure>

<p>下面进一步做个小结：</p>
<ul>
<li><p>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</p>
</li>
<li><p>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</p>
</li>
<li><p>两个都为引用类型，则比较它们是否指向同一个对象</p>
</li>
<li><p>null 和 undefined 相等</p>
</li>
<li><p>存在 NaN 则返回 false</p>
</li>
</ul>
<h2 id="二、全等操作符"><a href="#二、全等操作符" class="headerlink" title="二、全等操作符"></a>二、全等操作符</h2><p>全等操作符由 3 个等于号（ &#x3D;&#x3D;&#x3D; ）表示，只有两个操作数在不转换的前提下相等才返回 <code>true</code>。即类型相同，值也需相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">55</span> === <span class="number">55</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure>

<p><code>undefined</code> 和 <code>null</code> 与自身严格相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> === <span class="literal">null</span>)  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">undefined</span> === <span class="literal">undefined</span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p>相等操作符（&#x3D;&#x3D;）会做类型转换，再进行值的比较，全等运算符不会做类型转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">55</span> === <span class="number">55</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure>

<p><code>null</code> 和 <code>undefined</code> 比较，相等操作符（&#x3D;&#x3D;）为<code>true</code>，全等为<code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">null</span>  === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; \t\r\n&#x27;</span> == <span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>但在比较<code>null</code>的情况的时候，我们一般使用相等操作符<code>==</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(obj.<span class="property">x</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);  <span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于下面写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.<span class="property">x</span> === <span class="literal">null</span> || obj.<span class="property">x</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用相等操作符（&#x3D;&#x3D;）的写法明显更加简洁了</p>
<p>所以，除了在比较对象属性为<code>null</code>或者<code>undefined</code>的情况下，我们可以使用相等操作符（&#x3D;&#x3D;），其他情况建议一律使用全等操作符（&#x3D;&#x3D;&#x3D;）</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM的理解？</title>
    <url>/JavaScript/JavaScript-BOM/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/3e191c40-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>BOM</code> (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象</p>
<p>其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率</p>
<p>浏览器的全部内容可以看成<code>DOM</code>，整个浏览器可以看成<code>BOM</code>。区别如下：</p>
<p><img src="https://static.vue-js.com/482f33e0-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="二、window"><a href="#二、window" class="headerlink" title="二、window"></a>二、window</h2><p><code>Bom</code>的核心对象是<code>window</code>，它表示浏览器的一个实例</p>
<p>在浏览器中，<code>window</code>对象有双重角色，即是浏览器窗口的一个接口，又是全局对象</p>
<p>因此所有在全局作用域中声明的变量、函数都会变成<code>window</code>对象的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;js每日一题&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lookName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>);  <span class="comment">//js每日一题</span></span><br><span class="line"><span class="title function_">lookName</span>();                <span class="comment">//js每日一题</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">lookName</span>();         <span class="comment">//js每日一题</span></span><br></pre></td></tr></table></figure>

<p>关于窗口控制方法如下：</p>
<ul>
<li><code>moveBy(x,y)</code>：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体</li>
<li><code>moveTo(x,y)</code>：移动窗体左上角到相对于屏幕左上角的(x,y)点</li>
<li><code>resizeBy(w,h)</code>：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体</li>
<li><code>resizeTo(w,h)</code>：把窗体宽度调整为w个像素，高度调整为h个像素</li>
<li><code>scrollTo(x,y)</code>：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置</li>
<li><code>scrollBy(x,y)</code>： 如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素</li>
</ul>
<p> <code>window.open()</code> 既可以导航到一个特定的<code>url</code>，也可以打开一个新的浏览器窗口</p>
<p>如果 <code>window.open()</code> 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;htttp://www.vue3js.cn&#x27;</span>,<span class="string">&#x27;topFrame&#x27;</span>)</span><br><span class="line">==&gt; &lt; a href=<span class="string">&quot; &quot;</span> target=<span class="string">&quot;topFrame&quot;</span>&gt;&lt;/ a&gt;</span><br></pre></td></tr></table></figure>

<p><code>window.open()</code> 会返回新窗口的引用，也就是新窗口的 <code>window</code> 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myWin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://www.vue3js.cn&#x27;</span>,<span class="string">&#x27;myWin&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>window.close()</code> 仅用于通过 <code>window.open()</code> 打开的窗口</p>
<p>新创建的 <code>window</code> 对象有一个 <code>opener</code> 属性，该属性指向打开他的原始窗口对象</p>
<h2 id="三、location"><a href="#三、location" class="headerlink" title="三、location"></a>三、location</h2><p><code>url</code>地址如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents</span></span><br></pre></td></tr></table></figure>

<p><code>location</code>属性描述如下：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hash</td>
<td>“#contents”</td>
<td>utl中#后面的字符，没有则返回空串</td>
</tr>
<tr>
<td>host</td>
<td><a href="http://www.wrox.com/">www.wrox.com:80</a></td>
<td>服务器名称和端口号</td>
</tr>
<tr>
<td>hostname</td>
<td><a href="http://www.wrox.com/">www.wrox.com</a></td>
<td>域名，不带端口号</td>
</tr>
<tr>
<td>href</td>
<td><a href="http://www.wrox.com/WileyCDA/?q=javascript#contents">http://www.wrox.com:80/WileyCDA/?q=javascript#contents</a></td>
<td>完整url</td>
</tr>
<tr>
<td>pathname</td>
<td>“&#x2F;WileyCDA&#x2F;“</td>
<td>服务器下面的文件路径</td>
</tr>
<tr>
<td>port</td>
<td>80</td>
<td>url的端口号，没有则为空</td>
</tr>
<tr>
<td>protocol</td>
<td>http:</td>
<td>使用的协议</td>
</tr>
<tr>
<td>search</td>
<td>?q&#x3D;javascript</td>
<td>url的查询字符串，通常为？后面的内容</td>
</tr>
</tbody></table>
<p>除了 <code>hash </code>之外，只要修改<code>location</code>的一个属性，就会导致页面重新加载新<code> URL</code></p>
<p><code>location.reload()</code>，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载</p>
<p>如果要强制从服务器中重新加载，传递一个参数<code>true</code>即可</p>
<h2 id="四、navigator"><a href="#四、navigator" class="headerlink" title="四、navigator"></a>四、navigator</h2><p><code>navigator</code> 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂</p>
<p>下表列出了<code>navigator</code>对象接口定义的属性和方法：</p>
<p> <img src="https://static.vue-js.com/6797ab40-8089-11eb-ab90-d9ae814b240d.png"></p>
<p> <img src="https://static.vue-js.com/74096620-8089-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="五、screen"><a href="#五、screen" class="headerlink" title="五、screen"></a>五、screen</h2><p>保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度</p>
<p> <img src="https://static.vue-js.com/7d6b21e0-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="六、history"><a href="#六、history" class="headerlink" title="六、history"></a>六、history</h2><p><code>history</code>对象主要用来操作浏览器<code>URL</code>的历史记录，可以通过参数向前，向后，或者向指定<code>URL</code>跳转</p>
<p>常用的属性如下：</p>
<ul>
<li><code>history.go()</code></li>
</ul>
<p>接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">go</span>(<span class="string">&#x27;maixaofei.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.<span class="title function_">go</span>(<span class="number">3</span>) <span class="comment">//向前跳转三个记录</span></span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>) <span class="comment">//向后跳转一个记录</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>history.forward()</code>：向前跳转一个页面</li>
<li><code>history.back()</code>：向后跳转一个页面</li>
<li><code>history.length</code>：获取历史记录数</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的常用方法有哪些？</title>
    <url>/JavaScript/JavaScript-array-api/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/5842e560-67b6-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p>
<p>下面对数组常用的操作方法做一个归纳</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>
<ul>
<li>push()</li>
<li>unshift()</li>
<li>splice()</li>
<li>concat()</li>
</ul>
<h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = []; <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">push</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 推入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>



<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 从数组开头推入两项</span></span><br><span class="line"><span class="title function_">alert</span>(count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>



<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors) <span class="comment">// red,yellow,orange,green,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>


<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors2); <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>



<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p>
<ul>
<li>pop()</li>
<li>shift()</li>
<li>splice()</li>
<li>slice()</li>
</ul>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p> <code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code> length</code> 值，返回被删除的项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">pop</span>(); <span class="comment">// 取得最后一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>



<h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code> length</code> 值，返回被删除的项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> item = colors.<span class="title function_">shift</span>(); <span class="comment">// 取得第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>



<h4 id="splice-1"><a href="#splice-1" class="headerlink" title="splice()"></a>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// 删除第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// green,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>



<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p> slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors)   <span class="comment">// red,green,blue,yellow,purple</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors2); <span class="comment">// green,blue,yellow,purple</span></span><br><span class="line">concole.<span class="title function_">log</span>(colors3); <span class="comment">// green,blue,yellow</span></span><br></pre></td></tr></table></figure>



<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p>
<h4 id="splice-2"><a href="#splice-2" class="headerlink" title="splice()"></a>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>



<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>即查找元素，返回元素坐标或者元素值</p>
<ul>
<li>indexOf()</li>
<li>includes()</li>
<li>find()</li>
</ul>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>



<h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>返回第一个匹配的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Matt&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">people.<span class="title function_">find</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> element.<span class="property">age</span> &lt; <span class="number">28</span>) <span class="comment">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、排序方法"><a href="#二、排序方法" class="headerlink" title="二、排序方法"></a>二、排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p>
<ul>
<li>reverse() </li>
<li>sort()</li>
</ul>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>顾名思义，将数组元素方向反转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="title function_">alert</span>(values); <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>



<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="title function_">alert</span>(values); <span class="comment">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure>



<h2 id="三、转换方法"><a href="#三、转换方法" class="headerlink" title="三、转换方法"></a>三、转换方法</h2><p>常见的转换方法有：</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>)); <span class="comment">// red,green,blue</span></span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">join</span>(<span class="string">&quot;||&quot;</span>)); <span class="comment">// red||green||blue</span></span><br></pre></td></tr></table></figure>





<h2 id="四、迭代方法"><a href="#四、迭代方法" class="headerlink" title="四、迭代方法"></a>四、迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p>
<ul>
<li>some()</li>
<li>every()</li>
<li>forEach()</li>
<li>filter()</li>
<li>map()</li>
</ul>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someResult) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="title function_">every</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(everyResult) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterResult); <span class="comment">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure>



<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapResult) <span class="comment">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>bind、call、apply 区别？如何实现一个bind?</title>
    <url>/JavaScript/JavaScript-bind-call-apply/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/a900e460-7be4-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、作用"><a href="#一、作用" class="headerlink" title="一、作用"></a>一、作用</h2><p><code>call </code>、<code>apply </code>、<code>bind </code>作用是改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向</p>
<p>那么什么情况下需要改变<code>this</code>的指向呢？下面举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;lucy&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;martin&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">say</span>(); <span class="comment">// martin，this 指向 obj 对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>,<span class="number">0</span>); <span class="comment">// lucy，this 指向 window 对象</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看到，正常情况<code>say</code>方法输出<code>martin</code></p>
<p>但是我们把<code>say</code>放在<code>setTimeout</code>方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候<code>this</code>指向<code>window</code>，所以输出<code>lucy</code></p>
<p>我们实际需要的是<code>this</code>指向<code>obj</code>对象，这时候就需要该改变<code>this</code>指向了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj),<span class="number">0</span>); <span class="comment">//martin，this指向obj对象</span></span><br></pre></td></tr></table></figure>



<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>下面再来看看<code>apply</code>、<code>call</code>、<code>bind</code>的使用</p>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以数组的形式传入</p>
<p>改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">apply</span>(obj,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this会变成传入的obj，传入的参数必须是一个数组；</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>

<p>当第一个参数为<code>null</code>、<code>undefined</code>的时候，默认指向<code>window</code>(在浏览器中)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">apply</span>(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>



<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call</code>方法的第一个参数也是<code>this</code>的指向，后面传入的是一个参数列表</p>
<p>跟<code>apply</code>一样，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(obj,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// this会变成传入的obj，传入的参数必须是一个数组；</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>

<p>同样的，当第一个参数为<code>null</code>、<code>undefined</code>的时候，默认指向<code>window</code>(在浏览器中)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>



<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind方法和call很相似，第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)</p>
<p>改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bindFn = fn.<span class="title function_">bind</span>(obj); <span class="comment">// this 也会变成传入的obj ，bind不是立即执行需要执行一次</span></span><br><span class="line"><span class="title function_">bindFn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向obj</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>


<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从上面可以看到，<code>apply</code>、<code>call</code>、<code>bind</code>三者的区别在于：</p>
<ul>
<li>三者都可以改变函数的<code>this</code>对象指向</li>
<li>三者第一个参数都是<code>this</code>要指向的对象，如果如果没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></li>
<li>三者都可以传参，但是<code>apply</code>是数组，而<code>call</code>是参数列表，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</li>
<li><code>bind </code>是返回绑定this之后的函数，<code>apply </code>、<code>call</code> 则是立即执行</li>
</ul>
<h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>实现<code>bind</code>的步骤，我们可以分解成为三部分：</p>
<ul>
<li>修改<code>this</code>指向</li>
<li>动态传递参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：只在bind中传递函数参数</span></span><br><span class="line">fn.<span class="title function_">bind</span>(obj,<span class="number">1</span>,<span class="number">2</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：在bind中传递函数参数，也在返回函数中传递参数</span></span><br><span class="line">fn.<span class="title function_">bind</span>(obj,<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>兼容<code>new</code>关键字</li>
</ul>
<p>整体实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断调用对象是否为函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">          fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据调用方式，传入不同绑定值</span></span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span> ? <span class="keyword">new</span> <span class="title function_">fn</span>(...<span class="variable language_">arguments</span>) : context, args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax原理是什么？如何实现？</title>
    <url>/JavaScript/JavaScript-ajax/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/a35a2950-7b2a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>AJAX </code>全称(Async Javascript and XML)</p>
<p>即异步的<code> JavaScript</code> 和<code> XML</code>，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页</p>
<p><code>Ajax</code>的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>JavaScript</code>来操作<code>DOM</code>而更新页面</p>
<p>流程图如下：</p>
<p> <img src="https://static.vue-js.com/af42de10-7b2a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面举个例子：</p>
<p>领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作</p>
<p><code>Ajax</code>请求数据流程与”领导想找小李汇报一下工作”类似，上述秘书就相当于<code>XMLHttpRequest</code>对象，领导相当于浏览器，响应数据相当于小李</p>
<p>浏览器可以发送<code>HTTP</code>请求后，接着做其他事情，等收到<code>XHR</code>返回来的数据再进行操作</p>
<h2 id="二、实现过程"><a href="#二、实现过程" class="headerlink" title="二、实现过程"></a>二、实现过程</h2><p>实现 <code>Ajax </code>异步交互需要服务器逻辑进行配合，需要完成以下步骤：</p>
<ul>
<li><p>创建 <code>Ajax </code>的核心对象 <code>XMLHttpRequest </code>对象</p>
</li>
<li><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</p>
</li>
<li><p>构建请求所需的数据内容，并通过<code> XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</p>
</li>
<li><p>通过 <code>XMLHttpRequest</code> 对象提供的 <code>onreadystatechange</code> 事件监听服务器端你的通信状态</p>
</li>
<li><p>接受并处理服务端向客户端响应的数据结果</p>
</li>
<li><p>将处理结果更新到 <code>HTML </code>页面中</p>
</li>
</ul>
<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><p>通过<code>XMLHttpRequest()</code> 构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>



<h3 id="与服务器建立连接"><a href="#与服务器建立连接" class="headerlink" title="与服务器建立连接"></a>与服务器建立连接</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务器建立连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method, url, [<span class="keyword">async</span>][, user][, password])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p><code>method</code>：表示当前的请求方式，常见的有<code>GET</code>、<code>POST</code></p>
</li>
<li><p><code>url</code>：服务端地址</p>
</li>
<li><p><code>async</code>：布尔值，表示是否异步执行操作，默认为<code>true</code></p>
</li>
<li><p><code>user</code>: 可选的用户名用于认证用途；默认为&#96;null</p>
</li>
<li><p><code>password</code>: 可选的密码用于认证用途，默认为&#96;null</p>
</li>
</ul>
<h3 id="给服务端发送数据"><a href="#给服务端发送数据" class="headerlink" title="给服务端发送数据"></a>给服务端发送数据</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法，将客户端页面的数据发送给服务端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>([body])</span><br></pre></td></tr></table></figure>

<p><code>body</code>: 在 <code>XHR</code> 请求中要发送的数据体，如果不传递数据则为 <code>null</code></p>
<p>如果使用<code>GET</code>请求发送数据的时候，需要注意如下：</p>
<ul>
<li>将请求数据添加到<code>open()</code>方法中的<code>url</code>地址中</li>
<li>发送请求数据中的<code>send()</code>方法中参数设置为<code>null</code></li>
</ul>
<h3 id="绑定onreadystatechange事件"><a href="#绑定onreadystatechange事件" class="headerlink" title="绑定onreadystatechange事件"></a>绑定onreadystatechange事件</h3><p><code>onreadystatechange</code> 事件用于监听服务器端的通信状态，主要监听的属性为<code>XMLHttpRequest.readyState</code> ,</p>
<p>关于<code>XMLHttpRequest.readyState</code>属性有五个状态，如下图显示</p>
<p><img src="https://static.vue-js.com/9782fc90-7b31-11eb-ab90-d9ae814b240d.png"></p>
<p>只要 <code>readyState </code>属性值一变化，就会触发一次 <code>readystatechange</code> 事件</p>
<p><code>XMLHttpRequest.responseText</code>属性用于接收服务器端的响应结果</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.<span class="property">readyState</span> === <span class="number">4</span>)&#123; <span class="comment">// 整个请求过程完毕</span></span><br><span class="line">        <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; request.<span class="property">status</span> &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">responseText</span>) <span class="comment">// 服务端返回的结果</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误信息：&quot;</span> + request.<span class="property">status</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://xxxx&#x27;</span>)</span><br><span class="line">request.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>





<h2 id="三、封装"><a href="#三、封装" class="headerlink" title="三、封装"></a>三、封装</h2><p>通过上面对<code>XMLHttpRequest </code>对象的了解，下面来封装一个简单的<code>ajax</code>请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装一个ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//创建XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化参数的内容</span></span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.<span class="property">type</span> = (options.<span class="property">type</span> || <span class="string">&#x27;GET&#x27;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">    options.<span class="property">dataType</span> = options.<span class="property">dataType</span> || <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> params = options.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + params, <span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, options.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(params)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收请求</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> status = xhr.<span class="property">status</span></span><br><span class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                options.<span class="property">success</span> &amp;&amp; options.<span class="title function_">success</span>(xhr.<span class="property">responseText</span>, xhr.<span class="property">responseXML</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                options.<span class="property">fail</span> &amp;&amp; options.<span class="title function_">fail</span>(status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">text,xml</span>)&#123;<span class="comment">//请求成功后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">status</span>)&#123;<span class="comment">////请求失败后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM常见的操作有哪些？</title>
    <url>/JavaScript/JavaScript-Dom/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/a89c99a0-7fdc-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、DOM"><a href="#一、DOM" class="headerlink" title="一、DOM"></a>一、DOM</h2><p>文档对象模型 (DOM) 是 <code>HTML</code> 和 <code>XML</code> 文档的编程接口</p>
<p>它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容</p>
<p>任何 <code>HTML </code>或<code>XML</code>文档都可以用 <code>DOM </code>表示为一个由节点构成的层级结构</p>
<p>节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>DOM</code>像原子包含着亚原子微粒那样，也有很多类型的<code>DOM</code>节点包含着其他类型的节点。接下来我们先看看其中的三种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        content</span><br><span class="line">    &lt;/p &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述结构中，<code>div</code>、<code>p</code>就是元素节点，<code>content</code>就是文本节点，<code>title</code>就是属性节点</p>
<h2 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h2><p>日常前端开发，我们都离不开<code>DOM</code>操作</p>
<p>在以前，我们使用<code>Jquery</code>，<code>zepto</code>等库来操作<code>DOM</code>，之后在<code>vue</code>，<code>Angular</code>，<code>React</code>等框架出现后，我们通过操作数据来控制<code>DOM</code>（绝大多数时候），越来越少的去直接操作<code>DOM</code></p>
<p>但这并不代表原生操作不重要。相反，<code>DOM</code>操作才能有助于我们理解框架深层的内容</p>
<p>下面就来分析<code>DOM</code>常见的操作，主要分为：</p>
<ul>
<li>创建节点</li>
<li>查询节点</li>
<li>更新节点</li>
<li>添加节点</li>
<li>删除节点</li>
</ul>
<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><h4 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h4><p>创建新元素，接受一个参数，即要创建元素的标签名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h4><p>创建一个文本节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> textEl = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;content&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到<code>DOM</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br></pre></td></tr></table></figure>

<p>当请求把一个<code>DocumentFragment</code> 节点插入文档树时，插入的不是 <code>DocumentFragment </code>自身，而是它的所有子孙节点</p>
<h4 id="createAttribute"><a href="#createAttribute" class="headerlink" title="createAttribute"></a>createAttribute</h4><p>创建属性节点，可以是自定义属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataAttribute = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;custom&#x27;</span>);</span><br><span class="line">consle.<span class="title function_">log</span>(dataAttribute);</span><br></pre></td></tr></table></figure>



<h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><h4 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h4><p>传入任何有效的<code> css</code> 选择器，即可选中单个 <code>DOM </code>元素（首个）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.element&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#element&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[name=&quot;username&quot;]&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div + p &gt; span&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果页面上没有指定的元素时，返回 <code>null</code></p>
<h4 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h4><p>返回一个包含节点子树内所有与之相匹配的<code>Element</code>节点列表，如果没有相匹配的，则返回一个空节点列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> notLive = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，该方法返回的是一个 <code>NodeList </code>的静态实例，它是一个静态的“快照”，而非“实时”的查询</p>
<p>关于获取<code>DOM</code>元素的方法还有如下，就不一一述说</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id属性值&#x27;</span>);返回拥有指定id的对象的引用</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;class属性值&#x27;</span>);返回拥有指定<span class="keyword">class</span>的对象集合</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);返回拥有指定标签名的对象集合</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;name属性值&#x27;</span>); 返回拥有指定名称的对象结合</span><br><span class="line"><span class="variable language_">document</span>/element.<span class="title function_">querySelector</span>(<span class="string">&#x27;CSS选择器&#x27;</span>);  仅返回第一个匹配的元素</span><br><span class="line"><span class="variable language_">document</span>/element.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;CSS选择器&#x27;</span>);   返回所有匹配的元素</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>;  获取页面中的<span class="variable constant_">HTML</span>标签</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>; 获取页面中的<span class="variable constant_">BODY</span>标签</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span>[<span class="string">&#x27;&#x27;</span>];  获取页面中的所有元素节点的对象集合型</span><br></pre></td></tr></table></figure>

<p>除此之外，每个<code>DOM</code>元素还有<code>parentNode</code>、<code>childNodes</code>、<code>firstChild</code>、<code>lastChild</code>、<code>nextSibling</code>、<code>previousSibling</code>属性，关系图如下图所示</p>
<p> <img src="https://static.vue-js.com/c100f450-7fdc-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>不但可以修改一个<code>DOM</code>节点的文本内容，还可以直接通过<code>HTML</code>片段修改<code>DOM</code>节点内部的子树</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置文本为abc:</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&#x27;ABC&#x27;</span>; <span class="comment">// &lt;p id=&quot;p&quot;&gt;ABC&lt;/p &gt;</span></span><br><span class="line"><span class="comment">// 设置HTML:</span></span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="string">&#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;</span>;</span><br><span class="line"><span class="comment">// &lt;p&gt;...&lt;/p &gt;的内部结构已修改</span></span><br></pre></td></tr></table></figure>



<h4 id="innerText、textContent"><a href="#innerText、textContent" class="headerlink" title="innerText、textContent"></a>innerText、textContent</h4><p>自动对字符串进行<code>HTML</code>编码，保证无法设置任何<code>HTML</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span><br><span class="line">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class="line">// 设置文本:</span><br><span class="line">p.innerText = &#x27;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#x27;;</span><br><span class="line">// HTML被自动编码，无法设置一个&lt;script&gt;节点:</span><br><span class="line">// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p &gt;</span><br></pre></td></tr></table></figure>

<p>两者的区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本</p>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>DOM</code>节点的<code>style</code>属性对应所有的<code>CSS</code>，可以直接获取或设置。遇到<code>-</code>需要转化为驼峰命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p-id&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置CSS:</span></span><br><span class="line">p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#ff0000&#x27;</span>;</span><br><span class="line">p.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span>; <span class="comment">// 驼峰命名</span></span><br><span class="line">p.<span class="property">style</span>.<span class="property">paddingTop</span> = <span class="string">&#x27;2em&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><h4 id="innerHTML-1"><a href="#innerHTML-1" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>如果这个DOM节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可以修改<code>DOM</code>节点的内容，相当于添加了新的<code>DOM</code>节点</p>
<p>如果这个DOM节点不是空的，那就不能这么做，因为<code>innerHTML</code>会直接替换掉原来的所有子节点</p>
<h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h4><p>把一个子节点添加到父节点的最后一个子节点</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="variable constant_">HTML</span>结构 --&gt;</span><br><span class="line">&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>添加一个<code>p</code>元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> js = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;js&#x27;</span>)</span><br><span class="line">js.<span class="property">innerHTML</span> = <span class="string">&quot;JavaScript&quot;</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.<span class="title function_">appendChild</span>(js);</span><br></pre></td></tr></table></figure>

<p>现在<code>HTML</code>结构变成了下面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="variable constant_">HTML</span>结构 --&gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;  &lt;!-- 添加元素 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>上述代码中，我们是获取<code>DOM</code>元素后再进行添加操作，这个<code>js</code>节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置</p>
<p>如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>),</span><br><span class="line"><span class="keyword">const</span> haskell = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">haskell.<span class="property">id</span> = <span class="string">&#x27;haskell&#x27;</span>;</span><br><span class="line">haskell.<span class="property">innerText</span> = <span class="string">&#x27;Haskell&#x27;</span>;</span><br><span class="line">list.<span class="title function_">appendChild</span>(haskell);</span><br></pre></td></tr></table></figure>



<h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h4><p>把子节点插入到指定的位置，使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.<span class="title function_">insertBefore</span>(newElement, referenceElement)</span><br></pre></td></tr></table></figure>

<p>子节点会插入到<code>referenceElement</code>之前</p>
<h4 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h4><p>在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);<span class="comment">//第一个参数属性名，第二个参数属性值。</span></span><br></pre></td></tr></table></figure>



<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的<code>removeChild</code>把自己删掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拿到待删除节点:</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;to-be-removed&#x27;</span>);</span><br><span class="line"><span class="comment">// 拿到父节点:</span></span><br><span class="line"><span class="keyword">const</span> parent = self.<span class="property">parentElement</span>;</span><br><span class="line"><span class="comment">// 删除:</span></span><br><span class="line"><span class="keyword">const</span> removed = parent.<span class="title function_">removeChild</span>(self);</span><br><span class="line">removed === self; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript本地存储的方式有哪些？区别及应用场景？</title>
    <url>/JavaScript/JavaScript-cache/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/68dccf20-849f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、方式"><a href="#一、方式" class="headerlink" title="一、方式"></a>一、方式</h2><p><code>javaScript</code>本地缓存的方法我们主要讲述以下四种：</p>
<ul>
<li>cookie</li>
<li>sessionStorage</li>
<li>localStorage</li>
<li>indexedDB</li>
</ul>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><code>Cookie</code>，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 <code>HTTP </code>无状态导致的问题</p>
<p>作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 <code>cookie </code>有效期、安全性、使用范围的可选属性组成</p>
<p>但是<code>cookie</code>在每次请求中都会被发送，如果不使用 <code>HTTPS </code>并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 <code>cookie </code>保持登录态的网站上，如果 <code>cookie </code>被窃取，他人很容易利用你的 <code>cookie </code>来假扮成你登录网站</p>
<p>关于<code>cookie</code>常用的属性如下：</p>
<ul>
<li>Expires 用于设置 Cookie 的过期时间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Expires</span>=<span class="title class_">Wed</span>, <span class="number">21</span> <span class="title class_">Oct</span> <span class="number">2015</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> <span class="variable constant_">GMT</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比<code>Expires</code>高）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Max</span>-<span class="title class_">Age</span>=<span class="number">604800</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Domain </code>指定了 <code>Cookie</code> 可以送达的主机名</li>
<li><code>Path </code>指定了一个 <code>URL </code>路径，这个路径必须出现在要请求的资源的路径中才可以发送 <code>Cookie</code> 首部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Path</span>=<span class="regexp">/docs   # /</span>docs/<span class="title class_">Web</span>/ 下的资源会带 <span class="title class_">Cookie</span> 首部</span><br></pre></td></tr></table></figure>

<ul>
<li>标记为 <code>Secure </code>的 <code>Cookie </code>只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端</li>
</ul>
<p>通过上述，我们可以看到<code>cookie</code>一开始的作用并不是为了缓存而设计出来，只是借用了<code>cookie</code>的特性实现缓存</p>
<p>关于<code>cookie</code>的使用如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;名字=值&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>关于<code>cookie</code>的修改，首先要确定<code>domain</code>和<code>path</code>属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的<code>cookie</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>:name=aa; domain=aa.<span class="property">net</span>; path=/  # 服务端设置</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> =name=bb; domain=aa.<span class="property">net</span>; path=/  # 客户端设置</span><br></pre></td></tr></table></figure>

<p>最后<code>cookie</code>的删除，最常用的方法就是给<code>cookie</code>设置一个过期的时间，这样<code>cookie</code>过期后会被浏览器删除</p>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p><code>HTML5</code>新方法，IE8及以上浏览器都兼容</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的</li>
<li>存储的信息在同一域中是共享的</li>
<li>当本页操作（新增、修改、删除）了<code>localStorage</code>的时候，本页面不会触发<code>storage</code>事件,但是别的页面会触发<code>storage</code>事件。</li>
<li>大小：5M（跟浏览器厂商有关系）</li>
<li><code>localStorage</code>本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li>
<li>受同源策略的限制</li>
</ul>
<p>下面再看看关于<code>localStorage</code>的使用</p>
<p>设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;cfangxu&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>获取键名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">key</span>(<span class="number">0</span>) <span class="comment">//获取第一个键名</span></span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>一次性清除所有存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<p><code>localStorage</code> 也不是完美的，它有两个缺点：</p>
<ul>
<li>无法像<code>Cookie</code>一样设置过期时间</li>
<li>只能存入字符串，无法直接存对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;value&#x27;</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>)); <span class="comment">// &#x27;[object, Object]&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p><code>sessionStorage </code>和 <code>localStorage </code>使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，<code>sessionStorage</code> 将会删除数据</p>
<h3 id="扩展的前端存储方式"><a href="#扩展的前端存储方式" class="headerlink" title="扩展的前端存储方式"></a>扩展的前端存储方式</h3><p><code>indexedDB </code>是一种低级API，用于客户端存储大量结构化数据(包括, 文件&#x2F; blobs)。该API使用索引来实现对该数据的高性能搜索</p>
<p>虽然 <code>Web Storage </code>对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。<code>IndexedDB</code>提供了一个解决方案</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>储存量理论上没有上限</li>
<li>所有操作都是异步的，相比 <code>LocalStorage</code> 同步操作性能更高，尤其是数据量较大时</li>
<li>原生支持储存<code>JS</code>的对象</li>
<li>是个正经的数据库，意味着数据库能干的事它都能干</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>操作非常繁琐</li>
<li>本身有一定门槛</li>
</ul>
<p>关于<code>indexedDB</code>的使用基本使用步骤如下：</p>
<ul>
<li><p>打开数据库并且开始一个事务</p>
</li>
<li><p>创建一个 <code>object store</code></p>
</li>
<li><p>构建一个请求来执行一些数据库操作，像增加或提取数据等。</p>
</li>
<li><p>通过监听正确类型的 <code>DOM</code> 事件以等待操作完成。</p>
</li>
<li><p>在操作结果上进行一些操作（可以在 <code>request </code>对象中找到）</p>
</li>
</ul>
<p>关于使用<code>indexdb</code>的使用会比较繁琐，大家可以通过使用<code>Godb.js</code>库进行缓存，最大化的降低操作难度</p>
<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>关于<code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>三者的区别主要如下：</p>
<ul>
<li><p>存储大小：<code> cookie</code>数据大小不能超过<code>4k</code>，<code>sessionStorage</code>和<code>localStorage </code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</p>
</li>
<li><p>有效时间：<code>localStorage  </code>存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； <code>sessionStorage  </code>数据在当前浏览器窗口关闭后自动删除；<code>cookie</code>设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</p>
</li>
<li><p>数据与服务器之间的交互方式，<code>  cookie</code>的数据会自动的传递到服务器，服务器端也可以写<code>cookie</code>到客户端； <code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p>
</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：</p>
<ul>
<li>标记用户与跟踪用户行为的情况，推荐使用<code>cookie</code></li>
<li>适合长期保存在本地的数据（令牌），推荐使用<code>localStorage</code></li>
<li>敏感账号一次性登录，推荐使用<code>sessionStorage</code></li>
<li>存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用<code>indexedDB</code></li>
</ul>
<h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ">https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ</a></li>
<li><a href="https://github.com/chenstarx/GoDB.js">https://github.com/chenstarx/GoDB.js</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包的理解？闭包使用场景</title>
    <url>/JavaScript/JavaScript-closure/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/c141a030-6a7a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p>
<p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p>
<p>在 <code>JavaScript </code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p>
<p>下面给出一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123; <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">        <span class="title function_">alert</span>(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">displayName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure>

<p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>任何闭包的使用场景都离不开这两点：</p>
<ul>
<li>创建私有变量</li>
<li>延长变量的生命周期</li>
</ul>
<blockquote>
<p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p>
</blockquote>
<p>下面举个例子：</p>
<p>在页面上添加一些可以调整字号的按钮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeSizer</span>(<span class="params">size</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = <span class="title function_">makeSizer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> size14 = <span class="title function_">makeSizer</span>(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">var</span> size16 = <span class="title function_">makeSizer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-12&#x27;</span>).<span class="property">onclick</span> = size12;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-14&#x27;</span>).<span class="property">onclick</span> = size14;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-16&#x27;</span>).<span class="property">onclick</span> = size16;</span><br></pre></td></tr></table></figure>



<h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设我们有一个求长方形面积的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们碰到的长方形的宽老是10</span></span><br><span class="line"><span class="keyword">const</span> area1 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> area2 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">const</span> area3 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">width</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">height</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTenWidthArea = <span class="title function_">getArea</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span><br><span class="line"><span class="keyword">const</span> area1 = <span class="title function_">getTenWidthArea</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span><br><span class="line"><span class="keyword">const</span> getTwentyWidthArea = <span class="title function_">getArea</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>



<h3 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h3><p>在<code>JavaScript</code>中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Counter</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter1</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Counter2</span> = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter1</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter1</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter2</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure>

<p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p>
<p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p>
<h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p>
<p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p>
<p>原因在于每个对象的创建，方法都会被重新赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getMessage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyObject</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">MyObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMessage</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中执行上下文和执行栈是什么？</title>
    <url>/JavaScript/JavaScript-context-stack/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/8652b710-74c1-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、执行上下文"><a href="#一、执行上下文" class="headerlink" title="一、执行上下文"></a>一、执行上下文</h2><p>简单的来说，执行上下文是一种对<code>Javascript</code>代码执行环境的抽象概念，也就是说只要有<code>Javascript</code>代码运行，那么它就一定是运行在执行上下文中</p>
<p>执行上下文的类型分为三种：</p>
<ul>
<li>全局执行上下文：只有一个，浏览器中的全局对象就是 <code>window </code>对象，<code>this</code> 指向这个全局对象</li>
<li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li>
<li>Eval 函数执行上下文： 指的是运行在 <code>eval</code> 函数中的代码，很少用而且不建议使用</li>
</ul>
<p>下面给出全局上下文和函数上下文的例子：</p>
<p> <img src="https://static.vue-js.com/90dd3b60-74c1-11eb-85f6-6fac77c0c9b3.png"></p>
<p>紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问</p>
<p>可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问</p>
<h2 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a>二、生命周期</h2><p>执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段</p>
<h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><p>创建阶段即当函数被调用，但未执行任何其内部代码之前</p>
<p>创建阶段做了三件事：</p>
<ul>
<li>确定 this 的值，也被称为 <code>This Binding</code></li>
<li>LexicalEnvironment（词法环境） 组件被创建</li>
<li>VariableEnvironment（变量环境） 组件被创建</li>
</ul>
<p>伪代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ExecutionContext</span> = &#123;  </span><br><span class="line">  <span class="title class_">ThisBinding</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,     // 确定this </span></span><br><span class="line"><span class="language-xml">  LexicalEnvironment = &#123; ... &#125;,   // 词法环境</span></span><br><span class="line"><span class="language-xml">  VariableEnvironment = &#123; ... &#125;,  // 变量环境</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="This-Binding"><a href="#This-Binding" class="headerlink" title="This Binding"></a>This Binding</h4><p>确定<code>this</code>的值我们前面讲到，<code>this</code>的值是在执行的时候才能确认，定义的时候不能确认</p>
<h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><p>词法环境有两个组成部分：</p>
<ul>
<li><p>全局环境：是一个没有外部环境的词法环境，其外部环境引用为<code> null</code>，有一个全局对象，<code>this</code> 的值指向这个全局对象</p>
</li>
<li><p>函数环境：用户在函数中定义的变量被存储在环境记录中，包含了<code>arguments</code> 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境</p>
</li>
</ul>
<p>伪代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">GlobalExectionContext</span> = &#123;  <span class="comment">// 全局执行上下文</span></span><br><span class="line">  <span class="title class_">LexicalEnvironment</span>: &#123;       <span class="comment">// 词法环境</span></span><br><span class="line">    <span class="title class_">EnvironmentRecord</span>: &#123;     <span class="comment">// 环境记录</span></span><br><span class="line">      <span class="title class_">Type</span>: <span class="string">&quot;Object&quot;</span>,           <span class="comment">// 全局环境</span></span><br><span class="line">      <span class="comment">// 标识符绑定在这里 </span></span><br><span class="line">      <span class="attr">outer</span>: &lt;<span class="literal">null</span>&gt;           <span class="comment">// 对外部环境的引用</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">FunctionExectionContext</span> = &#123; <span class="comment">// 函数执行上下文</span></span><br><span class="line">  <span class="title class_">LexicalEnvironment</span>: &#123;     <span class="comment">// 词法环境</span></span><br><span class="line">    <span class="title class_">EnvironmentRecord</span>: &#123;    <span class="comment">// 环境记录</span></span><br><span class="line">      <span class="title class_">Type</span>: <span class="string">&quot;Declarative&quot;</span>,      <span class="comment">// 函数环境</span></span><br><span class="line">      <span class="comment">// 标识符绑定在这里      // 对外部环境的引用</span></span><br><span class="line">      <span class="attr">outer</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Global</span> <span class="attr">or</span> <span class="attr">outer</span> <span class="attr">function</span> <span class="attr">environment</span> <span class="attr">reference</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  &#125;  </span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h4><p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性</p>
<p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ <code>let</code> 和 <code>const</code> ）绑定，而后者仅用于存储变量（ <code>var</code> ）绑定</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;  </span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;  </span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">e, f</span>) &#123;  </span><br><span class="line"> <span class="keyword">var</span> g = <span class="number">20</span>;  </span><br><span class="line"> <span class="keyword">return</span> e * f * g;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = <span class="title function_">multiply</span>(<span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>执行上下文如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">GlobalExectionContext</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ThisBinding</span>: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;  // 词法环境</span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Object&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      a: &lt; uninitialized &gt;,  </span><br><span class="line">      b: &lt; uninitialized &gt;,  </span><br><span class="line">      multiply: &lt; func &gt;  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;  // 变量环境</span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Object&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      c: undefined,  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123;  </span><br><span class="line">   </span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Declarative&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Declarative&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      g: undefined  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>留意上面的代码，<code>let</code>和<code>const</code>定义的变量<code>a</code>和<code>b</code>在创建阶段没有被赋值，但<code>var</code>声明的变量从在创建阶段被赋值为<code>undefined</code></p>
<p>这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中</p>
<p>但变量会被初始化为<code>undefined</code>(<code>var</code>声明的情况下)和保持<code>uninitialized</code>(未初始化状态)(使用<code>let</code>和<code>const</code>声明的情况下)</p>
<p>这就是变量提升的实际原因</p>
<h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>在这阶段，执行变量赋值、代码执行</p>
<p>如果 <code>Javascript</code> 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 <code>undefined</code> 值</p>
<h3 id="回收阶段"><a href="#回收阶段" class="headerlink" title="回收阶段"></a>回收阶段</h3><p>执行上下文出栈等待虚拟机回收执行上下文</p>
<h2 id="二、执行栈"><a href="#二、执行栈" class="headerlink" title="二、执行栈"></a>二、执行栈</h2><p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文</p>
<p> <img src="https://static.vue-js.com/9eda0310-74c1-11eb-ab90-d9ae814b240d.png"></p>
<p>当<code>Javascript</code>引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中</p>
<p>每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中</p>
<p>引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Inside first function&#x27;</span>);</span><br><span class="line">  <span class="title function_">second</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Again inside first function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Inside second function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">first</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Inside Global Execution Context&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>转化成图的形式</p>
<p> <img src="https://static.vue-js.com/ac11a600-74c1-11eb-ab90-d9ae814b240d.png"></p>
<p>简单分析一下流程：</p>
<ul>
<li>创建全局上下文请压入执行栈</li>
<li><code>first</code>函数被调用，创建函数执行上下文并压入栈</li>
<li>执行<code>first</code>函数过程遇到<code>second</code>函数，再创建一个函数执行上下文并压入栈</li>
<li><code>second</code>函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文<code>first</code>函数</li>
<li><code>first</code>函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文</li>
<li>所有代码执行完毕，全局上下文也会被推出栈中，程序结束</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/107552264">https://zhuanlan.zhihu.com/p/107552264</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>大文件上传如何做断点续传？</title>
    <url>/JavaScript/JavaScript-continue-to-upload/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/3ccb0e90-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂</p>
<p>文件上传简单，文件变大就复杂</p>
<p>上传大文件时，以下几个变量会影响我们的用户体验</p>
<ul>
<li>服务器处理数据的能力</li>
<li>请求超时</li>
<li>网络波动</li>
</ul>
<p>上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等</p>
<p>为了解决上述问题，我们需要对大文件上传单独处理</p>
<p>这里涉及到分片上传及断点续传两个概念</p>
<h4 id="分片上传"><a href="#分片上传" class="headerlink" title="分片上传"></a>分片上传</h4><p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传</p>
<p>如下图</p>
<p> <img src="https://static.vue-js.com/21db7520-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件</p>
<p>大致流程如下：</p>
<ol>
<li>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</li>
<li>初始化一个分片上传任务，返回本次分片上传唯一标识；</li>
<li>按照一定的策略（串行或并行）发送各个分片数据块；</li>
<li>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件</li>
</ol>
<h4 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h4><p>断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分</p>
<p>每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度</p>
<p>一般实现方式有两种：</p>
<ul>
<li>服务器端返回，告知从哪开始</li>
<li>浏览器端自行处理</li>
</ul>
<p>上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可</p>
<p>如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可</p>
<h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><p>整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕</p>
<p><img src="https://static.vue-js.com/465d2920-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面的内容都是伪代码</p>
<p>读取文件内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用<code>md5</code>实现文件的唯一性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> md5code = <span class="title function_">md5</span>(file);</span><br></pre></td></tr></table></figure>

<p>然后开始对文件进行分割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line">reader.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">//每10M切割一段,这里只做一个切割演示，实际切割需要循环切割，</span></span><br><span class="line">    <span class="keyword">var</span> slice = e.<span class="property">target</span>.<span class="property">result</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>h5上传一个（一片）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formdata.<span class="title function_">append</span>(<span class="string">&#x27;0&#x27;</span>, slice);</span><br><span class="line"><span class="comment">//这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案</span></span><br><span class="line">formdata.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, file.<span class="property">filename</span>);</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//xhr.responseText</span></span><br><span class="line">&#125;);</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(formdata);</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, updateProgress);</span><br><span class="line">xhr.<span class="property">upload</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;progress&#x27;</span>, updateProgress);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateProgress</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        <span class="comment">//进度条</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里给出常见的图片和视频的文件类型判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFileType</span>(<span class="params">type, file, back</span>) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* type png jpg mp4 ...</span></span><br><span class="line"><span class="comment">* file input.change=&gt; this.files[0]</span></span><br><span class="line"><span class="comment">* back callback(boolean)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="title function_">back</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> type = args[<span class="number">0</span>]; <span class="comment">// type = &#x27;(png|jpg)&#x27; , &#x27;png&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> file = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> back = <span class="keyword">typeof</span> args[<span class="number">2</span>] == <span class="string">&#x27;function&#x27;</span> ? args[<span class="number">2</span>] : <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (file.<span class="property">type</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型</span></span><br><span class="line">        <span class="keyword">var</span> imgType = [</span><br><span class="line">            <span class="string">&#x27;ff d8 ff&#x27;</span>, <span class="comment">//jpg</span></span><br><span class="line">            <span class="string">&#x27;89 50 4e&#x27;</span>, <span class="comment">//png</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 14 66 74 79 70 69 73 6F 6D&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 18 66 74 79 70 33 67 70 35&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 33 67 70 35&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 4D 53 4E 56&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 69 73 6F 6D&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 18 66 74 79 70 6D 70 34 32&#x27;</span>, <span class="comment">//m4v</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 6D 70 34 32&#x27;</span>, <span class="comment">//m4v</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 14 66 74 79 70 71 74 20 20&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 71 74 20 20&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 6D 6F 6F 76&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;4F 67 67 53 0 02&#x27;</span>, <span class="comment">//ogg</span></span><br><span class="line">            <span class="string">&#x27;1A 45 DF A3&#x27;</span>, <span class="comment">//ogg</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;52 49 46 46 x x x x 41 56 49 20&#x27;</span>, <span class="comment">//avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54)</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">var</span> typeName = [</span><br><span class="line">            <span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;m4v&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;m4v&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ogg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ogg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;avi&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">var</span> sliceSize = <span class="regexp">/png|jpg|jpeg/</span>.<span class="title function_">test</span>(type) ? <span class="number">3</span> : <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        reader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line">        reader.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> slice = e.<span class="property">target</span>.<span class="property">result</span>.<span class="title function_">slice</span>(<span class="number">0</span>, sliceSize);</span><br><span class="line">            reader = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (slice &amp;&amp; slice.<span class="property">byteLength</span> == sliceSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(slice);</span><br><span class="line">                <span class="keyword">var</span> arr = [];</span><br><span class="line">                view.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">v</span>) &#123;</span><br><span class="line">                    arr.<span class="title function_">push</span>(v.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">                view = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">var</span> idx = arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">indexOf</span>(imgType);</span><br><span class="line">                <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="title function_">back</span>(typeName[idx]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">v</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">3</span> &amp;&amp; i &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">var</span> idx = arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">indexOf</span>(imgType);</span><br><span class="line">                    <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="title function_">back</span>(typeName[idx]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">back</span>(<span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">back</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> type = file.<span class="property">name</span>.<span class="title function_">match</span>(<span class="regexp">/\.(\w+)$/</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="title function_">back</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">checkFileType</span>(<span class="string">&#x27;(mov|mp4|avi)&#x27;</span>,file,<span class="keyword">function</span>(<span class="params">fileType</span>)&#123;</span><br><span class="line">    <span class="comment">// fileType = mp4,</span></span><br><span class="line">    <span class="comment">// 如果file的类型不在枚举之列，则返回false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面上传文件的一步，可以改成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formdata.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, md5code+<span class="string">&#x27;.&#x27;</span>+fileType);</span><br></pre></td></tr></table></figure>

<p>有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断</p>
<p>后端主要做的内容为：根据前端传给后台的<code>md5</code>值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传</p>
<p>如果想要暂停切片的上传，可以使用<code>XMLHttpRequest </code>的 <code>abort </code>方法</p>
<h2 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h2><ul>
<li>大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度</li>
<li>网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part</li>
<li>流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如</p>
<ul>
<li>切片上传失败怎么办</li>
<li>上传过程中刷新页面怎么办</li>
<li>如何进行并行上传</li>
<li>切片什么时候按数量切，什么时候按大小切</li>
<li>如何结合 Web Worker 处理大文件上传</li>
<li>如何实现秒传</li>
</ul>
<p>人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 <del>_</del></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000009448892">https://segmentfault.com/a/1190000009448892</a></li>
<li><a href="https://baike.baidu.com/">https://baike.baidu.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝浅拷贝的区别？如何实现一个深拷贝？</title>
    <url>/JavaScript/JavaScript-copy/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/cdf952e0-69b8-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、数据类型存储"><a href="#一、数据类型存储" class="headerlink" title="一、数据类型存储"></a>一、数据类型存储</h2><p>前面文章我们讲到，<code>JavaScript</code>中存在两大数据类型：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>基本类型数据保存在在栈内存中</p>
<p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p>
<h2 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>
<p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p>
<p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>
<p>下面简单实现一个浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(prop))&#123;</span><br><span class="line">            newObj[prop] = obj[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p>
<ul>
<li><code>Object.assign</code></li>
<li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li>
<li>使用拓展运算符实现的复制</li>
</ul>
<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">nature</span>: [<span class="string">&#x27;smart&#x27;</span>, <span class="string">&#x27;good&#x27;</span>],</span><br><span class="line">    <span class="attr">names</span>: &#123;</span><br><span class="line">        <span class="attr">name1</span>: <span class="string">&#x27;fx&#x27;</span>,</span><br><span class="line">        <span class="attr">name2</span>: <span class="string">&#x27;xka&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">love</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fx is a great girl&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, fxObj);</span><br></pre></td></tr></table></figure>



<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.<span class="title function_">slice</span>(<span class="number">0</span>)</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr) <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs) <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>



<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.<span class="title function_">concat</span>()</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr) <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs) <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>







<h3 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> fxArrs = [...fxArr]</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArr) <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fxArrs) <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>





<h2 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h2><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>
<p>常见的深拷贝方式有：</p>
<ul>
<li><p>_.cloneDeep()</p>
</li>
<li><p>jQuery.extend()</p>
</li>
<li><p>JSON.stringify()</p>
</li>
<li><p>手写循环递归</p>
</li>
</ul>
<h3 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = _.<span class="title function_">cloneDeep</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">b</span>.<span class="property">f</span> === obj2.<span class="property">b</span>.<span class="property">f</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h3 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = $.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">b</span>.<span class="property">f</span> === obj2.<span class="property">b</span>.<span class="property">f</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>





<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br></pre></td></tr></table></figure>

<p>但是这种方式存在弊端，会忽略<code>undefined</code>、<code>symbol</code>和<code>函数</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="attr">name1</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">name3</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">name4</span>:  <span class="title class_">Symbol</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;name: &quot;A&quot;&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="循环递归"><a href="#循环递归" class="headerlink" title="循环递归"></a>循环递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = <span class="title function_">deepClone</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><p>下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别</p>
<p> <img src="https://static.vue-js.com/d9862c00-69b8-11eb-ab90-d9ae814b240d.png"></p>
<p>从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样</p>
<p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;init&#x27;</span>,</span><br><span class="line">    arr : [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3=<span class="title function_">shallowClone</span>(obj1) <span class="comment">// 一个浅拷贝方法</span></span><br><span class="line">obj3.<span class="property">name</span> = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj3.<span class="property">arr</span>[<span class="number">1</span>] = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] ; <span class="comment">// 新旧对象还是共享同一块内存</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1&#x27;</span>,obj1) <span class="comment">// obj1 &#123; name: &#x27;init&#x27;,  arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj3&#x27;</span>,obj3) <span class="comment">// obj3 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure>

<p>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;init&#x27;</span>,</span><br><span class="line">    arr : [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj4=<span class="title function_">deepClone</span>(obj1) <span class="comment">// 一个深拷贝方法</span></span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj4.<span class="property">arr</span>[<span class="number">1</span>] = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] ; <span class="comment">// 新对象跟原对象不共享内存</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1&#x27;</span>,obj1) <span class="comment">// obj1 &#123; name: &#x27;init&#x27;, arr: [ 1, [ 2, 3 ], 4 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj4&#x27;</span>,obj4) <span class="comment">// obj4 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前提为拷贝类型为引用类型的情况下：</p>
<ul>
<li><p>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</p>
</li>
<li><p>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的数据类型？存储上的差别？</title>
    <url>/JavaScript/JavaScript-data-type/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/6d133f90-6463-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>JavaScript</code>中，我们可以分成两种类型：</p>
<ul>
<li>基本类型</li>
<li>复杂类型</li>
</ul>
<p>两种类型的区别是：存储位置不同</p>
<h2 id="一、基本类型"><a href="#一、基本类型" class="headerlink" title="一、基本类型"></a>一、基本类型</h2><p>基本类型主要为以下6种：</p>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Undefined</li>
<li>null</li>
<li>symbol</li>
</ul>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x开头）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span> <span class="comment">// 10进制的55</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">070</span> <span class="comment">// 8进制的56</span></span><br><span class="line"><span class="keyword">let</span> hexNum1 = <span class="number">0xA</span> <span class="comment">//16进制的10</span></span><br></pre></td></tr></table></figure>

<p>浮点类型则在数值汇总必须包含小数点，还可通过科学计数法表示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐</span></span><br><span class="line"><span class="keyword">let</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">// 等于 31250000</span></span><br></pre></td></tr></table></figure>

<p>在数值类型中，存在一个特殊数值<code>NaN</code>，意为”不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>/<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">0</span>/+<span class="number">0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>



<h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p><code>Undefined</code> 类型只有一个值，就是特殊值 <code>undefined</code>。当使用 <code>var </code>或 <code>let </code>声明了变量但没有初始化时，就相当于给变量赋予了 <code>undefined </code>值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>包含<code> undefined</code> 值的变量跟未定义变量是有区别的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message; <span class="comment">// 这个变量被声明了，只是值为 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 没有声明过这个变量，报错</span></span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串可以使用双引号（”）、单引号（’）或反引号（&#96;）标示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&#x27;Jacob&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">`Jingleheimerschmidt`</span></span><br></pre></td></tr></table></figure>

<p>字符串是不可变的，意思是一旦创建，它们的值就不能变了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>;  <span class="comment">// 先销毁再创建</span></span><br></pre></td></tr></table></figure>



<h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p><code>Null </code>类型同样只有一个值，即特殊值 <code>null</code></p>
<p>逻辑上讲， null 值表示一个空对象指针，这也是给<code>typeof </code>传一个 <code>null</code> 会返回 <code>&quot;object&quot;</code> 的原因</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> car); <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>undefined</code> 值是由 <code>null </code>值派生而来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>只要变量要保存对象，而当时又没有那个对象可保存，就可用 <code>null </code>来填充该变量</p>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p><code>Boolean </code>（布尔值）类型有两个字面值： <code>true</code> 和<code> false</code></p>
<p>通过<code>Boolean</code>可以将其他类型的数据转化成布尔值</p>
<p>规则如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数据类型      				转换为 <span class="literal">true</span> 的值      				转换为 <span class="literal">false</span> 的值</span><br><span class="line"> <span class="title class_">String</span>        				 非空字符串          					<span class="string">&quot;&quot;</span> </span><br><span class="line"> <span class="title class_">Number</span> 				非零数值（包括无穷值）						<span class="number">0</span> 、 <span class="title class_">NaN</span> </span><br><span class="line"> <span class="title class_">Object</span> 					 任意对象 							   <span class="literal">null</span></span><br><span class="line"><span class="title class_">Undefined</span> 					N/A （不存在） 						<span class="literal">undefined</span></span><br></pre></td></tr></table></figure>



<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> otherGenericSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(genericSymbol == otherGenericSymbol); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> otherFooSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fooSymbol == otherFooSymbol); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>





<h2 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h2><p>复杂类型统称为<code>Object</code>，我们这里主要讲述下面三种：</p>
<ul>
<li>Object</li>
<li>Array</li>
<li>Function</li>
</ul>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>创建<code>object</code>常用方式为对象字面量表示法，属性名可以是字符串或数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>JavaScript</code>数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="number">2</span>, &#123;<span class="attr">age</span>: <span class="number">20</span> &#125;]</span><br><span class="line">colors.<span class="title function_">push</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数实际上是对象，每个函数都是 <code>Function</code>类型的实例，而 <code>Function </code>也有属性和方法，跟其他引用类型一样</p>
<p>函数存在三种常见的表达方式：</p>
<ul>
<li>函数声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数</li>
</ul>
<p>函数声明和函数表达式两种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="其他引用类型"><a href="#其他引用类型" class="headerlink" title="其他引用类型"></a>其他引用类型</h3><p>除了上述说的三种之外，还包括<code>Date</code>、<code>RegExp</code>、<code>Map</code>、<code>Set</code>等……</p>
<h2 id="三、存储区别"><a href="#三、存储区别" class="headerlink" title="三、存储区别"></a>三、存储区别</h2><p>基本数据类型和引用数据类型存储在内存中的位置不同：</p>
<ul>
<li><p>基本数据类型存储在栈中</p>
</li>
<li><p>引用类型的对象存储于堆中</p>
</li>
</ul>
<p>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值</p>
<p>下面来举个例子</p>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// 赋值操作</span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10值</span></span><br></pre></td></tr></table></figure>

<p><code>a</code>的值为一个基本类型，是存储在栈中，将<code>a</code>的值赋给<code>b</code>，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址</p>
<p>下图演示了基本类型赋值的过程：</p>
<p> <img src="https://static.vue-js.com/906ffb90-6463-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;Xxx&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// xxx</span></span><br></pre></td></tr></table></figure>

<p>引用类型数据存放在堆中，每个堆内存对象都有对应的引用地址指向它，引用地址存放在栈中。</p>
<p><code>obj1</code>是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了<code>obj2</code>，实际上他们共同指向了同一个堆内存对象，所以更改<code>obj2</code>会对<code>obj1</code>产生影响</p>
<p>下图演示这个引用类型赋值过程</p>
<p> <img src="https://static.vue-js.com/a34bdd10-6463-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>声明变量时不同的内存地址分配：<ul>
<li>简单类型的值存放在栈中，在栈中存放的是对应的值</li>
<li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li>
</ul>
</li>
<li>不同的类型数据导致赋值变量时的不同：<ul>
<li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li>
<li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的事件模型</title>
    <url>/JavaScript/JavaScript-event-Model/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/32a182f0-74cf-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、事件与事件流"><a href="#一、事件与事件流" class="headerlink" title="一、事件与事件流"></a>一、事件与事件流</h2><p><code>javascript</code>中的事件，可以理解就是在<code>HTML</code>文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等</p>
<p>由于<code>DOM</code>是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念</p>
<p>事件流都会经历三个阶段：</p>
<ul>
<li>事件捕获阶段(capture phase)</li>
<li>处于目标阶段(target phase)</li>
<li>事件冒泡阶段(bubbling phase)</li>
</ul>
<p> <img src="https://static.vue-js.com/3e9a6450-74cf-11eb-85f6-6fac77c0c9b3.png"></p>
<p>事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是<code>DOM</code>中最高层的父节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，我们给<code>button</code>和它的父元素，加入点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;clickMe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1.Button&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2.body&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3.document&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4.window&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>点击按钮，输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>button</span><br><span class="line"><span class="number">2.</span>body</span><br><span class="line"><span class="number">3.</span><span class="variable language_">document</span></span><br><span class="line"><span class="number">4.</span><span class="variable language_">window</span></span><br></pre></td></tr></table></figure>

<p>点击事件首先在<code>button</code>元素上发生，然后逐级向上传播</p>
<p>事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件</p>
<h2 id="二、事件模型"><a href="#二、事件模型" class="headerlink" title="二、事件模型"></a>二、事件模型</h2><p>事件模型可以分为三种：</p>
<ul>
<li>原始事件模型（DOM0级）</li>
<li>标准事件模型（DOM2级）</li>
<li>IE事件模型（基本不用）</li>
</ul>
<h3 id="原始事件模型"><a href="#原始事件模型" class="headerlink" title="原始事件模型"></a>原始事件模型</h3><p>事件绑定监听函数比较简单, 有两种方式：</p>
<ul>
<li>HTML代码中直接绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;fun()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>JS</code>代码绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = fun;</span><br></pre></td></tr></table></figure>

<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>绑定速度快</li>
</ul>
<p><code>DOM0</code>级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</p>
<ul>
<li><p>只支持冒泡，不支持捕获</p>
</li>
<li><p>同一个类型的事件只能绑定一次</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;fun1()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = fun2;</span><br></pre></td></tr></table></figure>

<p>如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个<code>btn</code>元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件</p>
<p>删除 <code>DOM0</code> 级事件处理程序只要将对应事件属性置为<code>null</code>即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>





<h3 id="标准事件模型"><a href="#标准事件模型" class="headerlink" title="标准事件模型"></a>标准事件模型</h3><p>在该事件模型中，一次事件共有三个过程:</p>
<ul>
<li>事件捕获阶段：事件从<code>document</code>一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数</li>
<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
</ul>
<p>事件绑定监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure>

<p>事件移除监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">removeEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure>

<p>参数如下：</p>
<ul>
<li><code>eventType</code>指定事件类型(不要加on)</li>
<li><code>handler</code>是事件处理函数</li>
<li><code>useCapture</code>是一个<code>boolean</code>用于指定是否在捕获阶段进行处理，一般设置为<code>false</code>与IE浏览器保持一致</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(‘click’, showMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ul>
<li>可以在一个<code>DOM</code>元素上绑定多个事件处理器，各自并不会冲突</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage1, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage2, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(‘click’, showMessage3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>执行时机</li>
</ul>
<p>当第三个参数(<code>useCapture</code>)设置为<code>true</code>就在捕获过程中执行，反之在冒泡过程中执行处理函数</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;div&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;p&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;span&#x27;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;/p &gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>设置点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClickFn</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tagName = event.<span class="property">currentTarget</span>.<span class="property">tagName</span>;</span><br><span class="line">    <span class="keyword">var</span> phase = event.<span class="property">eventPhase</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tagName, phase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上述使用了<code>eventPhase</code>，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段</p>
<p>点击<code>Click Me!</code>，输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">P <span class="number">3</span></span><br><span class="line"><span class="variable constant_">DIV</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>可以看到，<code>p</code>和<code>div</code>都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的<code>p</code>率先做出响应</p>
<p>如果把第三个参数都改为<code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br><span class="line">p.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DIV</span> <span class="number">1</span></span><br><span class="line">P <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>两者都是在捕获阶段响应事件，所以<code>div</code>比<code>p</code>标签先做出响应</p>
<h3 id="IE事件模型"><a href="#IE事件模型" class="headerlink" title="IE事件模型"></a>IE事件模型</h3><p>IE事件模型共有两个过程:</p>
<ul>
<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。</li>
<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
</ul>
<p>事件绑定监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attachEvent(eventType, handler)</span><br></pre></td></tr></table></figure>

<p>事件移除监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">detachEvent(eventType, handler)</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(‘onclick’, showMessage);</span><br><span class="line">btn.<span class="title function_">detachEvent</span>(‘onclick’, showMessage);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript中如何实现函数缓存？函数缓存有哪些应用场景？</title>
    <url>/JavaScript/JavaScript-function-cache/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/2ae9dda0-85fa-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>函数缓存，就是将函数运算过的结果进行缓存</p>
<p>本质上就是用空间（缓存存储）换时间（计算过程）</p>
<p>常用于缓存数据计算结果和缓存对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a,b</span>) =&gt; a+b;</span><br><span class="line"><span class="keyword">const</span> calc = <span class="title function_">memoize</span>(add); <span class="comment">// 函数缓存</span></span><br><span class="line"><span class="title function_">calc</span>(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">// 30</span></span><br><span class="line"><span class="title function_">calc</span>(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">// 30 缓存</span></span><br></pre></td></tr></table></figure>

<p>缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><p>实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下：</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包可以理解成，函数 + 函数体内可访问的变量总和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> sum = b + a</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">add</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p><code>add </code>函数本身，以及其内部可访问的变量，即 <code>a = 1 </code>，这两个组合在⼀起就形成了闭包</p>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>把接受多个参数的函数转换成接受一个单一参数的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">x,y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">3</span>,<span class="number">4</span>) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add2 = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="comment">//**返回函数**</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add2</span>(<span class="number">3</span>)(<span class="number">4</span>) <span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<p>将一个二元函数拆分成两个一元函数</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>通过接收其他函数作为参数或返回其他函数的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">baz</span>();<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>函数 <code>foo</code> 如何返回另一个函数 <code>bar</code>，<code>baz</code> 现在持有对 <code>foo</code> 中定义的<code>bar</code> 函数的引用。由于闭包特性，<code>a</code>的值能够得到</p>
<p>下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果</p>
<p>如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoize = <span class="keyword">function</span> (<span class="params">func, content</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  content = content || <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">      cache[key] = func.<span class="title function_">apply</span>(content, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方式也很简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = <span class="title function_">memoize</span>(add);</span><br><span class="line"><span class="keyword">const</span> num1 = <span class="title function_">calc</span>(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="title function_">calc</span>(<span class="number">100</span>,<span class="number">200</span>) <span class="comment">// 缓存得到的结果</span></span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>在当前函数作用域定义了一个空对象，用于缓存运行结果</li>
<li>运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到<code>cache</code></li>
<li>然后判断输入参数是不是在<code>cache</code>的中。如果已经存在，直接返回<code>cache</code>的内容，如果没有存在，使用函数<code>func</code>对输入参数求值，然后把结果存储在<code>cache</code>中</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存</p>
<p>以下几种情况下，适合使用缓存：</p>
<ul>
<li>对于昂贵的函数调用，执行复杂计算的函数</li>
<li>对于具有有限且高度重复输入范围的函数</li>
<li>对于具有重复输入值的递归函数</li>
<li>对于纯函数，即每次使用特定输入调用时返回相同输出的函数</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/112505577">https://zhuanlan.zhihu.com/p/112505577</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是防抖和节流？有什么区别？如何实现？</title>
    <url>/JavaScript/JavaScript-debounce-throttle/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/912f1a10-8787-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>本质上是优化高频率执行代码的一种手段</p>
<p>如：浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能</p>
<p>为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用 <strong>防抖（debounce）</strong> 和 <strong>节流（throttle）</strong> 的方式来减少调用频率</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li>
<li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li>
</ul>
<p>一个经典的比喻:</p>
<p>想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应</p>
<p>假设电梯有两种运行策略 <code>debounce</code> 和 <code>throttle</code>，超时设定为15秒，不考虑容量限制</p>
<p>电梯第一个人进来后，15秒后准时运送一次，这是节流</p>
<p>电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>完成节流可以使用时间戳与定时器的写法</p>
<p>使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled1</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldtime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> newtime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        <span class="keyword">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="literal">null</span>, args)</span><br><span class="line">            oldtime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用定时器写法，<code>delay</code>毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> starttime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="keyword">let</span> remaining = delay - (curTime - starttime)  <span class="comment">// 从上一次到现在，还剩下多少多余时间</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            starttime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(fn, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>简单版本的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// timeout 不为null</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timeout; <span class="comment">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>相同点：</p>
<ul>
<li>都可以通过使用 <code>setTimeout</code> 实现</li>
<li>目的都是，降低回调执行频率。节省计算资源</li>
</ul>
<p>不同点：</p>
<ul>
<li>函数防抖，在一段连续操作结束后，处理回调，利用<code>clearTimeout </code>和 <code>setTimeout</code>实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能</li>
<li>函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次</li>
</ul>
<p>例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次</p>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/a2c81b50-8787-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>防抖在连续的事件，只需触发一次回调的场景有：</p>
<ul>
<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>
<li>手机号、邮箱验证输入检测</li>
<li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>
</ul>
<p>节流在间隔一段时间执行一次回调的场景有：</p>
<ul>
<li>滚动加载，加载更多或滚到底部监听</li>
<li>搜索框，搜索联想功能</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是事件代理？应用场景？</title>
    <url>/JavaScript/JavaScript-event-agent/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/a33f0ab0-797e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>事件代理，俗地来讲，就是把一个元素响应事件（<code>click</code>、<code>keydown</code>……）的函数委托到另一个元素</p>
<p>前面讲到，事件流的都会经过三个阶段： 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段，而事件委托就是在冒泡阶段完成</p>
<p>事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素</p>
<p>当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数</p>
<p>下面举个例子：</p>
<p>比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取</p>
<p>较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学</p>
<p>在这里，取快递就是一个事件，每个同学指的是需要响应事件的 <code>DOM </code>元素，而出去统一领取快递的宿舍长就是代理的元素</p>
<p>所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个</p>
<h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><p>如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  ......</span><br><span class="line">  &lt;li&gt;item n&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取目标元素</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="comment">// 循环遍历绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候就可以事件委托，把点击事件绑定在父级元素<code>ul</code>上面，然后执行事件的时候再去匹配目标元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给父层元素绑定事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">var</span> target = event.<span class="property">target</span> || event.<span class="property">srcElement</span>;</span><br><span class="line">    <span class="comment">// 判断是否匹配目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="property">toLocaleLowerCase</span> === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the content is: &#x27;</span>, target.<span class="property">innerHTML</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件</p>
<p>但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件</p>
<p>如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的</p>
<p>举个例子：</p>
<p>下面<code>html</code>结构中，点击<code>input</code>可以动态添加元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用事件委托</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> oUl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件委托，添加的子元素也有事件</span></span><br><span class="line">oUl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">    ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">const</span> target = ev.<span class="property">target</span> || ev.<span class="property">srcElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the content is: &#x27;</span>, target.<span class="property">innerHTML</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加新节点</span></span><br><span class="line">oBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">const</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    oLi.<span class="property">innerHTML</span> = <span class="string">`item <span class="subst">$&#123;num&#125;</span>`</span>;</span><br><span class="line">    oUl.<span class="title function_">appendChild</span>(oLi);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>适合事件委托的事件有：<code>click</code>，<code>mousedown</code>，<code>mouseup</code>，<code>keydown</code>，<code>keyup</code>，<code>keypress</code></p>
<p>从上面应用场景中，我们就可以看到使用事件委托存在两大优点：</p>
<ul>
<li>减少整个页面所需的内存，提升整体性能</li>
<li>动态绑定，减少重复工作</li>
</ul>
<p>但是使用事件委托也是存在局限性：</p>
<ul>
<li><p><code>focus</code>、<code>blur </code>这些事件没有事件冒泡机制，所以无法进行委托绑定事件</p>
</li>
<li><p><code>mousemove</code>、<code>mouseout </code>这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的</p>
</li>
</ul>
<p>如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对事件循环的理解</title>
    <url>/JavaScript/JavaScript-event-loop/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/50f062d0-7cb8-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>首先，<code>JavaScript </code>是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p>
<p>在<code>JavaScript</code>中，所有的任务都可以分为</p>
<ul>
<li><p>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</p>
</li>
<li><p>异步任务：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout </code>定时函数等</p>
</li>
</ul>
<p>同步任务与异步任务的运行流程图如下：</p>
<p> <img src="https://static.vue-js.com/61efbc20-7cb8-11eb-85f6-6fac77c0c9b3.png"></p>
<p>从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环</p>
<h2 id="二、宏任务与微任务"><a href="#二、宏任务与微任务" class="headerlink" title="二、宏任务与微任务"></a>二、宏任务与微任务</h2><p>如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>如果按照上面流程图来分析代码，我们会得到下面的执行步骤：</p>
<ul>
<li><code>console.log(1) </code>，同步任务，主线程中执行</li>
<li><code>setTimeout()</code> ，异步任务，放到 <code>Event Table</code>，0 毫秒后<code>console.log(2) </code>回调推入 <code>Event Queue</code> 中</li>
<li><code>new Promise</code> ，同步任务，主线程直接执行</li>
<li><code>.then</code> ，异步任务，放到 <code>Event Table</code></li>
<li><code>console.log(3)</code>，同步任务，主线程执行</li>
</ul>
<p>所以按照分析，它的结果应该是 <code>1</code> &#x3D;&gt; <code>&#39;new Promise&#39;</code> &#x3D;&gt; <code>3</code> &#x3D;&gt; <code>2</code> &#x3D;&gt; <code>&#39;then&#39;</code></p>
<p>但是实际结果是：<code>1</code>&#x3D;&gt;<code>&#39;new Promise&#39;</code>&#x3D;&gt; <code>3</code> &#x3D;&gt; <code>&#39;then&#39;</code> &#x3D;&gt; <code>2</code></p>
<p>出现分歧的原因在于异步任务执行顺序，事件队列其实是一个”先进先出”的数据结构，排在前面的事件会优先被主线程读取</p>
<p>例子中 <code>setTimeout</code>回调事件是先进入队列中的，按理说应该先于 <code>.then</code> 中的执行，但是结果却偏偏相反</p>
<p>原因在于异步任务还可以细分为微任务与宏任务</p>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p>
<p>常见的微任务有：</p>
<ul>
<li><p>Promise.then</p>
</li>
<li><p>MutaionObserver</p>
</li>
<li><p>Object.observe（已废弃；Proxy 对象替代）</p>
</li>
<li><p>process.nextTick（Node.js）</p>
</li>
</ul>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p>
<p>常见的宏任务有：</p>
<ul>
<li>script (可以理解为外层同步代码) </li>
<li>setTimeout&#x2F;setInterval </li>
<li>UI rendering&#x2F;UI事件 </li>
<li>postMessage、MessageChannel </li>
<li>setImmediate、I&#x2F;O（Node.js）</li>
</ul>
<p>这时候，事件循环，宏任务，微任务的关系如图所示</p>
<p> <img src="https://static.vue-js.com/6e80e5e0-7cb8-11eb-85f6-6fac77c0c9b3.png"></p>
<p>按照这个流程，它的执行机制是：</p>
<ul>
<li>执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中</li>
<li>当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完</li>
</ul>
<p>回到上面的题目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>流程如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遇到 console.log(1) ，直接打印 1</span></span><br><span class="line"><span class="comment">// 遇到定时器，属于新的宏任务，留着后面执行</span></span><br><span class="line"><span class="comment">// 遇到 new Promise，这个是直接执行的，打印 &#x27;new Promise&#x27;</span></span><br><span class="line"><span class="comment">// .then 属于微任务，放入微任务队列，后面再执行</span></span><br><span class="line"><span class="comment">// 遇到 console.log(3) 直接打印 3</span></span><br><span class="line"><span class="comment">// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 &#x27;then&#x27;</span></span><br><span class="line"><span class="comment">// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2</span></span><br></pre></td></tr></table></figure>



<h2 id="三、async与await"><a href="#三、async与await" class="headerlink" title="三、async与await"></a>三、async与await</h2><p><code>async</code> 是异步的意思，<code>await </code>则可以理解为 <code>async wait</code>。所以可以理解<code>async</code>就是用来声明一个异步方法，而 <code>await </code>是用来等待异步方法执行</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code>函数返回一个<code>promise</code>对象，下面两种方法是等效的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;TEST&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncF is equivalent to f!</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncF</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;TEST&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise </code>对象，返回该对象的结果。如果不是 <code>Promise </code>对象，就直接返回对应的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="comment">// return 123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<p>不管<code>await</code>后面跟着的是什么，<code>await</code>都会阻塞后面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fn2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>) <span class="comment">// 阻塞</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn2</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>上面的例子中，<code>await</code> 会阻塞下面的代码（即加入微任务队列），先执行 <code>async </code>外面的同步代码，同步代码执行完，再回到 <code>async</code> 函数中，再执行之前阻塞的代码</p>
<p>所以上述输出结果为：<code>1</code>，<code>fn2</code>，<code>3</code>，<code>2</code></p>
<h2 id="四、流程分析"><a href="#四、流程分析" class="headerlink" title="四、流程分析"></a>四、流程分析</h2><p>通过对上面的了解，我们对<code>JavaScript</code>对各种场景的执行顺序有了大致的了解</p>
<p>这里直接上代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>分析过程：</p>
<ol>
<li>执行整段代码，遇到 <code>console.log(&#39;script start&#39;)</code> 直接打印结果，输出 <code>script start</code></li>
<li>遇到定时器了，它是宏任务，先放着不执行</li>
<li>遇到 <code>async1()</code>，执行 <code>async1</code> 函数，先打印 <code>async1 start</code>，下面遇到<code>await</code>怎么办？先执行 <code>async2</code>，打印 <code>async2</code>，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码</li>
<li>跳到 <code>new Promise</code> 这里，直接执行，打印 <code>promise1</code>，下面遇到 <code>.then()</code>，它是微任务，放到微任务列表等待执行</li>
<li>最后一行直接打印 <code>script end</code>，现在同步代码执行完了，开始执行微任务，即 <code>await </code>下面的代码，打印 <code>async1 end</code></li>
<li>继续执行下一个微任务，即执行 <code>then</code> 的回调，打印 <code>promise2</code></li>
<li>上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 <code>settimeout</code></li>
</ol>
<p>所以最后的结果是：<code>script start</code>、<code>async1 start</code>、<code>async2</code>、<code>promise1</code>、<code>script end</code>、<code>async1 end</code>、<code>promise2</code>、<code>settimeout</code></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对函数式编程的理解？优缺点？</title>
    <url>/JavaScript/JavaScript-functional-programming/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/ec0f6e80-8534-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>函数式编程是一种”编程范式”（programming paradigm），一种编写程序的方法论</p>
<p>主要的编程范式有三种：命令式编程，声明式编程和函数式编程</p>
<p>相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程</p>
<p>举个例子，将数组每个元素进行平方操作，命令式编程与函数式编程如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令式编程</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    array[i] = <span class="title class_">Math</span>.<span class="title function_">pow</span>(array[i], <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式方式</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">pow</span>(num, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>简单来讲，就是要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果</p>
<p>即是一种描述集合和集合之间的转换关系，输入通过函数都会返回有且只有一个输出值</p>
<p> <img src="https://static.vue-js.com/f9f83900-8534-11eb-85f6-6fac77c0c9b3.png"></p>
<p>可以看到，函数实际上是一个关系，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合</p>
<h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><p>函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数，也就是纯函数</p>
<p>纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数&#x3D;无状态+数据不可变</p>
<p> <img src="https://static.vue-js.com/04f50720-8535-11eb-ab90-d9ae814b240d.png"></p>
<p>举一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = value=&gt;value*<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>特性：</p>
<ul>
<li>函数内部传入指定的值，就会返回确定唯一的值</li>
<li>不会造成超出作用域的变化，例如修改全局变量或引用传递的参数</li>
</ul>
<p>优势：</p>
<ul>
<li>使用纯函数，我们可以产生可测试的代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;double(2) 等于 4&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">double</span>(<span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不依赖外部环境计算，不会产生副作用，提高函数的复用性</p>
</li>
<li><p>可读性更强 ，函数不管是否是纯函数  都会有一个语义化的名称，更便于阅读</p>
</li>
<li><p>可以组装成复杂任务的可能性。符合模块化概念及单一职责原则</p>
</li>
</ul>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>在我们的编程世界中，我们需要处理的其实也只有”数据”和”关系”，而关系就是函数</p>
<p>编程工作也就是在找一种映射关系，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据，如下图所示</p>
<p> <img src="https://static.vue-js.com/104af1c0-8535-11eb-ab90-d9ae814b240d.png"></p>
<p>在这里，就是高阶函数的作用。高级函数，就是以函数作为输入或者输出的函数被称为高阶函数</p>
<p>通过高阶函数抽象过程，注重结果，如下面例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> forEach = <span class="keyword">function</span>(<span class="params">arr,fn</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="title function_">fn</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title function_">forEach</span>(arr,<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面通过高阶函数 <code>forEach</code>来抽象循环如何做的逻辑，直接关注做了什么</p>
<p>高阶函数存在缓存的特性，主要是利用闭包作用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">once</span> = (<span class="params">fn</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,fn);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;该函数已经执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程</p>
<p>一个二元函数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">x,y</span>)=&gt;x+y;</span><br></pre></td></tr></table></figure>

<p>转化成柯里化函数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fn</span>(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myfn = <span class="title function_">curry</span>(fn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">myfn</span>(<span class="number">1</span>)(<span class="number">2</span>) );</span><br></pre></td></tr></table></figure>

<p>上面的<code>curry</code>函数只能处理二元情况，下面再来实现一个实现多参数的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多参数柯里化；</span></span><br><span class="line"><span class="keyword">const</span> curry = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curriedFn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.<span class="property">length</span>&lt;fn.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">curriedFn</span>(...args.<span class="title function_">concat</span>([...<span class="variable language_">arguments</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x,y,z,a</span>)=&gt;x+y+z+a;</span><br><span class="line"><span class="keyword">const</span> myfn = <span class="title function_">curry</span>(fn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myfn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>关于柯里化函数的意义如下：</p>
<ul>
<li>让纯函数更纯，每次接受一个参数，松散解耦</li>
<li>惰性执行</li>
</ul>
<h3 id="组合与管道"><a href="#组合与管道" class="headerlink" title="组合与管道"></a>组合与管道</h3><p>组合函数，目的是将多个函数组合成一个函数</p>
<p>举个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">afn</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bfn</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b*<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">a,b</span>)=&gt;<span class="function"><span class="params">c</span>=&gt;</span><span class="title function_">a</span>(<span class="title function_">b</span>(c));</span><br><span class="line"><span class="keyword">let</span> myfn =  <span class="title function_">compose</span>(afn,bfn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">myfn</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>可以看到<code>compose</code>实现一个简单的功能：形成了一个新的函数，而这个函数就是一条从 <code>bfn -&gt; afn</code> 的流水线</p>
<p>下面再来看看如何实现一个多函数组合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">...fns</span>)=&gt;<span class="function"><span class="params">val</span>=&gt;</span>fns.<span class="title function_">reverse</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,fn</span>)=&gt;</span><span class="title function_">fn</span>(acc),val);</span><br></pre></td></tr></table></figure>

<p><code>compose</code>执行是从右到左的。而管道函数，执行顺序是从左到右执行的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...fns</span>)=&gt;<span class="function"><span class="params">val</span>=&gt;</span>fns.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,fn</span>)=&gt;</span><span class="title function_">fn</span>(acc),val);</span><br></pre></td></tr></table></figure>

<p>组合函数与管道函数的意义在于：可以把很多小函数组合起来完成更复杂的逻辑</p>
<h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><p>更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况</p>
</li>
<li><p>更简单的复用：固定输入-&gt;固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响</p>
</li>
<li><p>更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性</p>
</li>
<li><p>隐性好处。减少代码量，提高维护性</p>
</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li><p>性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销</p>
</li>
<li><p>资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式</p>
</li>
<li><p>递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/81302150">https://zhuanlan.zhihu.com/p/81302150</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript如何实现继承？</title>
    <url>/JavaScript/JavaScript-inherit/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/5d9c4450-72a3-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>继承（inheritance）是面向对象软件技术当中的一个概念。</p>
<p>如果一个类别B”继承自”另一个类别A，就把这个B称为”A的子类”，而把A称为”B的父类别”也可以称”A是B的超类”</p>
<ul>
<li>继承的优点</li>
</ul>
<p>继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码</p>
<p>在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能</p>
<p>虽然<code>JavaScript</code>并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富</p>
<p>关于继承，我们举个形象的例子：</p>
<p>定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color,speed</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">speed</span> = speed</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由汽车这个类可以派生出”轿车”和”货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 货车</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Truck</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color,speed</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(color,speed)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">Container</span> = <span class="literal">true</span> <span class="comment">// 货箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在”轿车”中定义汽车已经有的属性</p>
<p>在”轿车”继承”汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与”汽车”这个父类不同的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Truck</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color,speed</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(color,speed)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&quot;black&quot;</span> <span class="comment">//覆盖</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">Container</span> = <span class="literal">true</span> <span class="comment">// 货箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系</p>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>下面给出<code>JavaScripy</code>常见的继承方式：</p>
<ul>
<li><p>原型链继承</p>
</li>
<li><p>构造函数继承（借助 call）</p>
</li>
<li><p>组合继承</p>
</li>
<li><p>原型式继承</p>
</li>
<li><p>寄生式继承</p>
</li>
<li><p>寄生组合式继承</p>
</li>
</ul>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child2&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title class_">Child1</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Child</span>())</span><br></pre></td></tr></table></figure>

<p>上面代码看似没问题，实际存在潜在问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Child2</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Child2</span>();</span><br><span class="line">s1.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">play</span>, s2.<span class="property">play</span>); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<p>改变<code>s1</code>的<code>play</code>属性，会发现<code>s2</code>也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的</p>
<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>借助 <code>call </code>调用<code>Parent</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Parent1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child);  <span class="comment">// 没问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getName</span>());  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>

<p>可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法</p>
<p>相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent3</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent3&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第二次调用 Parent3()</span></span><br><span class="line">    <span class="title class_">Parent3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用 Parent3()</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent3</span>();</span><br><span class="line"><span class="comment">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child3</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line">s3.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">play</span>, s4.<span class="property">play</span>);  <span class="comment">// 不互相影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到<code> Parent3</code> 执行了两次，造成了多构造一次的性能开销</p>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>这里主要借助<code>Object.create</code>方法实现普通对象的继承</p>
<p>同样举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent4&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person4 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person4.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">  person4.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person5 = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent4);</span><br><span class="line">  person5.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span>); <span class="comment">// tom</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">name</span> === person4.<span class="title function_">getName</span>()); <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">name</span>); <span class="comment">// parent4</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person4.<span class="property">friends</span>); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="property">friends</span>); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br></pre></td></tr></table></figure>

<p>这种继承方式的缺点也很明显，因为<code>Object.create </code>方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent5 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent5&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">original</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);</span><br><span class="line">    clone.<span class="property">getFriends</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person5 = <span class="title function_">clone</span>(parent5);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getName</span>()); <span class="comment">// parent5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getFriends</span>()); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其优缺点也很明显，跟上面讲的原型式继承一样</p>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>寄生组合式继承，借助解决普通对象的继承问题的<code> Object.create</code> 方法，在前面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span> (<span class="params">parent, child</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class="line">    child.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    child.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent6</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent6&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child6</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Parent6</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friends</span> = <span class="string">&#x27;child5&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clone</span>(<span class="title class_">Parent6</span>, <span class="title class_">Child6</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFriends</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person6 = <span class="keyword">new</span> <span class="title class_">Child6</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6); <span class="comment">//&#123;friends:&quot;child5&quot;,name:&quot;child5&quot;,play:[1,2,3],__proto__:Parent6&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getName</span>()); <span class="comment">// parent6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getFriends</span>()); <span class="comment">// child5</span></span><br></pre></td></tr></table></figure>

<p>可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题</p>
<p>文章一开头，我们是使用<code>ES6</code> 中的<code>extends </code>关键字直接实现 <code>JavaScript </code>的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="comment">// 即 Person.prototype.getName = function() &#123; &#125;</span></span><br><span class="line">  <span class="comment">// 下面可以简写为 getName() &#123;...&#125;</span></span><br><span class="line">  getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gamer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 子类中存在构造函数，则需要在使用&quot;this&quot;之前首先调用 super()。</span></span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> asuna = <span class="keyword">new</span> <span class="title class_">Gamer</span>(<span class="string">&#x27;Asuna&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">asuna.<span class="title function_">getName</span>() <span class="comment">// 成功访问到父类的方法</span></span><br></pre></td></tr></table></figure>

<p>利用<code>babel</code>工具进行转换，我们会发现<code>extends</code>实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>下面以一张图作为总结：</p>
<p> <img src="https://static.vue-js.com/0df74700-731c-11eb-ab90-d9ae814b240d.png"></p>
<p>通过<code>Object.create</code> 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 <code>extends</code> 的语法糖和寄生组合继承的方式基本类似</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF">https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 引擎的理解</title>
    <url>/JavaScript/JavaScript-js-engine/</url>
    <content><![CDATA[<h2 id="一、什么是-JavaScript-引擎"><a href="#一、什么是-JavaScript-引擎" class="headerlink" title="一、什么是 JavaScript 引擎"></a>一、什么是 JavaScript 引擎</h2><p>JavaScript 引擎是一个专门处理 JavaScript 代码的程序。它负责解析和执行 JavaScript 代码，将我们编写的 JavaScript 代码转换为机器能够理解和执行的机器码。</p>
<p>目前主流的 JavaScript 引擎有：</p>
<ul>
<li>V8（Google）：用于 Chrome 浏览器和 Node.js</li>
<li>SpiderMonkey（Mozilla）：用于 Firefox 浏览器</li>
<li>JavaScriptCore（Apple）：用于 Safari 浏览器</li>
<li>Chakra（Microsoft）：用于 IE 和 Edge 浏览器（旧版）</li>
</ul>
<h2 id="二、主要组成部分"><a href="#二、主要组成部分" class="headerlink" title="二、主要组成部分"></a>二、主要组成部分</h2><h3 id="1-Memory-Heap（内存堆）"><a href="#1-Memory-Heap（内存堆）" class="headerlink" title="1. Memory Heap（内存堆）"></a>1. Memory Heap（内存堆）</h3><ul>
<li>用于存储对象、数组等引用类型数据</li>
<li>进行动态内存分配</li>
<li>包含垃圾回收机制（分代回收、标记清除、引用计数等）</li>
<li>处理内存碎片化问题</li>
</ul>
<h3 id="2-Call-Stack（调用栈）"><a href="#2-Call-Stack（调用栈）" class="headerlink" title="2. Call Stack（调用栈）"></a>2. Call Stack（调用栈）</h3><ul>
<li>记录代码执行的上下文</li>
<li>基于 LIFO（后进先出）原则</li>
<li>包含以下信息：<ul>
<li>局部变量</li>
<li>参数</li>
<li>返回地址</li>
<li>临时变量</li>
</ul>
</li>
</ul>
<h3 id="3-Parser（解析器）"><a href="#3-Parser（解析器）" class="headerlink" title="3. Parser（解析器）"></a>3. Parser（解析器）</h3><p>解析过程分为两个阶段：</p>
<ol>
<li><p>词法分析（Tokenization）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源代码：let name = &quot;John&quot;;</span></span><br><span class="line"><span class="comment">// 被解析为 tokens：</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;keyword&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;let&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;identifier&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;name&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;operator&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;=&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;John&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;punctuator&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;;&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法分析（生成 AST）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AST 结构示例</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;Program&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;VariableDeclaration&quot;</span>,</span><br><span class="line">    <span class="attr">declarations</span>: [&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;VariableDeclarator&quot;</span>,</span><br><span class="line">      <span class="attr">id</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;name&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">init</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Literal&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-Interpreter（解释器）"><a href="#4-Interpreter（解释器）" class="headerlink" title="4. Interpreter（解释器）"></a>4. Interpreter（解释器）</h3><ul>
<li>直接执行字节码</li>
<li>维护执行上下文</li>
<li>处理作用域链</li>
<li>实现变量提升</li>
<li>管理闭包</li>
</ul>
<h3 id="5-Compiler（编译器）"><a href="#5-Compiler（编译器）" class="headerlink" title="5. Compiler（编译器）"></a>5. Compiler（编译器）</h3><p>包含多个优化阶段：</p>
<ol>
<li><p>JIT（即时编译）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 热点函数会被编译优化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hotFunction</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 被多次调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">hotFunction</span>(i); <span class="comment">// 这个函数会被 JIT 编译</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内联缓存（Inline Caching）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V8 优化后的伪代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 检查对象结构是否匹配缓存</span></span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">map</span> === cachedMap) &#123;</span><br><span class="line">    <span class="comment">// 直接返回固定偏移量的属性</span></span><br><span class="line">    <span class="keyword">return</span> *（obj + nameOffset）;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 回退到常规属性访问</span></span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="三、工作流程"><a href="#三、工作流程" class="headerlink" title="三、工作流程"></a>三、工作流程</h2><h3 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1. 加载阶段"></a>1. 加载阶段</h3><ol>
<li>源码加载</li>
<li>词法分析</li>
<li>语法分析</li>
<li>生成 AST</li>
<li>生成字节码</li>
</ol>
<h3 id="2-执行阶段"><a href="#2-执行阶段" class="headerlink" title="2. 执行阶段"></a>2. 执行阶段</h3><ol>
<li><p>创建执行上下文</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ExecutionContext</span> = &#123;</span><br><span class="line">  <span class="title class_">ThisBinding</span>: &lt;this value&gt;,</span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 标识符绑定</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;outer lexical environment reference&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  VariableEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 变量和函数声明</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;outer lexical environment reference&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域链建立</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作用域链：inner -&gt; outer -&gt; global</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变量对象创建</p>
</li>
<li><p>代码执行</p>
</li>
</ol>
<h3 id="3-优化阶段"><a href="#3-优化阶段" class="headerlink" title="3. 优化阶段"></a>3. 优化阶段</h3><ol>
<li><p>死代码消除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unused</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> a; <span class="comment">// b 永远不会被使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unused</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内联展开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">1</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四、性能优化"><a href="#四、性能优化" class="headerlink" title="四、性能优化"></a>四、性能优化</h2><h3 id="1-代码层面"><a href="#1-代码层面" class="headerlink" title="1. 代码层面"></a>1. 代码层面</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 对象属性访问优化</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">badAccess</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// 每次都要查找属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goodAccess</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = obj; <span class="comment">// 解构一次</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数优化</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">const</span> addBad = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addGood</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 数组优化</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">const</span> arrBad = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrBad.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  arrBad[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">const</span> arrGood = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">1000</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br></pre></td></tr></table></figure>

<h3 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2. 内存管理"></a>2. 内存管理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. WeakMap 使用</span></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">memorize</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cache.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">      cache.<span class="title function_">set</span>(obj, <span class="title function_">fn</span>(obj));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 避免内存泄漏</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addListener</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">set</span>(event, <span class="keyword">new</span> <span class="title class_">Set</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">get</span>(event).<span class="title function_">add</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">removeListener</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">get</span>(event).<span class="title function_">delete</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><h3 id="1-内存泄漏"><a href="#1-内存泄漏" class="headerlink" title="1. 内存泄漏"></a>1. 内存泄漏</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 闭包导致的内存泄漏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLeak</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> largeData = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(largeData.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定时器未清除</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123; <span class="comment">/* 大量数据 */</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 记得清除</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-执行效率"><a href="#2-执行效率" class="headerlink" title="2. 执行效率"></a>2. 执行效率</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 避免动态属性访问</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;dynamicKey&#x27;</span>;</span><br><span class="line">obj[key] = value; <span class="comment">// 会禁用某些优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用位运算</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(num / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">num &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 避免混合类型</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">42</span>;</span><br><span class="line">number = <span class="string">&#x27;string&#x27;</span>; <span class="comment">// 会导致类型转换，降低性能</span></span><br></pre></td></tr></table></figure>

<h2 id="六、高级优化技巧"><a href="#六、高级优化技巧" class="headerlink" title="六、高级优化技巧"></a>六、高级优化技巧</h2><h3 id="1-Hidden-Class"><a href="#1-Hidden-Class" class="headerlink" title="1. Hidden Class"></a>1. Hidden Class</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">positive</span> = <span class="literal">true</span>; <span class="comment">// 动态添加属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">positive</span> = x &gt; <span class="number">0</span>; <span class="comment">// 固定属性结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-函数优化"><a href="#2-函数优化" class="headerlink" title="2. 函数优化"></a>2. 函数优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 单态函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 只处理数字类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> b === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid arguments&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 内联优化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b; <span class="comment">// 简单函数更容易被内联</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://v8.dev/docs">V8 官方文档</a></li>
<li><a href="https://mathiasbynens.be/notes/shapes-ics">JavaScript 引擎基础：原理与优化</a></li>
<li><a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e">深入理解 V8 引擎</a></li>
<li><a href="https://github.com/v8/v8/wiki/Design-Elements">V8 性能优化</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">JavaScript 内存管理</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>了解的js数据结构？</title>
    <url>/JavaScript/JavaScript-js-data-structure/</url>
    <content><![CDATA[<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是计算机存储、组织数据的方式。<br>数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>
<p>我们每天的编码中都会用到数据结构<br>数组是最简单的内存数据结构<br>下面是常见的数据结构：</p>
<ol>
<li>数组（Array）</li>
<li>栈（Stack）</li>
<li>队列（Queue）</li>
<li>链表（Linked List）</li>
<li>字典</li>
<li>散列表（Hash table）</li>
<li>树（Tree）</li>
<li>图（Graph）</li>
<li>堆（Heap）</li>
</ol>
<h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>数组是最最基本的数据结构，很多语言都内置支持数组。<br>数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。</p>
<p>在日常生活中，人们经常使用列表：待办事项列表、购物清单等。</p>
<p>而计算机程序也在使用列表，在下面的条件下，选择列表作为数据结构就显得尤为有用：<br>数据结构较为简单<br>不需要在一个长序列中查找元素，或者对其进行排序<br>反之，如果数据结构非常复杂，列表的作用就没有那么大了。</p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>栈是一种遵循后进先出（LIFO）原则的有序集合<br>在栈里，新元素都接近栈顶，旧元素都接近栈底。<br>每次加入新的元素和拿走元素都在顶部操作<br><img src="https://upload-images.jianshu.io/upload_images/13253432-ddcb884374470d2c?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p>
<h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项<br>队列在尾部添加新元素，并从顶部移除元素<br>最新添加的元素必须排在队列的末尾<br><img src="https://upload-images.jianshu.io/upload_images/13253432-55ad7c7db40d3796?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p>
<h2 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h2><p>链表也是一种列表，已经设计了数组，为什么还需要链表呢？<br>JavaScript中数组的主要问题时，它们被实现成了对象，<br>与其他语言（比如C++和Java）的数组相对，效率很低。<br>如果你发现数组在实际使用时很慢，就可以考虑使用链表来代替它。</p>
<p>使用条件：<br>链表几乎可以用在任何可以使用一维数组的情况中。<br>如果需要随机访问，数组仍然是更好的选择。<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/lian.jpg"></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一种以键-值对存储数据的数据结构，js中的Object类就是以字典的形式设计的。JavaScript可以通过实现字典类，让这种字典类型的对象使用起来更加简单，字典可以实现对象拥有的常见功能，并相应拓展自己想要的功能，而对象在JavaScript编写中随处可见，所以字典的作用也异常明显了。</p>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>也称为哈希表，特点是在散列表上插入、删除和取用数据都非常快。<br>为什么要设计这种数据结构呢？<br>用数组或链表存储数据，如果想要找到其中一个数据，需要从头进行遍历，因为不知道这个数据存储到了数组的哪个位置。</p>
<p>散列表在JavaScript中可以基础数组去进行设计。<br>数组的长度是预先设定的，所有元素根据和该元素对应的键，保存在数组的特定位置，这里的键和对象的键是类型的概念。<br>使用散列表存储数组时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。</p>
<p>即使使用一个高效的散列函数，依然存在将两个键映射为同一个值得可能，这种现象叫做碰撞。常见碰撞的处理方法有：开链法和线性探测法（具体概念有兴趣的可以网上自信了解）<br>使用条件：<br>可以用于数据的插入、删除和取用，不适用于查找数据<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170820211406.png"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 Javascript 数字精度丢失的问题，如何解决？</title>
    <url>/JavaScript/JavaScript-loss-accuracy/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/09646a10-86f4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、场景复现"><a href="#一、场景复现" class="headerlink" title="一、场景复现"></a>一、场景复现</h2><p>一个经典的面试题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>为什么是<code>false</code>呢?</p>
<p>先看下面这个比喻</p>
<p>比如一个数 1÷3&#x3D;0.33333333…… </p>
<p>3会一直无限循环，数学可以表示，但是计算机要存储，方便下次取出来再使用，但0.333333…… 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，当计算机存储后再取出时就会出现精度丢失问题</p>
<h2 id="二、浮点数"><a href="#二、浮点数" class="headerlink" title="二、浮点数"></a>二、浮点数</h2><p>“浮点数”是一种表示数字的标准，整数也可以用浮点数的格式来存储</p>
<p>我们也可以理解成，浮点数就是小数</p>
<p>在<code>JavaScript</code>中，现在主流的数值类型是<code>Number</code>，而<code>Number</code>采用的是<code>IEEE754</code>规范中64位双精度浮点数编码</p>
<p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间</p>
<p>对于一个整数，可以很轻易转化成十进制或者二进制。但是对于一个浮点数来说，因为小数点的存在，小数点的位置不是固定的。解决思路就是使用科学计数法，这样小数点位置就固定了</p>
<p>而计算机只能用二进制（0或1）表示，二进制转换为科学记数法的公式如下：</p>
<p> <img src="https://static.vue-js.com/1b4b1620-86f4-11eb-ab90-d9ae814b240d.png"></p>
<p>其中，<code>a</code>的值为0或者1，e为小数点移动的位置</p>
<p>举个例子：</p>
<p>27.0转化成二进制为11011.0 ，科学计数法表示为：</p>
<p> <img src="https://static.vue-js.com/37007090-86f4-11eb-ab90-d9ae814b240d.png"></p>
<p>前面讲到，<code>javaScript</code>存储方式是双精度浮点数，其长度为8个字节，即64位比特</p>
<p>64位比特又可分为三个部分：</p>
<ul>
<li>符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数</li>
<li>指数位E：中间的 11 位存储指数（exponent），用来表示次方数，可以为正负数。在双精度浮点数中，指数的固定偏移量为1023</li>
<li>尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零</li>
</ul>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/430d0100-86f4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>举个例子：</p>
<p>27.5 转换为二进制11011.1</p>
<p>11011.1转换为科学记数法 <img src="https://www.zhihu.com/equation?tex=1.10111*2%5E4" alt="[公式]"></p>
<p>符号位为1(正数)，指数位为4+，1023+4，即1027</p>
<p>因为它是十进制的需要转换为二进制，即 <code>10000000011</code>，小数部分为<code>10111</code>，补够52位即： 1011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000&#96;</p>
<p>所以27.5存储为计算机的二进制标准形式（符号位+指数位+小数部分 (阶数)），既下面所示</p>
<p>0+10000000011+011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000&#96;</p>
<h2 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h2><p>再回到问题上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>通过上面的学习，我们知道，在<code>javascript</code>语言中，0.1 和 0.2 都转化成二进制后再进行运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0.1 和 0.2 都转化成二进制后再进行运算</span></span><br><span class="line"><span class="number">0.00011001100110011001100110011001100110011001100110011010</span> +</span><br><span class="line"><span class="number">0.0011001100110011001100110011001100110011001100110011010</span> =</span><br><span class="line"><span class="number">0.0100110011001100110011001100110011001100110011001100111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成十进制正好是 0.30000000000000004</span></span><br></pre></td></tr></table></figure>

<p>所以输出<code>false</code></p>
<p>再来一个问题，那么为什么<code>x=0.1</code>得到<code>0.1</code>？</p>
<p>主要是存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是<code>2^53=9007199254740992</code>，对应科学计数尾数是 <code>9.007199254740992</code>，这也是 JS 最多能表示的精度</p>
<p>它的长度是 16，所以可以使用 <code>toPrecision(16)</code> 来做精度运算，超过的精度会自动做凑整处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">.10000000000000000555</span>.<span class="title function_">toPrecision</span>(<span class="number">16</span>)</span><br><span class="line"><span class="comment">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></span><br></pre></td></tr></table></figure>

<p>但看到的 <code>0.1</code> 实际上并不是 <code>0.1</code>。不信你可用更高的精度试试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span>.<span class="title function_">toPrecision</span>(<span class="number">21</span>) = <span class="number">0.100000000000000005551</span></span><br></pre></td></tr></table></figure>

<p>如果整数大于 <code>9007199254740992</code> 会出现什么情况呢？</p>
<p>由于指数位最大值是1023，所以最大可以表示的整数是 <code>2^1024 - 1</code>，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 <code>2^1024</code> 开始就变成了 <code>Infinity</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Math.pow(2, 1023)</span><br><span class="line">8.98846567431158e+307</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 1024)</span><br><span class="line">Infinity</span><br></pre></td></tr></table></figure>

<p>那么对于 <code>(2^53, 2^63)</code> 之间的数会出现什么情况呢？</p>
<ul>
<li><code>(2^53, 2^54)</code> 之间的数会两个选一个，只能精确表示偶数</li>
<li><code>(2^54, 2^55)</code> 之间的数会四个选一个，只能精确表示4个倍数</li>
<li>… 依次跳过更多2的倍数</li>
</ul>
<p>要想解决大数的问题你可以引用第三方库 <code>bignumber.js</code>，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生差很多</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法</p>
<p>因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差</p>
<h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果</p>
<p>当你拿到 <code>1.4000000000000001</code> 这样的数据要展示时，建议使用 <code>toPrecision</code> 凑整并 <code>parseFloat</code> 转成数字后再显示，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parseFloat(1.4000000000000001.toPrecision(12)) === 1.4  // True</span><br></pre></td></tr></table></figure>

<p>封装成方法就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strip</span>(<span class="params">num, precision = <span class="number">12</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="built_in">parseFloat</span>(num.<span class="title function_">toPrecision</span>(precision));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于运算类操作，如 <code>+-*/</code>，就不能使用 <code>toPrecision</code> 了。正确的做法是把小数转成整数后再运算。以加法为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 精确加法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num1Digits = (num1.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> num2Digits = (num2.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> baseNum = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, <span class="title class_">Math</span>.<span class="title function_">max</span>(num1Digits, num2Digits));</span><br><span class="line">  <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还可以使用第三方库，如<code>Math.js</code>、<code>BigDecimal.js</code></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/100353781">https://zhuanlan.zhihu.com/p/100353781</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 JavaScript 中内存泄漏的几种情况？</title>
    <url>/JavaScript/JavaScript-memory-leak/</url>
    <content><![CDATA[<p>  <img src="https://static.vue-js.com/19f76b30-824d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</p>
<p>并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费</p>
<p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存</p>
<p>对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃</p>
<p> <img src="https://static.vue-js.com/56d4bd90-821c-11eb-ab90-d9ae814b240d.png"></p>
<p>在<code>C</code>语言中，因为是手动管理内存，内存泄露是经常出现的事情。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char * buffer;</span><br><span class="line">buffer = (char*) malloc(42);</span><br><span class="line"></span><br><span class="line">// Do something with buffer</span><br><span class="line"></span><br><span class="line">free(buffer);</span><br></pre></td></tr></table></figure>

<p>上面是 C 语言代码，<code>malloc</code>方法用来申请内存，使用完毕之后，必须自己用<code>free</code>方法释放内存。</p>
<p>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”</p>
<h2 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h2><p>Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存</p>
<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</p>
<p>通常情况下有两种实现方式：</p>
<ul>
<li>标记清除</li>
<li>引用计数</li>
</ul>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p><code>JavaScript</code>最常用的垃圾收回机制</p>
<p>当变量进入执行环境是，就标记这个变量为”进入环境”。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为”离开环境”</p>
<p>垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉</p>
<p>在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了</p>
<p>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">0</span>,n = <span class="number">19</span> <span class="comment">// 把 m,n,add() 标记为进入环境。</span></span><br><span class="line"><span class="title function_">add</span>(m, n) <span class="comment">// 把 a, b, c标记为进入环境。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// a,b,c标记为离开环境，等待垃圾回收。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a++</span><br><span class="line">  <span class="keyword">var</span> c = a + b</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是<code>0</code>，就表示这个值不再用到了，因此可以将这块内存释放</p>
<p>如果一个值不再需要了，引用数却不为<code>0</code>，垃圾回收机制无法释放这块内存，从而导致内存泄漏</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码中，数组<code>[1, 2, 3, 4]</code>是一个值，会占用内存。变量<code>arr</code>是仅有的对这个值的引用，因此引用次数为<code>1</code>。尽管后面的代码没有用到<code>arr</code>，它还是会持续占用内存</p>
<p>如果需要这块内存被垃圾回收机制释放，只需要设置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>通过设置<code>arr</code>为<code>null</code>，就解除了对数组<code>[1,2,3,4]</code>的引用，引用次数变为 0，就被垃圾回收了</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用</p>
<h2 id="三、常见内存泄露情况"><a href="#三、常见内存泄露情况" class="headerlink" title="三、常见内存泄露情况"></a>三、常见内存泄露情况</h2><p>意外的全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种意外的全局变量可能由 <code>this</code> 创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">variable</span> = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo 调用自己，this 指向了全局对象（window）</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p>上述使用严格模式，可以避免意外的全局变量</p>
<p>定时器也常会造成内存泄露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = <span class="title function_">getData</span>();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Node&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="comment">// 处理 node 和 someResource</span></span><br><span class="line">        node.<span class="property">innerHTML</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(someResource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>如果<code>id</code>为Node的元素从<code>DOM</code>中移除，该定时器仍会存在，同时，因为回调函数中包含对<code>someResource</code>的引用，定时器外面的<code>someResource</code>也不会被释放</p>
<p>包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> unused = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, <span class="string">&#x27;闭包内引用obj obj不会被释放&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  obj = <span class="literal">null</span>; <span class="comment">// 解决方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有清理对<code>DOM</code>元素的引用同样造成内存泄露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refA = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;refA&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(refA); <span class="comment">// dom删除了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(refA, <span class="string">&#x27;refA&#x27;</span>); <span class="comment">// 但是还存在引用能console出整个div 没有被回收</span></span><br><span class="line">refA = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(refA, <span class="string">&#x27;refA&#x27;</span>); <span class="comment">// 解除引用</span></span><br></pre></td></tr></table></figure>

<p>包括使用事件监听<code>addEventListener</code>监听的时候，在不监听的情况下使用<code>removeEventListener</code>取消对事件监听</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki">https://zh.wikipedia.org/wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>说说new操作符具体干了什么？</title>
    <url>/JavaScript/JavaScript-new/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/880d0010-7a39-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>在<code>JavaScript</code>中，<code>new</code>操作符用于创建一个给定构造函数的实例对象</p>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1)  <span class="comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">t.<span class="title function_">sayName</span>() <span class="comment">// &#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看到：</p>
<ul>
<li><code>new</code> 通过构造函数 <code>Person</code> 创建出来的实例可以访问到构造函数中的属性</li>
<li><code>new</code> 通过构造函数 <code>Person</code> 创建出来的实例可以访问到构造函数原型链中的属性（即实例与构造函数通过原型链连接了起来）</li>
</ul>
<p>现在在构建函数中显式加上返回值，并且这个返回值是一个原始类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">name</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以发现，构造函数中返回一个原始值，然而这个返回值并没有作用</p>
<p>下面在构造函数中返回一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// Test &#123; name: &#x27;xxx&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t) <span class="comment">// &#123; age: 26 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">name</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面可以发现，构造函数如果返回值为一个对象，那么这个返回值会被正常使用</p>
<h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>从上面介绍中，我们可以看到<code>new</code>关键字主要做了以下的工作：</p>
<ul>
<li><p>创建一个新的对象<code>obj</code></p>
</li>
<li><p>将对象与构建函数通过原型链连接起来</p>
</li>
<li><p>将构建函数中的<code>this</code>绑定到新建的对象<code>obj</code>上</p>
</li>
<li><p>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1)  <span class="comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">t.<span class="title function_">sayName</span>() <span class="comment">// &#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure>

<p>流程图如下：</p>
<p> <img src="https://static.vue-js.com/b429b990-7a39-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="三、手写new操作符"><a href="#三、手写new操作符" class="headerlink" title="三、手写new操作符"></a>三、手写new操作符</h2><p>现在我们已经清楚地掌握了<code>new</code>的执行过程</p>
<p>那么我们就动手来实现一下<code>new</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">Func, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建一个新对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 2.新对象原型指向构造函数原型对象</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="comment">// 3.将构建函数的this指向新对象</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title class_">Func</span>.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">    <span class="comment">// 4.根据返回值判断</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">func, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    obj.<span class="property">__proto__</span> = func.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">let</span> result = func.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title function_">mynew</span>(<span class="title class_">Person</span>, <span class="string">&quot;huihui&quot;</span>, <span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// Person &#123;name: &quot;huihui&quot;, age: 123&#125;</span></span><br><span class="line">p.<span class="title function_">say</span>() <span class="comment">// huihui</span></span><br></pre></td></tr></table></figure>

<p>可以发现，代码虽然很短，但是能够模拟实现<code>new</code></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型，原型链？有什么特点？</title>
    <url>/JavaScript/JavaScript-prototype/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/4500e170-725e-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><p><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象</p>
<p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</p>
<p>准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p>
<p>下面举个例子：</p>
<p>函数可以有属性。 每个函数都有一个特殊的属性叫作原型<code>prototype</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomething.<span class="property"><span class="keyword">prototype</span></span> );</span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">constructor</span>: ƒ <span class="title function_">doSomething</span>(),</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">constructor</span>: ƒ <span class="title class_">Object</span>(),</span><br><span class="line">        <span class="attr">hasOwnProperty</span>: ƒ <span class="title function_">hasOwnProperty</span>(),</span><br><span class="line">        <span class="attr">isPrototypeOf</span>: ƒ <span class="title function_">isPrototypeOf</span>(),</span><br><span class="line">        <span class="attr">propertyIsEnumerable</span>: ƒ <span class="title function_">propertyIsEnumerable</span>(),</span><br><span class="line">        <span class="attr">toLocaleString</span>: ƒ <span class="title function_">toLocaleString</span>(),</span><br><span class="line">        <span class="attr">toString</span>: ƒ <span class="title function_">toString</span>(),</span><br><span class="line">        <span class="attr">valueOf</span>: ƒ <span class="title function_">valueOf</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个对象，就是大家常说的原型对象</p>
<p>可以看到，原型对象有一个自有属性<code>constructor</code>，这个属性指向该函数，如下图关系展示</p>
<p> <img src="https://static.vue-js.com/56d87250-725e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><p>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法</p>
<p>在对象实例和它的构造器之间建立一个链接（它是<code>__proto__</code>属性，是从构造函数的<code>prototype</code>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二步 创建实例</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>根据代码，我们可以得到下图</p>
<p> <img src="https://static.vue-js.com/60825aa0-725e-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面分析一下：</p>
<ul>
<li><p>构造函数<code>Person</code>存在原型对象<code>Person.prototype</code></p>
</li>
<li><p>构造函数生成实例对象<code>person</code>，<code>person</code>的<code>__proto__</code>指向构造函数<code>Person</code>原型对象</p>
</li>
<li><p><code>Person.prototype.__proto__</code> 指向内置对象，因为 <code>Person.prototype</code> 是个对象，默认是由 <code>Object </code>函数作为类创建的，而 <code>Object.prototype</code> 为内置对象</p>
</li>
<li><p><code>Person.__proto__</code> 指向内置匿名函数 <code>anonymous</code>，因为 Person 是个函数对象，默认由 Function 作为类创建</p>
</li>
<li><p><code>Function.prototype</code> 和 <code>Function.__proto__ </code>同时指向内置匿名函数 <code>anonymous</code>，这样原型链的终点就是 <code>null</code></p>
</li>
</ul>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>下面首先要看几个概念：</p>
<p><code>__proto__</code>作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的</p>
<p> <img src="https://static.vue-js.com/6a742160-725e-11eb-ab90-d9ae814b240d.png"></p>
<p>每个对象的<code>__proto__</code>都是指向它的构造函数的原型对象<code>prototype</code>的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p>构造函数是一个函数对象，是通过 <code>Function </code>构造器产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p>原型对象本身是一个普通对象，而普通对象的构造函数都是<code>Object</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p>刚刚上面说了，所有的构造器都是函数对象，函数对象都是 <code>Function </code>构造产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>

<p><code>Object </code>的原型对象也有<code>__proto__</code>属性指向<code>null</code>，<code>null</code>是原型链的顶端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>下面作出总结：</p>
<ul>
<li><p>一切对象都是继承自<code>Object</code>对象，<code>Object</code> 对象直接继承根源对象<code> null</code></p>
</li>
<li><p>一切的函数对象（包括 <code>Object</code> 对象），都是继承自 <code>Function</code> 对象</p>
</li>
<li><p><code>Object</code> 对象直接继承自 <code>Function</code> 对象</p>
</li>
<li><p><code>Function</code>对象的<code>__proto__</code>会指向自己的原型对象，最终还是继承自<code>Object</code>对象</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6870732239556640775#heading-7">https://juejin.cn/post/6870732239556640775#heading-7</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现上拉加载，下拉刷新？</title>
    <url>/JavaScript/JavaScript-pull-up-loading-pull-down-refresh/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/89cd1850-8adc-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>下拉刷新和上拉加载这两种交互方式通常出现在移动端中</p>
<p>本质上等同于PC网页中的分页，只是交互形式不同</p>
<p>开源社区也有很多优秀的解决方案，如<code>iscroll</code>、<code>better-scroll</code>、<code>pulltorefresh.js</code>库等等</p>
<p>这些第三方库使用起来非常便捷</p>
<p>我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用</p>
<h2 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h2><p>上拉加载及下拉刷新都依赖于用户交互</p>
<p>最重要的是要理解在什么场景，什么时机下触发交互动作</p>
<h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><p>首先可以看一张图</p>
<p> <img src="https://static.vue-js.com/df498a00-8ae3-11eb-ab90-d9ae814b240d.png"></p>
<p>上拉加载的本质是页面触底，或者快要触底时的动作</p>
<p>判断页面触底我们需要先了解一下下面几个属性</p>
<ul>
<li><p><code>scrollTop</code>：滚动视窗的高度距离<code>window</code>顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值</p>
</li>
<li><p><code>clientHeight</code>:它是一个定值，表示屏幕可视区域的高度；</p>
</li>
<li><p><code>scrollHeight</code>：页面不能滚动时也是存在的,此时scrollHeight等于clientHeight。scrollHeight表示<code>body</code>所有元素的总长度(包括body元素自身的padding)</p>
</li>
</ul>
<p>综上我们得出一个触底公式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scrollTop + clientHeight &gt;= scrollHeight</span><br></pre></td></tr></table></figure>

<p>简单实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> clientHeight  = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>; <span class="comment">//浏览器高度</span></span><br><span class="line"><span class="keyword">let</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>;</span><br><span class="line"><span class="keyword">let</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> distance = <span class="number">50</span>;  <span class="comment">//距离视窗还用50的时候，开始触发；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((scrollTop + clientHeight) &gt;= (scrollHeight - distance)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始加载数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作</p>
<p>关于下拉刷新的原生实现，主要分成三步：</p>
<ul>
<li>监听原生<code>touchstart</code>事件，记录其初始位置的值，<code>e.touches[0].pageY</code>；</li>
<li>监听原生<code>touchmove</code>事件，记录并计算当前滑动的位置值与初始位置值的差值，大于<code>0</code>表示向下拉动，并借助CSS3的<code>translateY</code>属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；</li>
<li>监听原生<code>touchend</code>事件，若此时元素滑动达到最大值，则触发<code>callback</code>，同时将<code>translateY</code>重设为<code>0</code>，元素回到初始位置</li>
</ul>
<p>举个例子：</p>
<p><code>Html</code>结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;refreshText&quot;</span>&gt;</span>&lt;/p &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;refreshContainer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>555<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>监听<code>touchstart</code>事件，记录初始的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;refreshContainer&#x27;</span>),</span><br><span class="line">    _refreshText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.refreshText&#x27;</span>),</span><br><span class="line">    _startPos = <span class="number">0</span>,  <span class="comment">// 初始的值</span></span><br><span class="line">    _transitionHeight = <span class="number">0</span>; <span class="comment">// 移动的距离</span></span><br><span class="line"></span><br><span class="line">_element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    _startPos = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>; <span class="comment">// 记录初始位置</span></span><br><span class="line">    _element.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">    _element.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;transform 0s&#x27;</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>监听<code>touchmove</code>移动事件，记录滑动差值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// e.touches[0].pageY 当前位置</span></span><br><span class="line">    _transitionHeight = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - _startPos; <span class="comment">// 记录差值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_transitionHeight &gt; <span class="number">0</span> &amp;&amp; _transitionHeight &lt; <span class="number">60</span>) &#123; </span><br><span class="line">        _refreshText.<span class="property">innerText</span> = <span class="string">&#x27;下拉刷新&#x27;</span>; </span><br><span class="line">        _element.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(&#x27;</span>+_transitionHeight+<span class="string">&#x27;px)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transitionHeight &gt; <span class="number">55</span>) &#123;</span><br><span class="line">            _refreshText.<span class="property">innerText</span> = <span class="string">&#x27;释放更新&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>最后，就是监听<code>touchend</code>离开的事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    _element.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;transform 0.5s ease 1s&#x27;</span>;</span><br><span class="line">    _element.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(0px)&#x27;</span>;</span><br><span class="line">    _refreshText.<span class="property">innerText</span> = <span class="string">&#x27;更新中...&#x27;</span>;</span><br><span class="line">    <span class="comment">// todo...</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>从上面可以看到，在下拉到松手的过程中，经历了三个阶段：</p>
<ul>
<li>当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作</li>
<li>下拉到一定值时，显示松手释放后的操作提示</li>
<li>下拉到达设定最大值松手时，执行回调，提示正在进行更新操作</li>
</ul>
<h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>在实际开发中，我们更多的是使用第三方库，下面以<code>better-scroll</code>进行举例：</p>
<p>HTML结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;position-wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>下拉刷新&lt;/p &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="comment">&lt;!--列表内容--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>查看更多&lt;/p &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>实例化上拉下拉插件，通过<code>use</code>来注册插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">BScroll</span> <span class="keyword">from</span> <span class="string">&quot;@better-scroll/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PullDown</span> <span class="keyword">from</span> <span class="string">&quot;@better-scroll/pull-down&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PullUp</span> <span class="keyword">from</span> <span class="string">&#x27;@better-scroll/pull-up&#x27;</span>;</span><br><span class="line"><span class="title class_">BScroll</span>.<span class="title function_">use</span>(<span class="title class_">PullDown</span>);</span><br><span class="line"><span class="title class_">BScroll</span>.<span class="title function_">use</span>(<span class="title class_">PullUp</span>);</span><br></pre></td></tr></table></figure>

<p>实例化<code>BetterScroll</code>，并传入相关的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pageNo = <span class="number">1</span>,pageSize = <span class="number">10</span>,dataList = [],isMore = <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">var</span> scroll= <span class="keyword">new</span> <span class="title class_">BScroll</span>(<span class="string">&quot;#position-wrapper&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">scrollY</span>:<span class="literal">true</span>,<span class="comment">//垂直方向滚动</span></span><br><span class="line">    <span class="attr">click</span>:<span class="literal">true</span>,<span class="comment">//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true</span></span><br><span class="line">    <span class="attr">pullUpLoad</span>:<span class="literal">true</span>,<span class="comment">//上拉加载更多</span></span><br><span class="line">    <span class="attr">pullDownRefresh</span>:&#123;</span><br><span class="line">        <span class="attr">threshold</span>:<span class="number">50</span>,<span class="comment">//触发pullingDown事件的位置</span></span><br><span class="line">        <span class="attr">stop</span>:<span class="number">0</span><span class="comment">//下拉回弹后停留的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听下拉刷新</span></span><br><span class="line">scroll.<span class="title function_">on</span>(<span class="string">&quot;pullingDown&quot;</span>,pullingDownHandler);</span><br><span class="line"><span class="comment">//监测实时滚动</span></span><br><span class="line">scroll.<span class="title function_">on</span>(<span class="string">&quot;scroll&quot;</span>,scrollHandler);</span><br><span class="line"><span class="comment">//上拉加载更多</span></span><br><span class="line">scroll.<span class="title function_">on</span>(<span class="string">&quot;pullingUp&quot;</span>,pullingUpHandler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pullingDownHandler</span>(<span class="params"></span>)&#123;</span><br><span class="line">    dataList=[];</span><br><span class="line">    pageNo=<span class="number">1</span>;</span><br><span class="line">    isMore=<span class="literal">true</span>;</span><br><span class="line">    $(<span class="string">&quot;.more&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;查看更多&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getlist</span>();<span class="comment">//请求数据</span></span><br><span class="line">    scroll.<span class="title function_">finishPullDown</span>();<span class="comment">//每次下拉结束后，需要执行这个操作</span></span><br><span class="line">    scroll.<span class="title function_">refresh</span>();<span class="comment">//当滚动区域的dom结构有变化时，需要执行这个操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pullingUpHandler</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isMore)&#123;</span><br><span class="line">        $(<span class="string">&quot;.more&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;没有更多数据了&quot;</span>);</span><br><span class="line">        scroll.<span class="title function_">finishPullUp</span>();<span class="comment">//每次上拉结束后，需要执行这个操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pageNo++;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getlist</span>();<span class="comment">//请求数据</span></span><br><span class="line">    scroll.<span class="title function_">finishPullUp</span>();<span class="comment">//每次上拉结束后，需要执行这个操作</span></span><br><span class="line">    scroll.<span class="title function_">refresh</span>();<span class="comment">//当滚动区域的dom结构有变化时，需要执行这个操作    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scrollHandler</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">y</span>&gt;<span class="number">50</span>) $(<span class="string">&#x27;.refresh&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;松手开始加载&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> $(<span class="string">&#x27;.refresh&#x27;</span>).<span class="title function_">text</span>(<span class="string">&quot;下拉刷新&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getlist</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//返回的数据</span></span><br><span class="line">    <span class="keyword">let</span> result=....;</span><br><span class="line">    dataList=dataList.<span class="title function_">concat</span>(result);</span><br><span class="line">    <span class="comment">//判断是否已加载完</span></span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">length</span>&lt;pageSize) isMore=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//将dataList渲染到html内容中</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<p>使用<code>better-scroll </code>实现下拉刷新、上拉加载时要注意以下几点：</p>
<ul>
<li><code>wrapper</code>里必须只有一个子元素</li>
<li>子元素的高度要比<code>wrapper</code>要高</li>
<li>使用的时候，要确定<code>DOM</code>元素是否已经生成，必须要等到<code>DOM</code>渲染完成后，再<code>new BScroll()</code></li>
<li>滚动区域的<code>DOM</code>元素结构有变化后，需要执行刷新 <code>refresh() </code></li>
<li>上拉或者下拉，结束后，需要执行<code>finishPullUp()</code>或者<code>finishPullDown()</code>，否则将不会执行下次操作</li>
<li><code>better-scroll</code>，默认会阻止浏览器的原生<code>click</code>事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置<code>click:true</code></li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000014423308">https://segmentfault.com/a/1190000014423308</a></li>
<li><a href="https://github.com/ustbhuangyi/better-scroll">https://github.com/ustbhuangyi/better-scroll</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对正则表达式的理解？应用场景？</title>
    <url>/JavaScript/JavaScript-regexp/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/55388a40-7f1d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>正则表达式是一种用来匹配字符串的强有力的武器</p>
<p>它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它”匹配”了，否则，该字符串就是不合法的</p>
<p>在 <code>JavaScript</code>中，正则表达式也是对象，构建正则表达式有两种方式：</p>
<ol>
<li>字面量创建，其由包含在斜杠之间的模式组成</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/\d+/g</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>调用<code>RegExp</code>对象的构造函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rul = <span class="string">&quot;\\d+&quot;</span></span><br><span class="line"><span class="keyword">const</span> re1 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(rul,<span class="string">&quot;g&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符<code>\</code>需要使用<code>\\</code>进行转义</p>
<h2 id="二、匹配规则"><a href="#二、匹配规则" class="headerlink" title="二、匹配规则"></a>二、匹配规则</h2><p>常见的校验规则如下：</p>
<table>
<thead>
<tr>
<th>规则</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>转义</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入的结束</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一个表达式 0 次或多次</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td>
</tr>
<tr>
<td>?</td>
<td>匹配前面一个表达式 0 次或者 1 次。等价于<code>&#123;0,1&#125;</code></td>
</tr>
<tr>
<td>.</td>
<td>默认匹配除换行符之外的任何单个字符</td>
</tr>
<tr>
<td>x(?&#x3D;y)</td>
<td>匹配’x’仅仅当’x’后面跟着’y’。这种叫做先行断言</td>
</tr>
<tr>
<td>(?&lt;&#x3D;y)x</td>
<td>匹配’x’仅当’x’前面是’y’.这种叫做后行断言</td>
</tr>
<tr>
<td>x(?!y)</td>
<td>仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找</td>
</tr>
<tr>
<td>(?&lt;!<em>y</em>)<em>x</em></td>
<td>仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配’x’或者’y’</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td>
</tr>
<tr>
<td>{n,}</td>
<td>n是一个正整数，匹配前一个字符至少出现了n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>n 和 m 都是整数。匹配前面的字符至少n次，最多m次</td>
</tr>
<tr>
<td>[xyz]</td>
<td>一个字符集合。匹配方括号中的任意字符</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>匹配任何没有包含在方括号中的字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个词的边界，例如在字母和空格之间</td>
</tr>
<tr>
<td>\B</td>
<td>匹配一个非单词边界</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配一个空白字符，包括空格、制表符、换页符和换行符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配一个非空白字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配一个单字字符（字母、数字或者下划线）</td>
</tr>
<tr>
<td>\W</td>
<td>匹配一个非单字字符</td>
</tr>
</tbody></table>
<h3 id="正则表达式标记"><a href="#正则表达式标记" class="headerlink" title="正则表达式标记"></a>正则表达式标记</h3><table>
<thead>
<tr>
<th align="left">标志</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>g</code></td>
<td align="left">全局搜索。</td>
</tr>
<tr>
<td align="left"><code>i</code></td>
<td align="left">不区分大小写搜索。</td>
</tr>
<tr>
<td align="left"><code>m</code></td>
<td align="left">多行搜索。</td>
</tr>
<tr>
<td align="left"><code>s</code></td>
<td align="left">允许 <code>.</code> 匹配换行符。</td>
</tr>
<tr>
<td align="left"><code>u</code></td>
<td align="left">使用<code>unicode</code>码的模式进行匹配。</td>
</tr>
<tr>
<td align="left"><code>y</code></td>
<td align="left">执行”粘性(<code>sticky</code>)搜索,匹配从目标字符串的当前位置开始。</td>
</tr>
</tbody></table>
<p>使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/pattern/</span>flags;</span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性：</p>
<h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><p>在了解贪婪模式前，首先举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/ab&#123;1,3&#125;c/</span></span><br></pre></td></tr></table></figure>

<p>在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试<code>bbb</code>，然后再看整个正则是否能匹配。不能匹配时，吐出一个<code>b</code>，即在<code>bb</code>的基础上，再继续尝试，以此重复</p>
<p>如果多个贪婪量词挨着，则深度优先搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regx = <span class="regexp">/(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( string.<span class="title function_">match</span>(reg) );</span><br><span class="line"><span class="comment">// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其中，前面的<code>\d&#123;1,3&#125;</code>匹配的是”123”，后面的<code>\d&#123;1,3&#125;</code>匹配的是”45”</p>
<h3 id="懒惰模式"><a href="#懒惰模式" class="headerlink" title="懒惰模式"></a>懒惰模式</h3><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( string.<span class="title function_">match</span>(regex) );</span><br><span class="line"><span class="comment">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其中<code>\d&#123;1,3&#125;?</code>只匹配到一个字符”1”，而后面的<code>\d&#123;1,3&#125;</code>匹配了”234”</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组主要是用过<code>()</code>进行实现，比如<code>beyond&#123;3&#125;</code>，是匹配<code>d</code>字母3次。而<code>(beyond)&#123;3&#125;</code>是匹配<code>beyond</code>三次</p>
<p>在<code>()</code>内使用<code>|</code>达到或的效果，如<code>(abc | xxx)</code>可以匹配<code>abc</code>或者<code>xxx</code></p>
<p>反向引用，巧用<code>$</code>分组捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;John Smith&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换名字和姓氏</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="regexp">/(john) (smith)/i</span>, <span class="string">&#x27;$2, $1&#x27;</span>)) <span class="comment">// Smith, John</span></span><br></pre></td></tr></table></figure>





<h2 id="三、匹配方法"><a href="#三、匹配方法" class="headerlink" title="三、匹配方法"></a>三、匹配方法</h2><p>正则表达式常被用于某些方法，我们可以分成两类：</p>
<ul>
<li>字符串（str）方法：<code>match</code>、<code>matchAll</code>、<code>search</code>、<code>replace</code>、<code>split</code></li>
<li>正则对象下（regexp）的方法：<code>test</code>、<code>exec</code></li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">exec</td>
<td align="left">一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</td>
</tr>
<tr>
<td align="left">match</td>
<td align="left">一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td>
</tr>
<tr>
<td align="left">matchAll</td>
<td align="left">一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td>
</tr>
<tr>
<td align="left">search</td>
<td align="left">一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td align="left">replace</td>
<td align="left">一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td align="left">split</td>
<td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法。</td>
</tr>
</tbody></table>
<h3 id="str-match-regexp"><a href="#str-match-regexp" class="headerlink" title="str.match(regexp)"></a>str.match(regexp)</h3><p><code>str.match(regexp)</code> 方法在字符串 <code>str</code> 中找到匹配 <code>regexp</code> 的字符</p>
<p>如果 <code>regexp</code> 不带有 <code>g</code> 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 <code>index</code>（匹配项的位置）、<code>input</code>（输入字符串，等于 <code>str</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">match</span>(<span class="regexp">/Java(Script)/</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result[<span class="number">0</span>] );     <span class="comment">// JavaScript（完全匹配）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result[<span class="number">1</span>] );     <span class="comment">// Script（第一个分组）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result.<span class="property">length</span> ); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他信息：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result.<span class="property">index</span> );  <span class="comment">// 7（匹配位置）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result.<span class="property">input</span> );  <span class="comment">// I love JavaScript（源字符串）</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>regexp</code> 带有 <code>g</code> 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">match</span>(<span class="regexp">/Java(Script)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result[<span class="number">0</span>] ); <span class="comment">// JavaScript</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( result.<span class="property">length</span> ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>如果没有匹配项，则无论是否带有标记 <code>g</code> ，都将返回 <code>null</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">match</span>(<span class="regexp">/HTML/</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



<h3 id="str-matchAll-regexp"><a href="#str-matchAll-regexp" class="headerlink" title="str.matchAll(regexp)"></a>str.matchAll(regexp)</h3><p>返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;test1test2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...str.<span class="title function_">matchAll</span>(regexp)];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span></span><br></pre></td></tr></table></figure>







<h3 id="str-search-regexp"><a href="#str-search-regexp" class="headerlink" title="str.search(regexp)"></a>str.search(regexp)</h3><p>返回第一个匹配项的位置，如果未找到，则返回 <code>-1</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;A drop of ink may make a million think&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( str.<span class="title function_">search</span>( <span class="regexp">/ink/i</span> ) ); <span class="comment">// 10（第一个匹配位置）</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意的是，<code>search</code> 仅查找第一个匹配项</p>
<h2 id="str-replace-regexp"><a href="#str-replace-regexp" class="headerlink" title="str.replace(regexp)"></a>str.replace(regexp)</h2><p>替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配<code>g</code>的时候，只替换第一个匹配成功的字符串片段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1=<span class="regexp">/javascript/i</span>;</span><br><span class="line"><span class="keyword">const</span> reg2=<span class="regexp">/javascript/ig</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.<span class="title function_">replace</span>(reg1,<span class="string">&#x27;js&#x27;</span>));</span><br><span class="line"><span class="comment">//hello js Javascript Javascript</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.<span class="title function_">replace</span>(reg2,<span class="string">&#x27;js&#x27;</span>));</span><br><span class="line"><span class="comment">//hello js js js</span></span><br></pre></td></tr></table></figure>



<h3 id="str-split-regexp"><a href="#str-split-regexp" class="headerlink" title="str.split(regexp)"></a>str.split(regexp)</h3><p>使用正则表达式（或子字符串）作为分隔符来分割字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12, 34, 56&#x27;</span>.<span class="title function_">split</span>(<span class="regexp">/,\s*/</span>)) <span class="comment">// 数组 [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;56&#x27;]</span></span><br></pre></td></tr></table></figure>



<h3 id="regexp-exec-str"><a href="#regexp-exec-str" class="headerlink" title="regexp.exec(str)"></a>regexp.exec(str)</h3><p><code>regexp.exec(str)</code> 方法返回字符串 <code>str</code> 中的 <code>regexp</code> 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的</p>
<p>根据正则表达式是否带有标志 <code>g</code>，它的行为有所不同</p>
<p>如果没有 <code>g</code>，那么 <code>regexp.exec(str)</code> 返回的第一个匹配与 <code>str.match(regexp)</code> 完全相同</p>
<p>如果有标记 <code>g</code>，调用 <code>regexp.exec(str)</code> 会返回第一个匹配项，并将紧随其后的位置保存在属性<code>regexp.lastIndex</code> 中。 下一次同样的调用会从位置 <code>regexp.lastIndex</code> 开始搜索，返回下一个匹配项，并将其后的位置保存在 <code>regexp.lastIndex</code> 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;More about JavaScript at https://javascript.info&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> regexp = <span class="regexp">/javascript/ig</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (result = regexp.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">`Found <span class="subst">$&#123;result[<span class="number">0</span>]&#125;</span> at position <span class="subst">$&#123;result.index&#125;</span>`</span> );</span><br><span class="line">  <span class="comment">// Found JavaScript at position 11</span></span><br><span class="line">  <span class="comment">// Found javascript at position 33</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="regexp-test-str"><a href="#regexp-test-str" class="headerlink" title="regexp.test(str)"></a>regexp.test(str)</h3><p>查找匹配项，然后返回 <code>true/false</code> 表示是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个测试相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="regexp">/love/i</span>.<span class="title function_">test</span>(str) ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>





<h2 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h2><p>通过上面的学习，我们对正则表达式有了一定的了解</p>
<p>下面再来看看正则表达式一些案例场景：</p>
<p>验证QQ合法性（5~15位、全是数字、不以0开头）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^[1-9][0-9]&#123;4,14&#125;$/</span></span><br><span class="line"><span class="keyword">const</span> isvalid = patrn.<span class="title function_">exec</span>(s)</span><br></pre></td></tr></table></figure>

<p>校验用户账号合法性（只能输入5-20个以字母开头、可带数字、”_”、”.”的字串）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patrn=<span class="regexp">/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/</span>;</span><br><span class="line"><span class="keyword">const</span> isvalid = patrn.<span class="title function_">exec</span>(s)</span><br></pre></td></tr></table></figure>

<p>将<code>url</code>参数解析为对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> protocol = <span class="string">&#x27;(?&lt;protocol&gt;https?:)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;(?&lt;host&gt;(?&lt;hostname&gt;[^/#?:]+)(?::(?&lt;port&gt;\\d+))?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="string">&#x27;(?&lt;pathname&gt;(?:\\/[^/#?]+)*\\/?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> search = <span class="string">&#x27;(?&lt;search&gt;(?:\\?[^#]*)?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> hash = <span class="string">&#x27;(?&lt;hash&gt;(?:#.*)?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;protocol&#125;</span>\/\/<span class="subst">$&#123;host&#125;</span><span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;search&#125;</span><span class="subst">$&#123;hash&#125;</span>$`</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">execURL</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(url);</span><br><span class="line">    <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        result.<span class="property">groups</span>.<span class="property">port</span> = result.<span class="property">groups</span>.<span class="property">port</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> result.<span class="property">groups</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">protocol</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">hostname</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">port</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">pathname</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">search</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">hash</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">execURL</span>(<span class="string">&#x27;https://localhost:8080/?a=b#xxxx&#x27;</span>));</span><br><span class="line"><span class="attr">protocol</span>: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line"><span class="attr">hostname</span>: <span class="string">&quot;localhost&quot;</span></span><br><span class="line"><span class="attr">port</span>: <span class="string">&quot;8080&quot;</span></span><br><span class="line"><span class="attr">pathname</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="attr">search</span>: <span class="string">&quot;?a=b&quot;</span></span><br><span class="line"><span class="attr">hash</span>: <span class="string">&quot;#xxxx&quot;</span></span><br></pre></td></tr></table></figure>

<p>再将上面的<code>search</code>和<code>hash</code>进行解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">execUrlParams</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/^[#?&amp;]/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(!str)&#123; <span class="comment">//如果正则可能配到空字符串，极有可能造成死循环，判断很重要</span></span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/(?:^|&amp;)([^&amp;=]*)=?([^&amp;]*?)(?=&amp;|$)/y</span></span><br><span class="line">    <span class="keyword">let</span> exec = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">    <span class="keyword">while</span>(exec)&#123;</span><br><span class="line">        result[exec[<span class="number">1</span>]] = exec[<span class="number">2</span>];</span><br><span class="line">        exec = reg.<span class="title function_">exec</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">execUrlParams</span>(<span class="string">&#x27;#&#x27;</span>));<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">execUrlParams</span>(<span class="string">&#x27;##&#x27;</span>));<span class="comment">//&#123;&#x27;#&#x27;:&#x27;&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">execUrlParams</span>(<span class="string">&#x27;?q=3606&amp;src=srp&#x27;</span>)); <span class="comment">//&#123;q: &quot;3606&quot;, src: &quot;srp&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">execUrlParams</span>(<span class="string">&#x27;test=a=b=c&amp;&amp;==&amp;a=&#x27;</span>));<span class="comment">//&#123;test: &quot;a=b=c&quot;, &quot;&quot;: &quot;=&quot;, a: &quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对作用域链的理解</title>
    <url>/JavaScript/JavaScript-scope/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/16f614a0-718f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合</p>
<p>换句话说，作用域决定了代码区块中变量和其他资源的可见性</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> inVariable = <span class="string">&quot;函数内部变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFunction</span>();<span class="comment">//要先执行这个函数，否则根本不知道里面是啥</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inVariable); <span class="comment">// Uncaught ReferenceError: inVariable is not defined</span></span><br></pre></td></tr></table></figure>

<p>上述例子中，函数<code>myFunction</code>内部创建一个<code>inVariable</code>变量，当我们在全局访问这个变量的时候，系统会报错</p>
<p>这就说明我们在全局是无法获取到（闭包除外）函数内部的变量</p>
<p>我们一般将作用域分成：</p>
<ul>
<li><p>全局作用域</p>
</li>
<li><p>函数作用域</p>
</li>
<li><p>块级作用域</p>
</li>
</ul>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure>


<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="title function_">greet</span>();</span><br><span class="line"><span class="comment">// 报错： Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure>
<p>可见上述代码中在函数内部声明的变量或函数，在函数外部是无法访问的，这说明在函数内部定义的变量或者方法只是函数作用域</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>ES6引入了<code>let</code>和<code>const</code>关键字,和<code>var</code>关键字不同，在大括号中使用<code>let</code>和<code>const</code>声明的变量存在于块级作用域中。在大括号之外不能访问这些变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 块级作用域中的变量</span></span><br><span class="line">  <span class="keyword">let</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> lang = <span class="string">&#x27;English&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// Prints &#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量 &#x27;English&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lang);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure>



<h2 id="二、词法作用域"><a href="#二、词法作用域" class="headerlink" title="二、词法作用域"></a>二、词法作用域</h2><p>词法作用域，又叫静态作用域，变量被创建时就确定好了，而非执行阶段确定的。也就是说我们写好代码时它的作用域就确定了，<code>JavaScript</code> 遵循的就是词法作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure>

<p>上述代码改变成一张图</p>
<p> <img src="https://static.vue-js.com/29fab3d0-718f-11eb-85f6-6fac77c0c9b3.png"></p>
<p>由于<code>JavaScript</code>遵循词法作用域，相同层级的 <code>foo</code> 和 <code>bar</code> 就没有办法访问到彼此块作用域中的变量，所以输出2</p>
<h2 id="三、作用域链"><a href="#三、作用域链" class="headerlink" title="三、作用域链"></a>三、作用域链</h2><p>当在<code>Javascript</code>中使用一个变量的时候，首先<code>Javascript</code>引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域</p>
<p>如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错</p>
<p>这里拿《你不知道的Javascript(上)》中的一张图解释：</p>
<p>把作用域比喻成一个建筑，这份建筑代表程序中的嵌套作用域链，第一层代表当前的执行作用域，顶层代表全局作用域</p>
<p> <img src="https://static.vue-js.com/33f9c100-718f-11eb-85f6-6fac77c0c9b3.png"></p>
<p>变量的引用会顺着当前楼层进行查找，如果找不到，则会往上一层找，一旦到达顶层，查找的过程都会停止</p>
<p>下面代码演示下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">student</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 张三</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// 男 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">student</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// Uncaught ReferenceError: age is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">person</span>();</span><br></pre></td></tr></table></figure>

<p>上述代码主要主要做了以下工作：</p>
<ul>
<li><code>student</code>函数内部属于最内层作用域，找不到<code>name</code>，向上一层作用域<code>person</code>函数内部找，找到了输出”张三”</li>
<li><code>student</code>内部输出<code>sex</code>时找不到，向上一层作用域<code>person</code>函数找，还找不到继续向上一层找，即全局作用域，找到了输出”男”</li>
<li>在<code>person</code>函数内部输出<code>age</code>时找不到，向上一层作用域找，即全局作用域，还是找不到则报错</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web常见的攻击方式有哪些？如何防御？</title>
    <url>/JavaScript/JavaScript-security/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/d0892930-8d1d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为</p>
<p>如植入恶意代码，修改网站权限，获取网站用户隐私信息等等</p>
<p>Web应用程序的安全性是任何基于Web业务的重要组成部分</p>
<p>确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露</p>
<p>站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践</p>
<p>我们常见的Web攻击方式有</p>
<ul>
<li>XSS (Cross Site Scripting) 跨站脚本攻击</li>
<li>CSRF（Cross-site request forgery）跨站请求伪造</li>
<li>SQL注入攻击</li>
</ul>
<h2 id="二、XSS"><a href="#二、XSS" class="headerlink" title="二、XSS"></a>二、XSS</h2><p>XSS，跨站脚本攻击，允许攻击者将恶意代码植入到提供给其它用户使用的页面中</p>
<p><code>XSS</code>涉及到三方，即攻击者、客户端与<code>Web</code>应用</p>
<p><code>XSS</code>的攻击目标是为了盗取存储在客户端的<code>cookie</code>或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互</p>
<p>举个例子：</p>
<p>一个搜索页面，根据<code>url</code>参数决定关键词的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;%= getParameter(&quot;</span><span class="attr">keyword</span>&quot;) %&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&lt;%= getParameter(&quot;keyword&quot;) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里看似并没有问题，但是如果不按套路出牌呢？</p>
<p>用户输入<code>&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，拼接到 HTML 中返回给浏览器。形成了如下的 HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器无法分辨出 <code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code> 是恶意代码，因而将其执行，试想一下，如果是获取<code>cookie</code>发送对黑客服务器呢？</p>
<p>根据攻击的来源，<code>XSS</code>攻击可以分成：</p>
<ul>
<li>存储型</li>
<li>反射型</li>
<li>DOM 型</li>
</ul>
<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>存储型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等</p>
<h3 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h3><p>反射型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</p>
<p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</p>
<p>由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。</p>
<p>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见</p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>DOM 型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</p>
<h3 id="XSS的预防"><a href="#XSS的预防" class="headerlink" title="XSS的预防"></a>XSS的预防</h3><p>通过前面介绍，看到<code>XSS</code>攻击的两大要素：</p>
<ul>
<li>攻击者提交而恶意代码</li>
<li>浏览器执行恶意代码</li>
</ul>
<p>针对第一个要素，我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了</p>
<p>而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示</p>
<p>例如：</p>
<p>一个正常的用户输入了 <code>5 &lt; 7</code> 这个内容，在写入数据库前，被转义，变成了 <code>5 &lt; 7</code></p>
<p>在客户端中，一旦经过了 <code>escapeHTML()</code>，客户端显示的内容就变成了乱码( <code>5 &lt; 7</code> )</p>
<p>在前端中，不同的位置所需的编码也不同。</p>
<ul>
<li>当 <code>5 &lt; 7</code> 作为 HTML 拼接页面时，可以正常显示：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;comment&quot;</span>&gt;</span>5 <span class="symbol">&amp;lt;</span> 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>5 &lt; 7</code> 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等</li>
</ul>
<p>可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码：</p>
<p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等</p>
<p>如果用 <code>Vue/React</code> 技术栈，并且不使用 <code>v-html</code>&#x2F;<code>dangerouslySetInnerHTML</code> 功能，就在前端 <code>render</code> 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患</p>
<p>DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 链接内包含恶意代码 --&gt;</span><br><span class="line">&lt; a href=<span class="string">&quot; &quot;</span>&gt;<span class="number">1</span>&lt;/ a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// setTimeout()/setInterval() 中调用恶意代码</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// location 调用恶意代码</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;UNTRUSTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eval() 中调用恶意代码</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="三、CSRF"><a href="#三、CSRF" class="headerlink" title="三、CSRF"></a>三、CSRF</h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求</p>
<p>利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目</p>
<p>一个典型的CSRF攻击有着如下的流程：</p>
<ul>
<li>受害者登录a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问了b.com</li>
<li>b.com 向 a.com 发送了一个请求：a.com&#x2F;act&#x3D;xx。浏览器会默认携带a.com的Cookie</li>
<li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li>
<li>a.com以受害者的名义执行了act&#x3D;xx</li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作</li>
</ul>
<p><code>csrf</code>可以通过<code>get</code>请求，即通过访问<code>img</code>的页面后，浏览器自动访问目标地址，发送请求</p>
<p>同样，也可以设置一个自动提交的表单发送<code>post</code>请求，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://bank.example/withdraw&quot;</span> method=<span class="variable constant_">POST</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;for&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>

<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次<code>POST</code>操作</p>
<p>还有一种为使用<code>a</code>标签的，需要用户点击链接才会触发</p>
<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; a href=&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot; taget=&quot;_blank&quot;&gt;</span><br><span class="line">    重磅消息！！</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a>CSRF的特点</h3><ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生</li>
<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据</li>
<li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是”冒用”</li>
<li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪</li>
</ul>
<h3 id="CSRF的预防"><a href="#CSRF的预防" class="headerlink" title="CSRF的预防"></a>CSRF的预防</h3><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性</p>
<p>防止<code>csrf</code>常用方案如下：</p>
<ul>
<li>阻止不明外域的访问<ul>
<li>同源检测</li>
<li>Samesite Cookie</li>
</ul>
</li>
<li>提交时要求附加本域才能获取的信息<ul>
<li>CSRF Token</li>
<li>双重Cookie验证</li>
</ul>
</li>
</ul>
<p>这里主要讲讲<code>token</code>这种形式，流程如下：</p>
<ul>
<li>用户打开页面的时候，服务器需要给这个用户生成一个Token</li>
<li>对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrftoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tokenvalue&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性</li>
</ul>
<h2 id="四、SQL注入"><a href="#四、SQL注入" class="headerlink" title="四、SQL注入"></a>四、SQL注入</h2><p>Sql 注入攻击，是通过将恶意的 <code>Sql </code>查询或添加语句插入到应用的输入参数中，再在后台 <code>Sql </code>服务器上解析执行进行的攻击</p>
<p> <img src="https://static.vue-js.com/ead52fa0-8d1d-11eb-85f6-6fac77c0c9b3.png"></p>
<p>流程如下所示：</p>
<ul>
<li><p>找出SQL漏洞的注入点</p>
</li>
<li><p>判断数据库的类型以及版本</p>
</li>
<li><p>猜解用户名和密码</p>
</li>
<li><p>利用工具查找Web后台管理入口</p>
</li>
<li><p>入侵和破坏</p>
</li>
</ul>
<p>预防方式如下：</p>
<ul>
<li>严格检查输入变量的类型和格式</li>
<li>过滤和转义特殊字符</li>
<li>对访问数据库的Web应用程序采用Web应用防火墙</li>
</ul>
<p>上述只是列举了常见的<code>web</code>攻击方式，实际开发过程中还会遇到很多安全问题，对于这些问题， 切记不可忽视</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://tech.meituan.com/2018/09/27/fe-security.html">https://tech.meituan.com/2018/09/27/fe-security.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/learn/Server-side/First_steps/Website_security">https://developer.mozilla.org/zh-CN/docs/learn/Server-side/First_steps/Website_security</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是单点登录？如何实现？</title>
    <url>/JavaScript/JavaScript-single-sign/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/8a25a760-8c83-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一</p>
<p>SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p>
<p>SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过<code>passport</code>，子系统本身将不参与登录操作</p>
<p>当一个系统成功登录以后，<code>passport</code>将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被<code>passport</code>授权以后，会建立一个局部会话，在一定时间内可以无需再次向<code>passport</code>发起认证</p>
<p> <img src="https://static.vue-js.com/2b9b0e70-8c4b-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上图有四个系统，分别是<code>Application1</code>、<code>Application2</code>、<code>Application3</code>、和<code>SSO</code>，当<code>Application1</code>、<code>Application2</code>、<code>Application3</code>需要登录时，将跳到<code>SSO</code>系统，<code>SSO</code>系统完成登录，其他的应用系统也就随之登录了</p>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>淘宝、天猫都属于阿里旗下，当用户登录淘宝后，再打开天猫，系统便自动帮用户登录了天猫，这种现象就属于单点登录</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><h3 id="同域名下的单点登录"><a href="#同域名下的单点登录" class="headerlink" title="同域名下的单点登录"></a>同域名下的单点登录</h3><p><code>cookie</code>的<code>domain</code>属性设置为当前域的父域，并且父域的<code>cookie</code>会被子域所共享。<code>path</code>属性默认为<code>web</code>应用的上下文路径</p>
<p>利用 <code>Cookie</code> 的这个特点，没错，我们只需要将<code>Cookie</code>的<code> domain</code>属性设置为父域的域名（主域名），同时将 <code>Cookie </code>的<code>path</code>属性设置为根路径，将 <code>Session ID</code>（或 <code>Token</code>）保存到父域中。这样所有的子域应用就都可以访问到这个<code>Cookie</code></p>
<p>不过这要求应用系统的域名需建立在一个共同的主域名之下，如 <code>tieba.baidu.com</code> 和 <code>map.baidu.com</code>，它们都建立在 <code>baidu.com </code>这个主域名之下，那么它们就可以通过这种方式来实现单点登录</p>
<h3 id="不同域名下的单点登录-一"><a href="#不同域名下的单点登录-一" class="headerlink" title="不同域名下的单点登录(一)"></a>不同域名下的单点登录(一)</h3><p>如果是不同域的情况下，<code>Cookie</code>是不共享的，这里我们可以部署一个认证中心，用于专门处理登录请求的独立的 <code>Web </code>服务</p>
<p>用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 <code>token</code> 写入 <code>Cookie</code>（注意这个 <code>Cookie </code>是认证中心的，应用系统是访问不到的）</p>
<p>应用系统检查当前请求有没有 <code>Token</code>，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心</p>
<p>由于这个操作会将认证中心的 <code>Cookie</code> 自动带过去，因此，认证中心能够根据 <code>Cookie</code> 知道用户是否已经登录过了</p>
<p>如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录</p>
<p>如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 <code>URL </code>，并在跳转前生成一个 <code>Token</code>，拼接在目标<code> URL</code> 的后面，回传给目标应用系统</p>
<p>应用系统拿到 <code>Token </code>之后，还需要向认证中心确认下 <code>Token</code> 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 <code>Token </code>写入<code> Cookie</code>，然后给本次访问放行。（注意这个 <code>Cookie</code> 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 <code>Token</code>，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了</p>
<p>此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法</p>
<h3 id="不同域名下的单点登录-二"><a href="#不同域名下的单点登录-二" class="headerlink" title="不同域名下的单点登录(二)"></a>不同域名下的单点登录(二)</h3><p>可以选择将 <code>Session ID</code> （或 <code>Token</code> ）保存到浏览器的 <code>LocalStorage</code> 中，让前端在每次向后端发送请求时，主动将<code>LocalStorage</code>的数据传递给服务端</p>
<p>这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 <code>Session ID </code>（或 <code>Token </code>）放在响应体中传递给前端</p>
<p>单点登录完全可以在前端实现。前端拿到 <code>Session ID </code>（或 <code>Token</code> ）后，除了将它写入自己的 <code>LocalStorage</code> 中之外，还可以通过特殊手段将它写入多个其他域下的 <code>LocalStorage</code> 中</p>
<p>关键代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 token</span></span><br><span class="line"><span class="keyword">var</span> token = result.<span class="property">data</span>.<span class="property">token</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 动态创建一个不可见的iframe，在iframe中加载一个跨域HTML</span></span><br><span class="line"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">iframe.<span class="property">src</span> = <span class="string">&quot;http://app1.com/localstorage.html&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(iframe);</span><br><span class="line"><span class="comment">// 使用postMessage()方法将token传递给iframe</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(token, <span class="string">&quot;http://app1.com&quot;</span>);</span><br><span class="line">&#125;, <span class="number">4000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    iframe.<span class="title function_">remove</span>();</span><br><span class="line">&#125;, <span class="number">6000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在这个iframe所加载的HTML中绑定一个事件监听器，当事件被触发时，把接收到的token数据写入localStorage</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, event.<span class="property">data</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>前端通过 <code>iframe</code>+<code>postMessage()</code> 方式，将同一份 <code>Token</code> 写入到了多个域下的 <code>LocalStorage</code> 中，前端每次在向后端发送请求之前，都会主动从 <code>LocalStorage</code> 中读取<code>Token</code>并在请求中携带，这样就实现了同一份<code> Token</code> 被多个域所共享</p>
<p>此种实现方式完全由前端控制，几乎不需要后端参与，同样支持跨域</p>
<h2 id="三、流程"><a href="#三、流程" class="headerlink" title="三、流程"></a>三、流程</h2><p>单点登录的流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/2422bc40-8c84-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li><p>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</p>
</li>
<li><p>sso认证中心发现用户未登录，将用户引导至登录页面</p>
</li>
<li><p>用户输入用户名密码提交登录申请</p>
</li>
<li><p>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</p>
</li>
<li><p>sso认证中心带着令牌跳转会最初的请求地址（系统1）</p>
</li>
<li><p>系统1拿到令牌，去sso认证中心校验令牌是否有效</p>
</li>
<li><p>sso认证中心校验令牌，返回有效，注册系统1</p>
</li>
<li><p>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</p>
</li>
<li><p>用户访问系统2的受保护资源</p>
</li>
<li><p>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</p>
</li>
<li><p>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</p>
</li>
<li><p>系统2拿到令牌，去sso认证中心校验令牌是否有效</p>
</li>
<li><p>sso认证中心校验令牌，返回有效，注册系统2</p>
</li>
<li><p>系统2使用该令牌创建与用户的局部会话，返回受保护资源</p>
</li>
</ul>
<p>用户登录成功之后，会与<code>sso</code>认证中心及各个子系统建立会话，用户与<code>sso</code>认证中心建立的会话称为全局会话</p>
<p>用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过<code>sso</code>认证中心</p>
<p>全局会话与局部会话有如下约束关系：</p>
<ul>
<li>局部会话存在，全局会话一定存在</li>
<li>全局会话存在，局部会话不一定存在</li>
<li>全局会话销毁，局部会话必须销毁</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blog.csdn.net/weixin_36380516/article/details/109006828">https://blog.csdn.net/weixin_36380516/article/details/109006828</a></li>
<li><a href="https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95">https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95</a></li>
<li><a href="https://juejin.cn/post/6844903664985866253">https://juejin.cn/post/6844903664985866253</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript字符串的常用方法有哪些？</title>
    <url>/JavaScript/JavaScript-string-api/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/ceb6ebc0-65c1-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><p>我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p>
<p>除了常用<code>+</code>以及<code>$&#123;&#125;</code>进行字符串拼接之外，还可通过<code>concat</code></p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>用于将一个或多个字符串拼接成一个新字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.<span class="title function_">concat</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p>
<p>常见的有：</p>
<ul>
<li>slice()</li>
<li>substr()</li>
<li>substring()</li>
</ul>
<p>这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p>
<p>常见的有：</p>
<ul>
<li><p>trim()、trimLeft()、trimRight()</p>
</li>
<li><p>repeat()</p>
</li>
<li><p>padStart()、padEnd()</p>
</li>
<li><p>toLowerCase()、 toUpperCase()</p>
</li>
</ul>
<h4 id="trim-、trimLeft-、trimRight"><a href="#trim-、trimLeft-、trimRight" class="headerlink" title="trim()、trimLeft()、trimRight()"></a>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> trimmedStringValue = stringValue.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue); <span class="comment">// &quot; hello world &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trimmedStringValue); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;na &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">// na na </span></span><br></pre></td></tr></table></figure>



<h4 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">6</span>)); <span class="comment">// &quot; foo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">padStart</span>(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;......foo&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="toLowerCase-、-toUpperCase"><a href="#toLowerCase-、-toUpperCase" class="headerlink" title="toLowerCase()、 toUpperCase()"></a>toLowerCase()、 toUpperCase()</h3><p>大小写转化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toUpperCase</span>()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">toLowerCase</span>()); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>除了通过索引的方式获取字符串的值，还可通过：</p>
<ul>
<li><p>chatAt()</p>
</li>
<li><p>indexOf()</p>
</li>
<li><p>startWith()</p>
</li>
<li><p>includes()</p>
</li>
</ul>
<h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">charAt</span>(<span class="number">2</span>)); <span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>



<h4 id="startWith-、includes"><a href="#startWith-、includes" class="headerlink" title="startWith()、includes()"></a>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">startsWith</span>(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">startsWith</span>(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">includes</span>(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">includes</span>(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>





<h2 id="二、转换方法"><a href="#二、转换方法" class="headerlink" title="二、转换方法"></a>二、转换方法</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>把字符串按照指定的分割符，拆分成数组中的每一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12+23+34&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;+&quot;</span>) <span class="comment">// [12,23,34]</span></span><br></pre></td></tr></table></figure>



<h2 id="三、模板匹配方法"><a href="#三、模板匹配方法" class="headerlink" title="三、模板匹配方法"></a>三、模板匹配方法</h2><p>针对正则表达式，字符串设计了几个方法：</p>
<ul>
<li>match()</li>
<li>search()</li>
<li>replace()</li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.<span class="title function_">match</span>(pattern);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(matches[<span class="number">0</span>]); <span class="comment">// &quot;cat&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pos = text.<span class="title function_">search</span>(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pos); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>



<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.<span class="title function_">replace</span>(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;cond, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>举例说明你对尾递归的理解，有哪些应用场景</title>
    <url>/JavaScript/JavaScript-tail-recursion/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/74db8fe0-815d-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、递归"><a href="#一、递归" class="headerlink" title="一、递归"></a>一、递归</h2><p>递归（英语：Recursion）</p>
<p>在数学与计算机科学中，是指在函数的定义中使用函数自身的方法</p>
<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数</p>
<p>其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</p>
<p>一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回</p>
<p>下面实现一个函数 <code>pow(x, n)</code>，它可以计算 <code>x</code> 的 <code>n</code> 次方</p>
<p>使用迭代的方式，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 再循环中，用 x 乘以 result n 次</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    result *= x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用递归的方式，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="title function_">pow</span>(x, n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pow(x, n)</code> 被调用时，执行分为两个分支：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">             <span class="keyword">if</span> n==<span class="number">1</span>  = x</span><br><span class="line">             /</span><br><span class="line"><span class="title function_">pow</span>(x, n) =</span><br><span class="line">             \</span><br><span class="line">              <span class="keyword">else</span>     = x * <span class="title function_">pow</span>(x, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>也就是说<code>pow</code> 递归地调用自身 直到 <code>n == 1</code></p>
<p> <img src="https://static.vue-js.com/8002c960-815d-11eb-ab90-d9ae814b240d.png"></p>
<p>为了计算 <code>pow(2, 4)</code>，递归变体经过了下面几个步骤：</p>
<ol>
<li><code>pow(2, 4) = 2 * pow(2, 3)</code></li>
<li><code>pow(2, 3) = 2 * pow(2, 2)</code></li>
<li><code>pow(2, 2) = 2 * pow(2, 1)</code></li>
<li><code>pow(2, 1) = 2</code></li>
</ol>
<p>因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果</p>
<h2 id="二、尾递归"><a href="#二、尾递归" class="headerlink" title="二、尾递归"></a>二、尾递归</h2><p>尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数</p>
<p>尾递归在普通尾调用的基础上，多出了2个特征：</p>
<ul>
<li>在尾部调用的是函数自身</li>
<li>可通过优化，使得计算仅占用常量栈空间</li>
</ul>
<p>在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出</p>
<p>这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生”栈溢出”错误</p>
<p>实现一下阶乘，如果用普通的递归，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>

<p>如果<code>n</code>等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为<code>O(n)</code></p>
<p>如果我们使用尾递归，则如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n, total</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>

<p>可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1)</p>
<h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><p>数组求和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumArray</span>(<span class="params">arr, total</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sum</span>(arr, total + arr.<span class="title function_">pop</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用尾递归优化求斐波那契数列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial2</span> (<span class="params">n, start = <span class="number">1</span>, total = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">factorial2</span> (n -<span class="number">1</span>, total, total + start)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组扁平化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]]</span><br><span class="line"><span class="comment">// 变成</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 具体实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">arr = [], result = []</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(v)) &#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flat</span>(v, []))</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组对象格式化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">D</span>: &#123;</span><br><span class="line">            <span class="attr">E</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化为如下：</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">d</span>: &#123;</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keysLower</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;([A-Z]+)&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = obj[key];</span><br><span class="line">            <span class="keyword">if</span> (reg.<span class="title function_">test</span>(key.<span class="title function_">toString</span>())) &#123;</span><br><span class="line">                <span class="comment">// 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性</span></span><br><span class="line">                temp = obj[key.<span class="title function_">replace</span>(reg, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result.<span class="title function_">toLowerCase</span>()</span><br><span class="line">                &#125;)] = obj[key];</span><br><span class="line">                <span class="comment">// 将之前大写的键属性删除</span></span><br><span class="line">                <span class="keyword">delete</span> obj[key];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果属性是对象或者数组，重新执行函数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> temp === <span class="string">&#x27;object&#x27;</span> || <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(temp) === <span class="string">&#x27;[object Array]&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">keysLower</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8">https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的this指向问题</title>
    <url>/JavaScript/JavaScript-this/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/46c820d0-74b7-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>函数的 <code>this</code> 关键字在 <code>JavaScript</code> 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别</p>
<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值（运行时绑定）</p>
<p><code>this</code> 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当前调用栈是：baz</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置是全局作用域</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;baz&quot;</span> );</span><br><span class="line">    <span class="title function_">bar</span>(); <span class="comment">// &lt;-- bar的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当前调用栈是：baz --&gt; bar</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置在baz中</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;bar&quot;</span> );</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// &lt;-- foo的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当前调用栈是：baz --&gt; bar --&gt; foo</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置在bar中</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;foo&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">// &lt;-- baz的调用位置</span></span><br></pre></td></tr></table></figure>

<p>同时，<code>this</code>在函数执行过程中，<code>this</code>一旦被确定了，就不可以再更改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span> = obj; <span class="comment">// 修改this，运行后会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>





<h2 id="二、绑定规则"><a href="#二、绑定规则" class="headerlink" title="二、绑定规则"></a>二、绑定规则</h2><p>根据不同的使用场合，<code>this</code>有不同的值，主要分为下面几种情况：</p>
<ul>
<li><p>默认绑定</p>
</li>
<li><p>隐式绑定</p>
</li>
<li><p>new绑定</p>
</li>
<li><p>显示绑定</p>
</li>
</ul>
<h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>全局环境中定义<code>person</code>函数，内部使用<code>this</code>关键字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Jenny&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">person</span>());  <span class="comment">//Jenny</span></span><br></pre></td></tr></table></figure>

<p>上述代码输出<code>Jenny</code>，原因是调用函数的对象在游览器中位<code>window</code>，因此<code>this</code>指向<code>window</code>，所以输出<code>Jenny</code></p>
<p>注意：</p>
<p>严格模式下，不能将全局对象用于默认绑定，this会绑定到<code>undefined</code>，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象</p>
<h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>函数还可以作为某个对象的方法调用，这时<code>this</code>就指这个上级对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">m</span> = test;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">m</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，<code>this</code>指向的也只是它上一级的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>:&#123;</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>); <span class="comment">//undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="property">b</span>.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>this</code>的上一级对象为<code>b</code>，<code>b</code>内部并没有<code>a</code>变量的定义，所以输出<code>undefined</code></p>
<p>这里再举一种特殊情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">12</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>); <span class="comment">//undefined</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = o.<span class="property">b</span>.<span class="property">fn</span>;</span><br><span class="line"><span class="title function_">j</span>();</span><br></pre></td></tr></table></figure>

<p>此时<code>this</code>指向的是<code>window</code>，这里的大家需要记住，<code>this</code>永远指向的是最后调用它的对象，虽然<code>fn</code>是对象<code>b</code>的方法，但是<code>fn</code>赋值给<code>j</code>时候并没有执行，所以最终指向<code>window</code></p>
<h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><p>通过构建函数<code>new</code>关键字生成一个实例对象，此时<code>this</code>指向这个实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">　<span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">test</span>();</span><br><span class="line">obj.<span class="property">x</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上述代码之所以能过输出1，是因为<code>new</code>关键字改变了<code>this</code>的指向</p>
<p>这里再列举一些特殊情况：</p>
<p><code>new</code>过程遇到<code>return</code>一个对象，此时<code>this</code>指向为返回的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="string">&#x27;xxx&#x27;</span>;  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">fn</span>();  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">user</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>如果返回一个简单类型的时候，则<code>this</code>指向实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="string">&#x27;xxx&#x27;</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">user</span>); <span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>

<p>注意的是<code>null</code>虽然也是对象，但是此时<code>new</code>仍然指向实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="string">&#x27;xxx&#x27;</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">user</span>); <span class="comment">//xxx</span></span><br></pre></td></tr></table></figure>



<h3 id="显示修改"><a href="#显示修改" class="headerlink" title="显示修改"></a>显示修改</h3><p><code>apply()、call()、bind()</code>是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">m</span> = test;</span><br><span class="line">obj.<span class="property">m</span>.<span class="title function_">apply</span>(obj) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>关于<code>apply、call、bind</code>三者的区别，我们后面再详细说</p>
<h2 id="三、箭头函数"><a href="#三、箭头函数" class="headerlink" title="三、箭头函数"></a>三、箭头函数</h2><p>在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 <code>this</code> 的指向（编译时绑定）</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">sayThis</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">sayThis</span>(); <span class="comment">// window 因为 JavaScript 没有块作用域，所以在定义 sayThis 的时候，里面的 this 就绑到 window 上去了</span></span><br><span class="line"><span class="keyword">const</span> globalSay = obj.<span class="property">sayThis</span>;</span><br><span class="line"><span class="title function_">globalSay</span>(); <span class="comment">// window 浏览器中的 global 对象</span></span><br></pre></td></tr></table></figure>

<p>虽然箭头函数的<code>this</code>能够在编译的时候就确定了<code>this</code>的指向，但也需要注意一些潜在的坑</p>
<p>下面举个例子：</p>
<p>绑定事件监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mngb&#x27;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>) <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;clicked button&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上述可以看到，我们其实是想要<code>this</code>为点击的<code>button</code>，但此时<code>this</code>指向了<code>window</code></p>
<p>包括在原型上添加方法时候，此时<code>this</code>指向<code>window</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>) <span class="comment">//true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;mm&#x27;</span>);</span><br><span class="line">cat.<span class="title function_">sayName</span>()</span><br></pre></td></tr></table></figure>

<p>同样的，箭头函数不能作为构建函数</p>
<h2 id="四、优先级"><a href="#四、优先级" class="headerlink" title="四、优先级"></a>四、优先级</h2><h3 id="隐式绑定-VS-显式绑定"><a href="#隐式绑定-VS-显式绑定" class="headerlink" title="隐式绑定 VS 显式绑定"></a>隐式绑定 VS 显式绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">a</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>( obj2 ); <span class="comment">// 3</span></span><br><span class="line">obj2.<span class="property">foo</span>.<span class="title function_">call</span>( obj1 ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>显然，显示绑定的优先级更高</p>
<h3 id="new绑定-VS-隐式绑定"><a href="#new绑定-VS-隐式绑定" class="headerlink" title="new绑定 VS 隐式绑定"></a>new绑定 VS 隐式绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>( <span class="number">2</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj1.<span class="property">a</span> ); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>( obj2, <span class="number">3</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj2.<span class="property">a</span> ); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj1.<span class="title function_">foo</span>( <span class="number">4</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj1.<span class="property">a</span> ); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( bar.<span class="property">a</span> ); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p>可以看到，new绑定的优先级<code>&gt;</code>隐式绑定</p>
<h3 id="new绑定-VS-显式绑定"><a href="#new绑定-VS-显式绑定" class="headerlink" title="new绑定 VS 显式绑定"></a><code>new</code>绑定 VS 显式绑定</h3><p>因为<code>new</code>和<code>apply、call</code>无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>( obj1 );</span><br><span class="line"><span class="title function_">bar</span>( <span class="number">2</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj1.<span class="property">a</span> ); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="title function_">bar</span>( <span class="number">3</span> );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj1.<span class="property">a</span> ); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( baz.<span class="property">a</span> ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><code>bar</code>被绑定到obj1上，但是<code>new bar(3)</code> 并没有像我们预计的那样把<code>obj1.a</code>修改为3。但是，<code>new</code>修改了绑定调用<code>bar()</code>中的<code>this</code></p>
<p>我们可认为<code>new</code>绑定优先级<code>&gt;</code>显式绑定</p>
<p>综上，new绑定优先级 &gt; 显示绑定优先级 &gt; 隐式绑定优先级 &gt; 默认绑定优先级</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>说说JavaScript中的类型转换机制</title>
    <url>/JavaScript/JavaScript-type-conversion/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/2abd00a0-6692-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>前面我们讲到，<code>JS </code>中有六种简单数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code>、<code>symbol</code>，以及引用类型：<code>object</code></p>
<p>但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = y ? <span class="number">1</span> : a;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>x</code>的值在编译阶段是无法获取的，只有等到程序运行时才能知道</p>
<p>虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制</p>
<p>常见的类型转换有：</p>
<ul>
<li>强制转换（显示转换）</li>
<li>自动转换（隐式转换）</li>
</ul>
<h2 id="二、显示转换"><a href="#二、显示转换" class="headerlink" title="二、显示转换"></a>二、显示转换</h2><p>显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有：</p>
<ul>
<li>Number()</li>
<li>parseInt()</li>
<li>String()</li>
<li>Boolean()</li>
</ul>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h3><p>将任意类型的值转化为数值</p>
<p>先给出类型转换规则：</p>
<p> <img src="https://static.vue-js.com/915b7300-6692-11eb-ab90-d9ae814b240d.png"></p>
<p>实践一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="number">324</span>) <span class="comment">// 324</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串：如果可以被解析为数值，则转换为相应的数值</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;324&#x27;</span>) <span class="comment">// 324</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串：如果不可以被解析为数值，返回 NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;324abc&#x27;</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空字符串转为0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值：true 转成 1，false 转成 0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">false</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined：转成 NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null：转成0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象：通常转换成NaN(除了只包含单个数值的数组)</span></span><br><span class="line"><span class="title class_">Number</span>(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;) <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">5</span>]) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看到，<code>Number</code>转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code></p>
<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h3><p><code>parseInt</code>相比<code>Number</code>，就没那么严格了，<code>parseInt</code>函数逐个解析字符，遇到不能转换的字符就停下来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;32a3&#x27;</span>) <span class="comment">//32</span></span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><p>可以将任意类型的值转化成字符串</p>
<p>给出转换规则图：</p>
<p>   <img src="https://static.vue-js.com/48dd8eb0-6692-11eb-85f6-6fac77c0c9b3.png"></p>
<p>实践一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数值：转为相应的字符串</span></span><br><span class="line"><span class="title class_">String</span>(<span class="number">1</span>) <span class="comment">// &quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串：转换后还是原来的值</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// &quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔值：true转为字符串&quot;true&quot;，false转为字符串&quot;false&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>) <span class="comment">// &quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined：转为字符串&quot;undefined&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//null：转为字符串&quot;null&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>) <span class="comment">// &quot;null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="title class_">String</span>(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;) <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">String</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// &quot;1,2,3&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><p>可以将任意类型的值转为布尔值，转换规则如下：</p>
<p> <img src="https://static.vue-js.com/53bdad10-6692-11eb-ab90-d9ae814b240d.png"></p>
<p>实践一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="三、隐式转换"><a href="#三、隐式转换" class="headerlink" title="三、隐式转换"></a>三、隐式转换</h2><p>在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？</p>
<p>我们这里可以归纳为两种情况发生隐式转换的场景：</p>
<ul>
<li>比较运算（<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>）、<code>if</code>、<code>while</code>需要布尔值地方</li>
<li>算术运算（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>）</li>
</ul>
<p>除了上面的场景，还要求运算符两边的操作数不是同一类型</p>
<h3 id="自动转换为布尔值"><a href="#自动转换为布尔值" class="headerlink" title="自动转换为布尔值"></a>自动转换为布尔值</h3><p>在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用<code>Boolean</code>函数</p>
<p>可以得出个小结：</p>
<ul>
<li>undefined </li>
<li>null </li>
<li>false </li>
<li>+0 </li>
<li>-0</li>
<li>NaN</li>
<li>“”</li>
</ul>
<p>除了上面几种会被转化成<code>false</code>，其他都换被转化成<code>true</code></p>
<h3 id="自动转换成字符串"><a href="#自动转换成字符串" class="headerlink" title="自动转换成字符串"></a>自动转换成字符串</h3><p>遇到预期为字符串的地方，就会将非字符串的值自动转为字符串</p>
<p>具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串</p>
<p>常发生在<code>+</code>运算中，一旦存在字符串，则会进行字符串拼接操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="number">1</span> <span class="comment">// &#x27;51&#x27;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="literal">true</span> <span class="comment">// &quot;5true&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="literal">false</span> <span class="comment">// &quot;5false&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + &#123;&#125; <span class="comment">// &quot;5[object Object]&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + [] <span class="comment">// &quot;5&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125; <span class="comment">// &quot;5function ()&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="literal">undefined</span> <span class="comment">// &quot;5undefined&quot;</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> + <span class="literal">null</span> <span class="comment">// &quot;5null&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="自动转换成数值"><a href="#自动转换成数值" class="headerlink" title="自动转换成数值"></a>自动转换成数值</h3><p>除了<code>+</code>有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;5&#x27;</span> - <span class="string">&#x27;2&#x27;</span> <span class="comment">// 3</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> * <span class="string">&#x27;2&#x27;</span> <span class="comment">// 10</span></span><br><span class="line"><span class="literal">true</span> - <span class="number">1</span>  <span class="comment">// 0</span></span><br><span class="line"><span class="literal">false</span> - <span class="number">1</span> <span class="comment">// -1</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> - <span class="number">1</span>   <span class="comment">// 0</span></span><br><span class="line"><span class="string">&#x27;5&#x27;</span> * []    <span class="comment">// 0</span></span><br><span class="line"><span class="literal">false</span> / <span class="string">&#x27;5&#x27;</span> <span class="comment">// 0</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span> - <span class="number">1</span>   <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">null</span> + <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="number">1</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<p><code>null</code>转为数值时，值为<code>0</code> 。<code>undefined</code>转为数值时，值为<code>NaN</code></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何判断一个元素是否在可视区域中？</title>
    <url>/JavaScript/JavaScript-visible/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/d848c790-8a05-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、用途"><a href="#一、用途" class="headerlink" title="一、用途"></a>一、用途</h2><p>可视区域即我们浏览网页的设备肉眼可见的区域，如下图</p>
<p> <img src="https://static.vue-js.com/9c5bbb10-8a56-11eb-85f6-6fac77c0c9b3.png"></p>
<p>在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如：</p>
<ul>
<li>图片的懒加载</li>
<li>列表的无限滚动</li>
<li>计算广告元素的曝光情况</li>
<li>可点击链接的预加载</li>
</ul>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>判断一个元素是否在可视区域，我们常用的有三种办法：</p>
<ul>
<li><p>offsetTop、scrollTop</p>
</li>
<li><p>getBoundingClientRect </p>
</li>
<li><p>Intersection Observer</p>
</li>
</ul>
<h3 id="offsetTop、scrollTop"><a href="#offsetTop、scrollTop" class="headerlink" title="offsetTop、scrollTop"></a>offsetTop、scrollTop</h3><p><code>offsetTop</code>，元素的上外边框至包含元素的上内边框之间的像素距离，其他<code>offset</code>属性如下图所示：</p>
<p> <img src="https://static.vue-js.com/b4b63ca0-8a54-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面再来了解下<code>clientWidth</code>、<code>clientHeight</code>：</p>
<ul>
<li><code>clientWidth</code>：元素内容区宽度加上左右内边距宽度，即<code>clientWidth = content + padding</code></li>
<li><code>clientHeight</code>：元素内容区高度加上上下内边距高度，即<code>clientHeight = content + padding</code></li>
</ul>
<p>这里可以看到<code>client</code>元素都不包括外边距</p>
<p>最后，关于<code>scroll</code>系列的属性如下：</p>
<ul>
<li><p><code>scrollWidth</code> 和 <code>scrollHeight</code> 主要用于确定元素内容的实际大小</p>
</li>
<li><p><code>scrollLeft</code> 和 <code>scrollTop</code> 属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置</p>
</li>
<li><ul>
<li>垂直滚动 <code>scrollTop &gt; 0</code></li>
<li>水平滚动 <code>scrollLeft &gt; 0</code></li>
</ul>
</li>
<li><p>将元素的 <code>scrollLeft</code> 和 <code>scrollTop</code> 设置为 0，可以重置元素的滚动位置</p>
</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>上述属性都是只读的，每次访问都要重新开始</li>
</ul>
<p>下面再看看如何实现判断：</p>
<p>公式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">el.<span class="property">offsetTop</span> - <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> &lt;= viewPortHeight</span><br></pre></td></tr></table></figure>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isInViewPortOfOne</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// viewPortHeight 兼容所有浏览器写法</span></span><br><span class="line">    <span class="keyword">const</span> viewPortHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> </span><br><span class="line">    <span class="keyword">const</span> offsetTop = el.<span class="property">offsetTop</span></span><br><span class="line">    <span class="keyword">const</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="keyword">const</span> top = offsetTop - scrollTop</span><br><span class="line">    <span class="keyword">return</span> top &lt;= viewPortHeight</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><p>返回值是一个 <code>DOMRect</code>对象，拥有<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>x</code>, <code>y</code>, <code>width</code>, 和 <code>height</code>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.target&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> clientRect = target.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clientRect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   bottom: 556.21875,</span></span><br><span class="line"><span class="comment">//   height: 393.59375,</span></span><br><span class="line"><span class="comment">//   left: 333,</span></span><br><span class="line"><span class="comment">//   right: 1017,</span></span><br><span class="line"><span class="comment">//   top: 162.625,</span></span><br><span class="line"><span class="comment">//   width: 684</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>属性对应的关系图如下所示：</p>
<p> <img src="https://static.vue-js.com/e34ac5d0-8a05-11eb-85f6-6fac77c0c9b3.png"></p>
<p>当页面发生滚动的时候，<code>top</code>与<code>left</code>属性值都会随之改变</p>
<p>如果一个元素在视窗之内的话，那么它一定满足下面四个条件：</p>
<ul>
<li>top 大于等于 0</li>
<li>left 大于等于 0</li>
<li>bottom 小于等于视窗高度</li>
<li>right 小于等于视窗宽度</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isInViewPort</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> viewWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">  <span class="keyword">const</span> viewHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    top,</span><br><span class="line">    right,</span><br><span class="line">    bottom,</span><br><span class="line">    left,</span><br><span class="line">  &#125; = element.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    top &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">    left &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">    right &lt;= viewWidth &amp;&amp;</span><br><span class="line">    bottom &lt;= viewHeight</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Intersection-Observer"><a href="#Intersection-Observer" class="headerlink" title="Intersection Observer"></a>Intersection Observer</h3><p><code>Intersection Observer</code> 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比<code>getBoundingClientRect </code>会好很多</p>
<p>使用步骤主要分为两步：创建观察者和传入被观察者</p>
<h4 id="创建观察者"><a href="#创建观察者" class="headerlink" title="创建观察者"></a>创建观察者</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="comment">// 表示重叠面积占被观察者的比例，从 0 - 1 取值，</span></span><br><span class="line">  <span class="comment">// 1 表示完全被包含</span></span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">1.0</span>, </span><br><span class="line">  <span class="attr">root</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#scrollArea&#x27;</span>) <span class="comment">// 必须是目标元素的父级元素</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries, observer</span>) =&gt; &#123; ....&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback, options);</span><br></pre></td></tr></table></figure>

<p>通过<code>new IntersectionObserver</code>创建了观察者 <code>observer</code>，传入的参数 <code>callback</code> 在重叠比例超过 <code>threshold</code> 时会被执行&#96;</p>
<p>关于<code>callback</code>回调函数常用属性如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上段代码中被省略的 callback</span></span><br><span class="line"><span class="keyword">const</span> callback = <span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123; </span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        entry.<span class="property">time</span>;               <span class="comment">// 触发的时间</span></span><br><span class="line">        entry.<span class="property">rootBounds</span>;         <span class="comment">// 根元素的位置矩形，这种情况下为视窗位置</span></span><br><span class="line">        entry.<span class="property">boundingClientRect</span>; <span class="comment">// 被观察者的位置举行</span></span><br><span class="line">        entry.<span class="property">intersectionRect</span>;   <span class="comment">// 重叠区域的位置矩形</span></span><br><span class="line">        entry.<span class="property">intersectionRatio</span>;  <span class="comment">// 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算）</span></span><br><span class="line">        entry.<span class="property">target</span>;             <span class="comment">// 被观察者</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="传入被观察者"><a href="#传入被观察者" class="headerlink" title="传入被观察者"></a>传入被观察者</h4><p>通过 <code>observer.observe(target)</code> 这一行代码即可简单的注册被观察者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.target&#x27;</span>);</span><br><span class="line">observer.<span class="title function_">observe</span>(target);</span><br></pre></td></tr></table></figure>



<h3 id="三、案例分析"><a href="#三、案例分析" class="headerlink" title="三、案例分析"></a>三、案例分析</h3><p>实现：创建了一个十万个节点的长列表，当节点滚入到视窗中时，背景就会从红色变为黄色</p>
<p><code>Html</code>结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>css</code>样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.target</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>往<code>container</code>插入1000个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $container = $(<span class="string">&quot;.container&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入 100000 个 &lt;div class=&quot;target&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTargets</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> htmlString = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100000</span>)</span><br><span class="line">    .<span class="title function_">fill</span>(<span class="string">&#x27;&lt;div class=&quot;target&quot;&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  $container.<span class="title function_">html</span>(htmlString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，首先使用<code>getBoundingClientRect </code>方法进行判断元素是否在可视区域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isInViewPort</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> viewWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">    <span class="keyword">const</span> viewHeight =</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; top, right, bottom, left &#125; = element.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; right &lt;= viewWidth &amp;&amp; bottom &lt;= viewHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后开始监听<code>scroll</code>事件，判断页面上哪些元素在可视区域中，如果在可视区域中则将背景颜色设置为<code>yellow</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&quot;scroll&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;scroll !&quot;</span>);</span><br><span class="line">    $targets.<span class="title function_">each</span>(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isInViewPort</span>(element)) &#123;</span><br><span class="line">            $(element).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过上述方式，可以看到可视区域颜色会变成黄色了，但是可以明显看到有卡顿的现象，原因在于我们绑定了<code>scroll</code>事件，<code>scroll</code>事件伴随了大量的计算，会造成资源方面的浪费</p>
<p>下面通过<code>Intersection Observer</code>的形式同样实现相同的功能</p>
<p>首先创建一个观察者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(getYellow, &#123; <span class="attr">threshold</span>: <span class="number">1.0</span> &#125;);</span><br></pre></td></tr></table></figure>

<p><code>getYellow</code>回调函数实现对背景颜色改变，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getYellow</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        $(entry.<span class="property">target</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后传入观察者，即<code>.target</code>元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$targets.<span class="title function_">each</span>(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">    observer.<span class="title function_">observe</span>(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以看到功能同样完成，并且页面不会出现卡顿的情况</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>typeof 与 instanceof 区别</title>
    <url>/JavaScript/JavaScript-typeof-instanceof/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/3fc158f0-7710-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、typeof"><a href="#一、typeof" class="headerlink" title="一、typeof"></a>一、typeof</h2><p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型</p>
<p>使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand</span><br><span class="line"><span class="title function_">typeof</span>(operand)</span><br></pre></td></tr></table></figure>

<p><code>operand</code>表示对象或原始值的表达式，其类型将被返回</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>() <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">log</span> <span class="comment">// &#x27;function&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面例子，前6个都是基础数据类型。虽然<code>typeof null</code>为<code>object</code>，但这只是<code> JavaScript</code> 存在的一个悠久 <code>Bug</code>，不代表<code>null </code>就是引用数据类型，并且<code>null </code>本身也不是对象</p>
<p>所以，<code>null </code>在 <code>typeof </code>之后返回的是有问题的结果，不能作为判断<code>null</code>的方法。如果你需要在 <code>if</code> 语句中判断是否为 <code>null</code>，直接通过<code>===null</code>来判断就好</p>
<p>同时，可以发现引用类型数据，用<code>typeof</code>来判断的话，除了<code>function</code>会被识别出来之外，其余的都输出<code>object</code></p>
<p>如果我们想要判断一个变量是否存在，可以使用<code>typeof</code>：(不能使用<code>if(a)</code>， 若<code>a</code>未声明，则报错)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> a != <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//变量存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、instanceof"><a href="#二、instanceof" class="headerlink" title="二、instanceof"></a>二、instanceof</h2><p><code>instanceof</code> 运算符用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p>
<p>使用如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure>

<p><code>object</code>为实例对象，<code>constructor</code>为构造函数</p>
<p>构造函数通过<code>new</code>可以实例对象，<code>instanceof </code>能判断这个对象是否是之前那个构造函数生成的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义构建函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Car</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> benz = <span class="keyword">new</span> <span class="title class_">Car</span>()</span><br><span class="line">benz <span class="keyword">instanceof</span> <span class="title class_">Car</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">car <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>关于<code>instanceof</code>的实现原理，可以参考下面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;                  </span><br><span class="line">        <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(proto === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到相同原型对象，返回true</span></span><br><span class="line">        proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是顺着原型链去找，直到找到相同的原型对象，返回<code>true</code>，否则为<code>false</code></p>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p><code>typeof</code>与<code>instanceof</code>都是判断数据类型的方法，区别如下：</p>
<ul>
<li><p><code>typeof</code>会返回一个变量的基本类型，<code>instanceof</code>返回的是一个布尔值</p>
</li>
<li><p><code>instanceof</code> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</p>
</li>
<li><p>而<code> typeof</code> 也存在弊端，它虽然可以判断基础数据类型（<code>null</code> 除外），但是引用数据类型中，除了<code> function</code> 类型以外，其他的也无法判断</p>
</li>
</ul>
<p>可以看到，上述两种方法都有弊端，并不能满足所有场景的需求</p>
<p>如果需要通用检测数据类型，可以采用<code>Object.prototype.toString</code>，调用该方法，统一返回格式<code>“[object Xxx]” </code>的字符串</p>
<p>如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(&#123;&#125;)       <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)  <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)    <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>)  <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)  <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>)   <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="regexp">/123/g</span>)    <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])       <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>)  <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>)   <span class="comment">//&quot;[object Window]&quot;</span></span><br></pre></td></tr></table></figure>

<p>了解了<code>toString</code>的基本用法，下面就实现一个全局通用的数据类型判断方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> type  = <span class="keyword">typeof</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span>) &#123;    <span class="comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">replace</span>(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getType</span>([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="variable language_">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line"><span class="title function_">getType</span>()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line"><span class="title function_">getType</span>(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Babel Runtime 面试题解答指南</title>
    <url>/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/engine-babel-runtime/</url>
    <content><![CDATA[<h1 id="Babel-Runtime-面试题解答指南"><a href="#Babel-Runtime-面试题解答指南" class="headerlink" title="Babel Runtime 面试题解答指南"></a>Babel Runtime 面试题解答指南</h1><h2 id="核心要点"><a href="#核心要点" class="headerlink" title="核心要点"></a>核心要点</h2><p>Babel Runtime 的主要作用可以从以下几个方面来回答：</p>
<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>Babel Runtime 是一个包含 Babel 模块化运行时助手和 regenerator-runtime 的库。它主要用于：</p>
<ul>
<li>避免重复注入辅助代码</li>
<li>提供 polyfill 功能</li>
<li>确保代码在不同环境中的兼容性</li>
</ul>
<h3 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2. 主要功能"></a>2. 主要功能</h3><ol>
<li><p><strong>复用辅助函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用 @babel/runtime 时，每个文件都会注入辅助函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 @babel/runtime 后，会从 @babel/runtime 中引入</span></span><br><span class="line"><span class="keyword">import</span> _classCallCheck <span class="keyword">from</span> <span class="string">&quot;@babel/runtime/helpers/classCallCheck&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提供 regenerator-runtime</strong></p>
</li>
</ol>
<ul>
<li>支持 async&#x2F;await 和 Generator 函数的运行环境</li>
<li>避免污染全局作用域</li>
</ul>
<h3 id="3-与-babel-plugin-transform-runtime-的关系"><a href="#3-与-babel-plugin-transform-runtime-的关系" class="headerlink" title="3. 与 @babel&#x2F;plugin-transform-runtime 的关系"></a>3. 与 @babel&#x2F;plugin-transform-runtime 的关系</h3><p>需要强调：</p>
<ul>
<li>@babel&#x2F;runtime 是运行时依赖</li>
<li>@babel&#x2F;plugin-transform-runtime 是开发时依赖</li>
<li>两者通常配合使用</li>
</ul>
<h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 @babel/runtime 前</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;example&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 @babel/runtime 后</span></span><br><span class="line"><span class="keyword">import</span> _classCallCheck <span class="keyword">from</span> <span class="string">&quot;@babel/runtime/helpers/classCallCheck&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> _defineProperty <span class="keyword">from</span> <span class="string">&quot;@babel/runtime/helpers/defineProperty&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Example</span> = <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Example</span>);</span><br><span class="line">  <span class="title function_">_defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&#x27;example&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="面试答题技巧"><a href="#面试答题技巧" class="headerlink" title="面试答题技巧"></a>面试答题技巧</h2><ol>
<li><p><strong>先说作用</strong>：</p>
<ul>
<li>首先说明它是用于优化 Babel 编译结果的运行时库</li>
<li>强调其解决的核心问题：避免重复注入和全局污染</li>
</ul>
</li>
<li><p><strong>再说原理</strong>：</p>
<ul>
<li>解释它如何通过模块化方式引入辅助函数</li>
<li>说明它与 plugin-transform-runtime 的配合使用</li>
</ul>
</li>
<li><p><strong>最后举例</strong>：</p>
<ul>
<li>可以用上面的代码示例来说明具体的转换过程</li>
<li>展示使用前后的代码对比</li>
</ul>
</li>
</ol>
<h2 id="补充要点"><a href="#补充要点" class="headerlink" title="补充要点"></a>补充要点</h2><ol>
<li><p><strong>性能优化</strong>：</p>
<ul>
<li>减少打包体积</li>
<li>提高代码复用性</li>
<li>避免全局污染</li>
</ul>
</li>
<li><p><strong>使用场景</strong>：</p>
<ul>
<li>开发第三方库时推荐使用</li>
<li>大型应用开发时可以考虑使用</li>
</ul>
</li>
<li><p><strong>注意事项</strong>：</p>
<ul>
<li>需要安装为生产依赖（dependencies）</li>
<li>配置时需要注意与其他 Babel 插件的关系</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回答这个问题时，建议按照以下结构：</p>
<ol>
<li>简述 Babel Runtime 的基本概念</li>
<li>说明其主要作用和解决的问题</li>
<li>解释其工作原理</li>
<li>提供具体的代码示例</li>
<li>补充使用注意事项</li>
</ol>
<p>这样的回答既展示了你的技术深度，又能体现出你对工程化实践的理解。记住，面试官不仅想听到你知道什么，更想听到你理解为什么，以及在实际工作中如何应用这些知识。</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端监控体系的搭建经验</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%9B%91%E6%8E%A7/engine-frontend-monitor/</url>
    <content><![CDATA[<h2 id="一、监控维度"><a href="#一、监控维度" class="headerlink" title="一、监控维度"></a>一、监控维度</h2><p>前端监控体系主要包含以下维度：</p>
<ol>
<li>性能监控</li>
<li>错误监控</li>
<li>用户行为监控</li>
<li>业务监控</li>
<li>资源监控</li>
</ol>
<h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><h3 id="1-性能监控"><a href="#1-性能监控" class="headerlink" title="1. 性能监控"></a>1. 性能监控</h3><h4 id="1-1-核心指标采集"><a href="#1-1-核心指标采集" class="headerlink" title="1.1 核心指标采集"></a>1.1 核心指标采集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span> = &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initObservers</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initObservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// FCP 监控</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">fcp</span> = entries[<span class="number">0</span>].<span class="property">startTime</span></span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;paint&#x27;</span>] &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// LCP 监控</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">lcp</span> = entries[entries.<span class="property">length</span> - <span class="number">1</span>].<span class="property">startTime</span></span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;largest-contentful-paint&#x27;</span>] &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// FID 监控</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">fid</span> = entries[<span class="number">0</span>].<span class="property">processingStart</span> - entries[<span class="number">0</span>].<span class="property">startTime</span></span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;first-input&#x27;</span>] &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取性能指标</span></span><br><span class="line">  <span class="title function_">getMetrics</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> navigationTiming = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;navigation&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...<span class="variable language_">this</span>.<span class="property">metrics</span>,</span><br><span class="line">      <span class="comment">// DNS 解析时间</span></span><br><span class="line">      <span class="attr">dns</span>: navigationTiming.<span class="property">domainLookupEnd</span> - navigationTiming.<span class="property">domainLookupStart</span>,</span><br><span class="line">      <span class="comment">// TCP 连接时间</span></span><br><span class="line">      <span class="attr">tcp</span>: navigationTiming.<span class="property">connectEnd</span> - navigationTiming.<span class="property">connectStart</span>,</span><br><span class="line">      <span class="comment">// 首字节时间</span></span><br><span class="line">      <span class="attr">ttfb</span>: navigationTiming.<span class="property">responseStart</span> - navigationTiming.<span class="property">requestStart</span>,</span><br><span class="line">      <span class="comment">// DOM 解析时间</span></span><br><span class="line">      <span class="attr">domParse</span>: navigationTiming.<span class="property">domInteractive</span> - navigationTiming.<span class="property">responseEnd</span>,</span><br><span class="line">      <span class="comment">// 资源加载时间</span></span><br><span class="line">      <span class="attr">resourceLoad</span>: navigationTiming.<span class="property">loadEventStart</span> - navigationTiming.<span class="property">domContentLoadedEventEnd</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-资源性能监控"><a href="#1-2-资源性能监控" class="headerlink" title="1.2 资源性能监控"></a>1.2 资源性能监控</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resources</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initObserver</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initObserver</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>()</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">recordResource</span>(entry)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;resource&#x27;</span>] &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">recordResource</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> metrics = &#123;</span><br><span class="line">      <span class="attr">name</span>: entry.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">type</span>: entry.<span class="property">initiatorType</span>,</span><br><span class="line">      <span class="attr">duration</span>: entry.<span class="property">duration</span>,</span><br><span class="line">      <span class="attr">size</span>: entry.<span class="property">transferSize</span>,</span><br><span class="line">      <span class="attr">protocol</span>: entry.<span class="property">nextHopProtocol</span>,</span><br><span class="line">      <span class="comment">// 资源时序信息</span></span><br><span class="line">      <span class="attr">timing</span>: &#123;</span><br><span class="line">        <span class="attr">dns</span>: entry.<span class="property">domainLookupEnd</span> - entry.<span class="property">domainLookupStart</span>,</span><br><span class="line">        <span class="attr">tcp</span>: entry.<span class="property">connectEnd</span> - entry.<span class="property">connectStart</span>,</span><br><span class="line">        <span class="attr">ttfb</span>: entry.<span class="property">responseStart</span> - entry.<span class="property">requestStart</span>,</span><br><span class="line">        <span class="attr">download</span>: entry.<span class="property">responseEnd</span> - entry.<span class="property">responseStart</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">set</span>(entry.<span class="property">name</span>, metrics)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getSlowResources</span>(<span class="params">threshold = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> slowResources = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resources</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">metrics, url</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (metrics.<span class="property">duration</span> &gt; threshold) &#123;</span><br><span class="line">        slowResources.<span class="title function_">push</span>(&#123; url, ...metrics &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> slowResources</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-错误监控"><a href="#2-错误监控" class="headerlink" title="2. 错误监控"></a>2. 错误监控</h3><h4 id="2-1-全局错误捕获"><a href="#2-1-全局错误捕获" class="headerlink" title="2.1 全局错误捕获"></a>2.1 全局错误捕获</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">      <span class="attr">maxErrors</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">sampling</span>: <span class="number">1</span> <span class="comment">// 采样率</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initHandlers</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// JS 运行时错误</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleError</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;runtime&#x27;</span>,</span><br><span class="line">        <span class="attr">error</span>: event.<span class="property">error</span>,</span><br><span class="line">        <span class="attr">message</span>: event.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">filename</span>: event.<span class="property">filename</span>,</span><br><span class="line">        <span class="attr">line</span>: event.<span class="property">lineno</span>,</span><br><span class="line">        <span class="attr">column</span>: event.<span class="property">colno</span>,</span><br><span class="line">        <span class="attr">stack</span>: event.<span class="property">error</span>?.<span class="property">stack</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Promise 未捕获错误</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleError</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;promise&#x27;</span>,</span><br><span class="line">        <span class="attr">error</span>: event.<span class="property">reason</span>,</span><br><span class="line">        <span class="attr">message</span>: event.<span class="property">reason</span>?.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">stack</span>: event.<span class="property">reason</span>?.<span class="property">stack</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 资源加载错误</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">target</span> &amp;&amp; (event.<span class="property">target</span>.<span class="property">src</span> || event.<span class="property">target</span>.<span class="property">href</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleError</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;resource&#x27;</span>,</span><br><span class="line">          <span class="attr">url</span>: event.<span class="property">target</span>.<span class="property">src</span> || event.<span class="property">target</span>.<span class="property">href</span>,</span><br><span class="line">          <span class="attr">tagName</span>: event.<span class="property">target</span>.<span class="property">tagName</span>,</span><br><span class="line">          <span class="attr">html</span>: event.<span class="property">target</span>.<span class="property">outerHTML</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 采样处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">sampling</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误数量限制</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">errors</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">maxErrors</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errors</span>.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> errorInfo = &#123;</span><br><span class="line">      ...error,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>,</span><br><span class="line">      <span class="attr">userAgent</span>: navigator.<span class="property">userAgent</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span>.<span class="title function_">push</span>(errorInfo)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reportError</span>(errorInfo)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reportError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/errors&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report error:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-用户行为监控"><a href="#3-用户行为监控" class="headerlink" title="3. 用户行为监控"></a>3. 用户行为监控</h3><h4 id="3-1-行为采集"><a href="#3-1-行为采集" class="headerlink" title="3.1 行为采集"></a>3.1 行为采集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BehaviorMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">      <span class="attr">maxEvents</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="comment">// 行为类型配置</span></span><br><span class="line">      <span class="attr">behaviorTypes</span>: &#123;</span><br><span class="line">        <span class="attr">CLICK</span>: <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">        <span class="attr">INPUT</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        <span class="attr">ROUTE</span>: <span class="string">&#x27;route&#x27;</span>,</span><br><span class="line">        <span class="attr">API</span>: <span class="string">&#x27;api&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initTrackers</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initTrackers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 点击行为追踪</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">trackEvent</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">behaviorTypes</span>.<span class="property">CLICK</span>,</span><br><span class="line">        <span class="attr">element</span>: target.<span class="property">tagName</span>,</span><br><span class="line">        <span class="attr">content</span>: target.<span class="property">textContent</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="variable language_">this</span>.<span class="title function_">getElementPath</span>(target)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入行为追踪</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">debounce</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line">      <span class="keyword">if</span> (target.<span class="property">tagName</span> === <span class="string">&#x27;INPUT&#x27;</span> || target.<span class="property">tagName</span> === <span class="string">&#x27;TEXTAREA&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">trackEvent</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">behaviorTypes</span>.<span class="property">INPUT</span>,</span><br><span class="line">          <span class="attr">element</span>: target.<span class="property">tagName</span>,</span><br><span class="line">          <span class="attr">name</span>: target.<span class="property">name</span> || target.<span class="property">id</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>), <span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 路由变化追踪</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">trackRouteChange</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取元素路径</span></span><br><span class="line">  <span class="title function_">getElementPath</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> path = []</span><br><span class="line">    <span class="keyword">while</span> (element &amp;&amp; element.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">ELEMENT_NODE</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> selector = element.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>()</span><br><span class="line">      <span class="keyword">if</span> (element.<span class="property">id</span>) &#123;</span><br><span class="line">        selector += <span class="string">`#<span class="subst">$&#123;element.id&#125;</span>`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">className</span>) &#123;</span><br><span class="line">        selector += <span class="string">`.<span class="subst">$&#123;element.className.split(<span class="string">&#x27; &#x27;</span>).join(<span class="string">&#x27;.&#x27;</span>)&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      path.<span class="title function_">unshift</span>(selector)</span><br><span class="line">      element = element.<span class="property">parentNode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(<span class="string">&#x27; &gt; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 路由变化追踪</span></span><br><span class="line">  <span class="title function_">trackRouteChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// History API</span></span><br><span class="line">    <span class="keyword">const</span> originalPushState = <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      originalPushState.<span class="title function_">apply</span>(<span class="variable language_">window</span>.<span class="property">history</span>, args)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleUrlChange</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听 popstate 事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleUrlChange</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleUrlChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">trackEvent</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">behaviorTypes</span>.<span class="property">ROUTE</span>,</span><br><span class="line">      <span class="attr">from</span>: lastUrl,</span><br><span class="line">      <span class="attr">to</span>: currentUrl</span><br><span class="line">    &#125;)</span><br><span class="line">    lastUrl = currentUrl</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 防抖函数</span></span><br><span class="line">  <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">trackEvent</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> eventInfo = &#123;</span><br><span class="line">      ...event,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>,</span><br><span class="line">      <span class="attr">userAgent</span>: navigator.<span class="property">userAgent</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">push</span>(eventInfo)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>.<span class="property">length</span> &gt; <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">maxEvents</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reportEvent</span>(eventInfo)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reportEvent</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/events&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(event)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report event:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-业务监控"><a href="#4-业务监控" class="headerlink" title="4. 业务监控"></a>4. 业务监控</h3><h4 id="4-1-API-监控"><a href="#4-1-API-监控" class="headerlink" title="4.1 API 监控"></a>4.1 API 监控</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">APIMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">requests</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initInterceptor</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initInterceptor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 拦截 XMLHttpRequest</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">interceptXHR</span>()</span><br><span class="line">    <span class="comment">// 拦截 Fetch</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">interceptFetch</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">interceptXHR</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalXHR = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title function_">originalXHR</span>()</span><br><span class="line">      <span class="keyword">const</span> originalOpen = xhr.<span class="property">open</span></span><br><span class="line">      <span class="keyword">const</span> originalSend = xhr.<span class="property">send</span></span><br><span class="line">      </span><br><span class="line">      xhr.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [method, url] = args</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_url</span> = url</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_method</span> = method</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        originalOpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      xhr.<span class="property">send</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          self.<span class="title function_">handleRequest</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">_url</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="variable language_">this</span>.<span class="property">_method</span>,</span><br><span class="line">            <span class="attr">status</span>: <span class="variable language_">this</span>.<span class="property">status</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">_startTime</span>,</span><br><span class="line">            <span class="attr">requestData</span>: data,</span><br><span class="line">            <span class="attr">responseData</span>: <span class="variable language_">this</span>.<span class="property">responseText</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        originalSend.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> xhr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">interceptFetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalFetch = <span class="variable language_">window</span>.<span class="property">fetch</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">fetch</span> = <span class="keyword">function</span>(<span class="params">url, options = &#123;&#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">originalFetch</span>(url, options)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="title function_">async</span> (response) =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> duration = <span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime</span><br><span class="line">          <span class="keyword">const</span> clonedResponse = response.<span class="title function_">clone</span>()</span><br><span class="line">          <span class="keyword">const</span> responseData = <span class="keyword">await</span> clonedResponse.<span class="title function_">text</span>()</span><br><span class="line">          </span><br><span class="line">          self.<span class="title function_">handleRequest</span>(&#123;</span><br><span class="line">            url,</span><br><span class="line">            <span class="attr">method</span>: options.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">status</span>: response.<span class="property">status</span>,</span><br><span class="line">            duration,</span><br><span class="line">            <span class="attr">requestData</span>: options.<span class="property">body</span>,</span><br><span class="line">            responseData</span><br><span class="line">          &#125;)</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleRequest</span>(<span class="params">requestInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// 记录请求信息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">requests</span>.<span class="title function_">set</span>(requestInfo.<span class="property">url</span>, requestInfo)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">analyzeRequest</span>(requestInfo)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">analyzeRequest</span>(<span class="params">requestInfo</span>) &#123;</span><br><span class="line">    <span class="comment">// 慢请求检测</span></span><br><span class="line">    <span class="keyword">if</span> (requestInfo.<span class="property">duration</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reportSlowAPI</span>(requestInfo)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误请求检测</span></span><br><span class="line">    <span class="keyword">if</span> (requestInfo.<span class="property">status</span> &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reportErrorAPI</span>(requestInfo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reportSlowAPI</span>(<span class="params">requestInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/slow-requests&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestInfo)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report slow API:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reportErrorAPI</span>(<span class="params">requestInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/error-requests&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestInfo)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report error API:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、数据上报"><a href="#三、数据上报" class="headerlink" title="三、数据上报"></a>三、数据上报</h2><h3 id="1-数据上报策略"><a href="#1-数据上报策略" class="headerlink" title="1. 数据上报策略"></a>1. 数据上报策略</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Reporter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/collect&#x27;</span>,</span><br><span class="line">      <span class="attr">batchSize</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">flushInterval</span>: <span class="number">5000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">startTimer</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">add</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      ...data,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">batchSize</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">flush</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">startTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">flush</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">flushInterval</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">flush</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">batchSize</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (navigator.<span class="property">sendBeacon</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 Beacon API</span></span><br><span class="line">        navigator.<span class="title function_">sendBeacon</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">url</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 降级使用 fetch</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">url</span>, &#123;</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">          <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report data:&#x27;</span>, e)</span><br><span class="line">      <span class="comment">// 失败重试</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">unshift</span>(...data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、监控告警"><a href="#四、监控告警" class="headerlink" title="四、监控告警"></a>四、监控告警</h2><h3 id="1-告警规则"><a href="#1-告警规则" class="headerlink" title="1. 告警规则"></a>1. 告警规则</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AlertManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addRule</span>(<span class="params">name, rule</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">set</span>(name, rule)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">checkMetric</span>(<span class="params">name, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rule = <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">get</span>(name)</span><br><span class="line">    <span class="keyword">if</span> (!rule) <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">evaluateRule</span>(rule, value)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerAlert</span>(name, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">evaluateRule</span>(<span class="params">rule, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; operator, threshold &#125; = rule</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (operator) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> value &gt; threshold</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> value &lt; threshold</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&gt;=&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> value &gt;= threshold</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&lt;=&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> value &lt;= threshold</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> value === threshold</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">triggerAlert</span>(<span class="params">name, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> alert = &#123;</span><br><span class="line">      name,</span><br><span class="line">      value,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/alerts&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(alert)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to send alert:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://web.dev/vitals/">Web Vitals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance">Performance API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API">Beacon API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling">Error Handling</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>监控</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>前端监控</tag>
        <tag>错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title>2.15 前端面试复盘（三）</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/engine-pre2/</url>
    <content><![CDATA[<h1 id="面试官提问环节"><a href="#面试官提问环节" class="headerlink" title="面试官提问环节"></a>面试官提问环节</h1><h3 id="面试官：说说你对-Vue-响应式的理解？"><a href="#面试官：说说你对-Vue-响应式的理解？" class="headerlink" title="面试官：说说你对 Vue 响应式的理解？"></a>面试官：说说你对 Vue 响应式的理解？</h3><p>Vue 的响应式系统是其核心特性之一，我主要从以下几个方面来理解：</p>
<h4 id="Vue2-的响应式实现"><a href="#Vue2-的响应式实现" class="headerlink" title="Vue2 的响应式实现"></a>Vue2 的响应式实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心是通过 Object.defineProperty 来劫持对象的属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 每个属性对应一个 dep 用来收集依赖</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span></span><br><span class="line">      val = newVal</span><br><span class="line">      <span class="comment">// 通知更新</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际项目中遇到的问题：</span></span><br><span class="line"><span class="number">1.</span> 对数组的变化监听需要特殊处理</span><br><span class="line"><span class="number">2.</span> 新增、删除属性需要使用 <span class="title class_">Vue</span>.<span class="property">set</span>/<span class="keyword">delete</span></span><br><span class="line"><span class="number">3.</span> 嵌套对象需要递归遍历</span><br></pre></td></tr></table></figure>

<h4 id="Vue3-的响应式优化"><a href="#Vue3-的响应式优化" class="headerlink" title="Vue3 的响应式优化"></a>Vue3 的响应式优化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Proxy 来代理整个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优势：</span></span><br><span class="line"><span class="number">1.</span> 可以监听数组变化</span><br><span class="line"><span class="number">2.</span> 可以监听对象属性的添加和删除</span><br><span class="line"><span class="number">3.</span> 支持 <span class="title class_">Map</span>、<span class="title class_">Set</span>、<span class="title class_">WeakMap</span>、<span class="title class_">WeakSet</span></span><br><span class="line"><span class="number">4.</span> 性能更好，不需要递归遍历</span><br></pre></td></tr></table></figure>

<h3 id="面试官：项目中遇到过哪些性能问题？如何解决的？"><a href="#面试官：项目中遇到过哪些性能问题？如何解决的？" class="headerlink" title="面试官：项目中遇到过哪些性能问题？如何解决的？"></a>面试官：项目中遇到过哪些性能问题？如何解决的？</h3><p>在之前提到的虚拟表格项目中，我遇到了以下性能问题：</p>
<h4 id="1-大数据渲染问题"><a href="#1-大数据渲染问题" class="headerlink" title="1. 大数据渲染问题"></a>1. 大数据渲染问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题：10万条数据渲染，导致页面卡顿</span><br><span class="line">解决方案：</span><br><span class="line">1. 实现虚拟滚动，只渲染可视区域数据</span><br><span class="line">2. 使用 transform 代替 top 定位</span><br><span class="line">3. 使用 RAF 优化滚动事件</span><br><span class="line">4. 实现缓冲区机制提升滚动体验</span><br></pre></td></tr></table></figure>

<h4 id="2-频繁更新问题"><a href="#2-频繁更新问题" class="headerlink" title="2. 频繁更新问题"></a>2. 频繁更新问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题：实时数据频繁更新导致性能问题</span><br><span class="line">解决方案：</span><br><span class="line">1. 使用 Web Worker 处理数据计算</span><br><span class="line">2. 实现增量更新机制</span><br><span class="line">3. 使用 Object.freeze 冻结不变数据</span><br><span class="line">4. 优化更新频率，合并多次更新</span><br></pre></td></tr></table></figure>

<h4 id="3-内存泄漏问题"><a href="#3-内存泄漏问题" class="headerlink" title="3. 内存泄漏问题"></a>3. 内存泄漏问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题：长时间运行后内存占用过高</span><br><span class="line">解决方案：</span><br><span class="line">1. 及时清理不可见区域的 DOM</span><br><span class="line">2. 解绑事件监听器</span><br><span class="line">3. 清理定时器和订阅</span><br><span class="line">4. 使用 WeakMap/WeakSet 存储引用</span><br></pre></td></tr></table></figure>

<h3 id="面试官：你是如何设计一个组件的？"><a href="#面试官：你是如何设计一个组件的？" class="headerlink" title="面试官：你是如何设计一个组件的？"></a>面试官：你是如何设计一个组件的？</h3><p>以虚拟表格组件为例，我的设计思路是：</p>
<h4 id="1-接口设计"><a href="#1-接口设计" class="headerlink" title="1. 接口设计"></a>1. 接口设计</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 保持简单直观：</span><br><span class="line">   - 必要的 props：data、columns、height</span><br><span class="line">   - 可选的功能 props：selectable、sortable、expandable</span><br><span class="line">   - 统一的事件命名：onSort、onSelect、onExpand</span><br><span class="line"></span><br><span class="line">2. 兼顾灵活性：</span><br><span class="line">   - 支持自定义列模板</span><br><span class="line">   - 支持自定义排序逻辑</span><br><span class="line">   - 支持自定义展开行内容</span><br></pre></td></tr></table></figure>

<h4 id="2-性能考虑"><a href="#2-性能考虑" class="headerlink" title="2. 性能考虑"></a>2. 性能考虑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 渲染性能：</span><br><span class="line">   - 虚拟滚动</span><br><span class="line">   - 函数式组件</span><br><span class="line">   - 合理的更新粒度</span><br><span class="line"></span><br><span class="line">2. 内存优化：</span><br><span class="line">   - 缓存计算结果</span><br><span class="line">   - 及时清理资源</span><br><span class="line">   - 优化数据结构</span><br></pre></td></tr></table></figure>

<h4 id="3-可维护性"><a href="#3-可维护性" class="headerlink" title="3. 可维护性"></a>3. 可维护性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 代码组织：</span><br><span class="line">   - 单一职责</span><br><span class="line">   - 逻辑分层</span><br><span class="line">   - 清晰的注释</span><br><span class="line"></span><br><span class="line">2. 扩展性：</span><br><span class="line">   - 插件机制</span><br><span class="line">   - 钩子函数</span><br><span class="line">   - 预留扩展接口</span><br></pre></td></tr></table></figure>

<p>这些都是我在实际项目中总结的经验，每个方案都经过了实践验证。</p>
<h3 id="面试官：说说你对-Vue-生命周期的理解？"><a href="#面试官：说说你对-Vue-生命周期的理解？" class="headerlink" title="面试官：说说你对 Vue 生命周期的理解？"></a>面试官：说说你对 Vue 生命周期的理解？</h3><p>Vue 的生命周期是组件从创建到销毁的整个过程，我主要从以下几个方面来理解：</p>
<h4 id="Vue2-生命周期"><a href="#Vue2-生命周期" class="headerlink" title="Vue2 生命周期"></a>Vue2 生命周期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建阶段：</span><br><span class="line">   <span class="attr">beforeCreate</span>: 实例创建前，data/methods 都不可用</span><br><span class="line">   <span class="attr">created</span>: 实例创建后，可访问 data/methods，但未挂载 <span class="variable constant_">DOM</span></span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span> 挂载阶段：</span><br><span class="line">   <span class="attr">beforeMount</span>: 模板编译完成，但未挂载到 <span class="variable constant_">DOM</span></span><br><span class="line">   <span class="attr">mounted</span>: <span class="variable constant_">DOM</span> 挂载完成，可以访问 <span class="variable constant_">DOM</span> 元素</span><br><span class="line">   </span><br><span class="line"><span class="number">3.</span> 更新阶段：</span><br><span class="line">   <span class="attr">beforeUpdate</span>: 数据更新，但 <span class="variable constant_">DOM</span> 未更新</span><br><span class="line">   <span class="attr">updated</span>: <span class="variable constant_">DOM</span> 更新完成</span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> 销毁阶段：</span><br><span class="line">   <span class="attr">beforeDestroy</span>: 实例销毁前，可以清理事件、定时器等</span><br><span class="line">   <span class="attr">destroyed</span>: 实例销毁后，所有指令解绑，子实例销毁</span><br><span class="line"></span><br><span class="line">实际应用：</span><br><span class="line">- <span class="attr">created</span>: 发起数据请求，初始化数据</span><br><span class="line">- <span class="attr">mounted</span>: 操作 <span class="variable constant_">DOM</span>，初始化第三方库</span><br><span class="line">- <span class="attr">beforeDestroy</span>: 清理定时器、取消订阅</span><br></pre></td></tr></table></figure>

<h4 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a>Vue3 生命周期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onBeforeMount, onBeforeUnmount &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建阶段</span></span><br><span class="line">  <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件挂载前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件挂载后</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新阶段</span></span><br><span class="line">  <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件更新前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件更新后</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 销毁阶段</span></span><br><span class="line">  <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件卸载前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件卸载后</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面试官：Vue2-和-Vue3-的区别？"><a href="#面试官：Vue2-和-Vue3-的区别？" class="headerlink" title="面试官：Vue2 和 Vue3 的区别？"></a>面试官：Vue2 和 Vue3 的区别？</h3><p>主要从以下几个方面来说：</p>
<h4 id="1-响应式系统"><a href="#1-响应式系统" class="headerlink" title="1. 响应式系统"></a>1. 响应式系统</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue2：Object.defineProperty</span></span><br><span class="line"><span class="number">1.</span> 需要递归遍历对象</span><br><span class="line"><span class="number">2.</span> 不能监听数组索引和长度变化</span><br><span class="line"><span class="number">3.</span> 不能监听对象属性的添加和删除</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3：Proxy</span></span><br><span class="line"><span class="number">1.</span> 可以监听整个对象</span><br><span class="line"><span class="number">2.</span> 可以监听数组变化</span><br><span class="line"><span class="number">3.</span> 支持 <span class="title class_">Map</span>、<span class="title class_">Set</span> 等数据结构</span><br><span class="line"><span class="number">4.</span> 性能更好，不需要递归</span><br></pre></td></tr></table></figure>

<h4 id="2-组合式-API"><a href="#2-组合式-API" class="headerlink" title="2. 组合式 API"></a>2. 组合式 API</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue2：Options API</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3：Composition API</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      doubleCount,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优势：</span><br><span class="line"><span class="number">1.</span> 更好的代码组织</span><br><span class="line"><span class="number">2.</span> 更好的逻辑复用</span><br><span class="line"><span class="number">3.</span> 更好的类型推导</span><br></pre></td></tr></table></figure>

<h4 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 编译优化：</span><br><span class="line">   - 静态节点提升</span><br><span class="line">   - Patch Flag 标记</span><br><span class="line">   - 块级树结构</span><br><span class="line">   </span><br><span class="line">2. 按需编译：</span><br><span class="line">   - Tree-shaking 支持</span><br><span class="line">   - 更小的打包体积</span><br><span class="line">   </span><br><span class="line">3. 新特性：</span><br><span class="line">   - Fragment</span><br><span class="line">   - Teleport</span><br><span class="line">   - Suspense</span><br></pre></td></tr></table></figure>

<h3 id="面试官：Vue-中如何实现组件通信？"><a href="#面试官：Vue-中如何实现组件通信？" class="headerlink" title="面试官：Vue 中如何实现组件通信？"></a>面试官：Vue 中如何实现组件通信？</h3><p>我通常使用以下几种方式：</p>
<h4 id="1-Props-Emit"><a href="#1-Props-Emit" class="headerlink" title="1. Props&#x2F;Emit"></a>1. Props&#x2F;Emit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child-component</span><br><span class="line">    :message=&quot;message&quot;</span><br><span class="line">    @update=&quot;handleUpdate&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;message&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&#x27;update&#x27;, &#x27;new value&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">适用场景：父子组件通信</span><br></pre></td></tr></table></figure>

<h4 id="2-Provide-Inject"><a href="#2-Provide-Inject" class="headerlink" title="2. Provide&#x2F;Inject"></a>2. Provide&#x2F;Inject</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="variable language_">this</span>.<span class="property">theme</span>,</span><br><span class="line">      <span class="attr">updateTheme</span>: <span class="variable language_">this</span>.<span class="property">updateTheme</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;updateTheme&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">适用场景：跨层级组件通信</span><br></pre></td></tr></table></figure>

<h4 id="3-Vuex-Pinia"><a href="#3-Vuex-Pinia" class="headerlink" title="3. Vuex&#x2F;Pinia"></a>3. Vuex&#x2F;Pinia</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vuex</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pinia</span></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">适用场景：全局状态管理</span><br></pre></td></tr></table></figure>

<h4 id="4-EventBus"><a href="#4-EventBus" class="headerlink" title="4. EventBus"></a>4. EventBus</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue2</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;update&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;update&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;update&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line">适用场景：非父子组件通信</span><br><span class="line">注意事项：需要及时销毁监听器</span><br></pre></td></tr></table></figure>

<p>这些都是我在实际项目中经常使用的通信方式，选择哪种方式主要取决于：</p>
<ol>
<li>组件间的关系（父子、兄弟、跨层级）</li>
<li>通信的频率和复杂度</li>
<li>是否需要状态管理</li>
<li>是否需要调试工具支持</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>技术面试</tag>
      </tags>
  </entry>
  <entry>
    <title>2.19 前端面试复盘（四）</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/engine-pre4/</url>
    <content><![CDATA[<h1 id="面试官提问环节"><a href="#面试官提问环节" class="headerlink" title="面试官提问环节"></a>面试官提问环节</h1><h2 id="基础环节"><a href="#基础环节" class="headerlink" title="基础环节"></a>基础环节</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>重点突出以下几点：</p>
<ul>
<li>技术栈：Vue&#x2F;React全家桶、TypeScript等</li>
<li>项目经验：重点项目的业务价值和技术难点</li>
<li>个人特点：学习能力、团队协作等</li>
</ul>
<h3 id="离职原因"><a href="#离职原因" class="headerlink" title="离职原因"></a>离职原因</h3><p>建议从以下角度回答：</p>
<ul>
<li>寻求更好的发展机会</li>
<li>希望接触更有挑战性的项目</li>
<li>对新技术栈有追求</li>
</ul>
<h2 id="技术难点讨论"><a href="#技术难点讨论" class="headerlink" title="技术难点讨论"></a>技术难点讨论</h2><h3 id="RBAC权限系统设计"><a href="#RBAC权限系统设计" class="headerlink" title="RBAC权限系统设计"></a>RBAC权限系统设计</h3><h4 id="1-动态路由的导入"><a href="#1-动态路由的导入" class="headerlink" title="1. 动态路由的导入"></a>1. 动态路由的导入</h4><p>实现要点：</p>
<ul>
<li>后端返回权限菜单数据</li>
<li>前端进行路由表的动态组装</li>
<li>路由守卫进行权限校验</li>
<li>404处理机制</li>
</ul>
<h4 id="2-按钮级别权限设计"><a href="#2-按钮级别权限设计" class="headerlink" title="2. 按钮级别权限设计"></a>2. 按钮级别权限设计</h4><p>实现方案：</p>
<ul>
<li>自定义指令实现</li>
<li>权限数据统一管理</li>
<li>组件级别的权限控制</li>
<li>HOC高阶组件封装</li>
</ul>
<h4 id="3-权限实时性优化方案"><a href="#3-权限实时性优化方案" class="headerlink" title="3. 权限实时性优化方案"></a>3. 权限实时性优化方案</h4><p>当管理员修改用户权限时：</p>
<ul>
<li>WebSocket实时推送方案</li>
<li>定时轮询检查方案</li>
<li>关键操作权限二次校验</li>
<li>权限缓存更新策略</li>
</ul>
<h4 id="4-登录流程优化"><a href="#4-登录流程优化" class="headerlink" title="4. 登录流程优化"></a>4. 登录流程优化</h4><p>针对异步等待时间优化：</p>
<ul>
<li>路由懒加载</li>
<li>并行请求处理</li>
<li>骨架屏loading</li>
<li>路由表缓存策略</li>
</ul>
<h2 id="技术细节问答"><a href="#技术细节问答" class="headerlink" title="技术细节问答"></a>技术细节问答</h2><h3 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h3><p>rem换算相关：</p>
<ul>
<li>基准值计算方式</li>
<li>不同设备下的根字体大小计算</li>
<li>viewport的配置</li>
<li>媒体查询的配合使用</li>
</ul>
<h3 id="1px问题解决方案"><a href="#1px问题解决方案" class="headerlink" title="1px问题解决方案"></a>1px问题解决方案</h3><p>产生原因：</p>
<ul>
<li>设备物理像素和CSS像素的差异</li>
<li>DPR(设备像素比)的影响</li>
<li>Retina屏幕的特性</li>
</ul>
<h3 id="0-5px边框实现方案"><a href="#0-5px边框实现方案" class="headerlink" title="0.5px边框实现方案"></a>0.5px边框实现方案</h3><p>实现方式：</p>
<ul>
<li>transform: scale(0.5)方案</li>
<li>渐变方案</li>
<li>SVG方案</li>
<li>伪元素方案</li>
</ul>
<h3 id="Vue2和Vue3的区别"><a href="#Vue2和Vue3的区别" class="headerlink" title="Vue2和Vue3的区别"></a>Vue2和Vue3的区别</h3><p>主要区别：</p>
<ul>
<li>响应式系统的实现</li>
<li>组合式API的引入</li>
<li>性能优化方面的提升</li>
<li>TypeScript支持的增强</li>
<li>新特性的使用便利性</li>
</ul>
<h2 id="软实力考察"><a href="#软实力考察" class="headerlink" title="软实力考察"></a>软实力考察</h2><h3 id="加班观点"><a href="#加班观点" class="headerlink" title="加班观点"></a>加班观点</h3><p>回答思路：</p>
<ul>
<li>认可合理加班的必要性</li>
<li>强调效率和时间管理</li>
<li>展现责任心和团队精神</li>
<li>表达对工作的热情</li>
</ul>
<h3 id="反问环节"><a href="#反问环节" class="headerlink" title="反问环节"></a>反问环节</h3><p>针对业务场景的提问：</p>
<ul>
<li>了解项目演示情况</li>
<li>关注政府项目特点</li>
<li>询问团队协作模式</li>
<li>探讨技术发展方向</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次面试整体难度适中，重点考察了：</p>
<ol>
<li>实际项目经验</li>
<li>技术问题解决能力</li>
<li>系统设计能力</li>
<li>个人职业态度</li>
</ol>
<p>建议后续准备：</p>
<ol>
<li>深化项目难点分析</li>
<li>补充性能优化案例</li>
<li>加强系统设计能力</li>
<li>准备更多实战案例</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>技术面试</tag>
      </tags>
  </entry>
  <entry>
    <title>2.19 前端面试复盘（四）</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/engine-pre5/</url>
    <content><![CDATA[<h1 id="面试官提问环节"><a href="#面试官提问环节" class="headerlink" title="面试官提问环节"></a>面试官提问环节</h1><h2 id="基础环节"><a href="#基础环节" class="headerlink" title="基础环节"></a>基础环节</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>psss</p>
<h3 id="虚拟滚动的实现方案，不定高的虚拟滚动呢？"><a href="#虚拟滚动的实现方案，不定高的虚拟滚动呢？" class="headerlink" title="虚拟滚动的实现方案，不定高的虚拟滚动呢？"></a>虚拟滚动的实现方案，不定高的虚拟滚动呢？</h3><p>虚拟滚动的核心思路是只渲染可视区域内的元素，主要实现方案如下：</p>
<ol>
<li>固定高度的虚拟滚动：</li>
</ol>
<ul>
<li>计算可视区域能显示的元素数量</li>
<li>根据滚动位置计算起始索引</li>
<li>使用transform设置偏移量</li>
<li>只渲染可视区域的元素</li>
</ul>
<ol start="2">
<li>不定高度的虚拟滚动：</li>
</ol>
<ul>
<li>预估每项的高度</li>
<li>第一次渲染后缓存真实高度</li>
<li>使用动态位置计算</li>
<li>可以借助IntersectionObserver优化</li>
<li>处理快速滚动时的位置计算</li>
</ul>
<h3 id="你是如何封装这些组件的，思路、注意的点？"><a href="#你是如何封装这些组件的，思路、注意的点？" class="headerlink" title="你是如何封装这些组件的，思路、注意的点？"></a>你是如何封装这些组件的，思路、注意的点？</h3><p>组件封装的主要思路和注意点：</p>
<ol>
<li>设计原则：</li>
</ol>
<ul>
<li>单一职责</li>
<li>高内聚低耦合</li>
<li>接口设计要简单明确</li>
<li>考虑组件的可扩展性</li>
</ul>
<ol start="2">
<li>具体实践：</li>
</ol>
<ul>
<li>提取公共逻辑到hooks</li>
<li>使用TypeScript做好类型定义</li>
<li>做好错误边界处理</li>
<li>提供完整的文档和示例</li>
<li>考虑性能优化（memo、useMemo等）</li>
</ul>
<ol start="3">
<li>注意点：</li>
</ol>
<ul>
<li>避免过度设计</li>
<li>保持向下兼容</li>
<li>做好测试用例</li>
<li>考虑极端场景</li>
</ul>
<h3 id="现在用的webpack还是vite构建的项目？为什么用vite？"><a href="#现在用的webpack还是vite构建的项目？为什么用vite？" class="headerlink" title="现在用的webpack还是vite构建的项目？为什么用vite？"></a>现在用的webpack还是vite构建的项目？为什么用vite？</h3><p>选择Vite的原因：</p>
<ol>
<li>开发体验更好：</li>
</ol>
<ul>
<li>基于ESM的开发服务器</li>
<li>冷启动速度快</li>
<li>HMR更快</li>
<li>按需编译</li>
</ul>
<ol start="2">
<li>构建性能优化：</li>
</ol>
<ul>
<li>使用esbuild预构建依赖</li>
<li>生产环境使用Rollup构建</li>
<li>天然支持TypeScript</li>
</ul>
<ol start="3">
<li>相比Webpack优势：</li>
</ol>
<ul>
<li>开发环境无需打包</li>
<li>配置更简单</li>
<li>内置更多功能</li>
<li>构建速度更快</li>
</ul>
<h3 id="自适应模块用到了element-resize-detector库，看过他的源码吗？为什么快？"><a href="#自适应模块用到了element-resize-detector库，看过他的源码吗？为什么快？" class="headerlink" title="自适应模块用到了element-resize-detector库，看过他的源码吗？为什么快？"></a>自适应模块用到了element-resize-detector库，看过他的源码吗？为什么快？</h3><p>element-resize-detector的核心原理：</p>
<ol>
<li>实现方式：</li>
</ol>
<ul>
<li>对象方式：创建object元素监听resize事件</li>
<li>scroll方式：监听scroll事件实现</li>
</ul>
<ol start="2">
<li>性能优化：</li>
</ol>
<ul>
<li>使用RAF优化回调执行</li>
<li>批量处理resize事件</li>
<li>优化DOM操作</li>
<li>使用事件委托</li>
</ul>
<h3 id="说说性能优化方案，图片压缩怎么做的，用到什么插件了，还是？"><a href="#说说性能优化方案，图片压缩怎么做的，用到什么插件了，还是？" class="headerlink" title="说说性能优化方案，图片压缩怎么做的，用到什么插件了，还是？"></a>说说性能优化方案，图片压缩怎么做的，用到什么插件了，还是？</h3><p>性能优化的主要方案：</p>
<ol>
<li>资源优化：</li>
</ol>
<ul>
<li>图片压缩（使用image-webpack-loader）</li>
<li>懒加载（Intersection Observer）</li>
<li>WebP格式转换</li>
<li>CDN加速</li>
</ul>
<ol start="2">
<li>代码优化：</li>
</ol>
<ul>
<li>Tree Shaking</li>
<li>代码分割</li>
<li>路由懒加载</li>
<li>组件按需加载</li>
</ul>
<ol start="3">
<li>图片压缩具体实现：</li>
</ol>
<ul>
<li>开发环境：sharp库</li>
<li>构建阶段：image-webpack-loader</li>
<li>运行时：canvas压缩</li>
<li>使用tinypng API</li>
</ul>
<h3 id="分包后，子包还是很大怎么办？怎么优化"><a href="#分包后，子包还是很大怎么办？怎么优化" class="headerlink" title="分包后，子包还是很大怎么办？怎么优化"></a>分包后，子包还是很大怎么办？怎么优化</h3><p>大型包的优化策略：</p>
<ol>
<li>代码层面：</li>
</ol>
<ul>
<li>进一步代码分割</li>
<li>动态import</li>
<li>提取公共依赖</li>
<li>移除未使用代码</li>
</ul>
<ol start="2">
<li>依赖优化：</li>
</ol>
<ul>
<li>使用更轻量的替代库</li>
<li>按需引入</li>
<li>移除重复依赖</li>
<li>考虑使用CDN</li>
</ul>
<ol start="3">
<li>构建优化：</li>
</ol>
<ul>
<li>启用压缩</li>
<li>使用现代格式（如ES modules）</li>
<li>优化资源缓存</li>
<li>考虑使用HTTP&#x2F;2</li>
</ul>
<h3 id="说说https缓存策略怎么实现"><a href="#说说https缓存策略怎么实现" class="headerlink" title="说说https缓存策略怎么实现"></a>说说https缓存策略怎么实现</h3><p>HTTPS缓存策略实现：</p>
<ol>
<li>强缓存：</li>
</ol>
<ul>
<li>Cache-Control</li>
<li>Expires</li>
<li>适用于静态资源</li>
</ul>
<ol start="2">
<li>协商缓存：</li>
</ol>
<ul>
<li>ETag &#x2F; If-None-Match</li>
<li>Last-Modified &#x2F; If-Modified-Since</li>
<li>适用于动态资源</li>
</ul>
<ol start="3">
<li>最佳实践：</li>
</ol>
<ul>
<li>合理设置缓存时间</li>
<li>使用版本号或hash</li>
<li>区分资源类型</li>
<li>配置CDN缓存</li>
</ul>
<h3 id="webWorker-是什么场景使用的？内网存在的跨域问题如何解决，（为什么blob-流可以处理跨域）"><a href="#webWorker-是什么场景使用的？内网存在的跨域问题如何解决，（为什么blob-流可以处理跨域）" class="headerlink" title="webWorker 是什么场景使用的？内网存在的跨域问题如何解决，（为什么blob 流可以处理跨域）"></a>webWorker 是什么场景使用的？内网存在的跨域问题如何解决，（为什么blob 流可以处理跨域）</h3><p>WebWorker使用场景：</p>
<ol>
<li>适用场景：</li>
</ol>
<ul>
<li>大量计算</li>
<li>文件处理</li>
<li>数据加密</li>
<li>实时数据处理</li>
</ul>
<ol start="2">
<li>跨域解决方案：</li>
</ol>
<ul>
<li>使用Blob URL创建Worker</li>
<li>配置正确的CORS头</li>
<li>使用同源策略</li>
<li>代理服务</li>
</ul>
<ol start="3">
<li>Blob处理跨域原理：</li>
</ol>
<ul>
<li>Blob URL属于同源</li>
<li>不受跨域限制</li>
<li>安全性由浏览器保证</li>
</ul>
<h3 id="基于react-组件，如何实现低代码开发中的画布"><a href="#基于react-组件，如何实现低代码开发中的画布" class="headerlink" title="基于react 组件，如何实现低代码开发中的画布"></a>基于react 组件，如何实现低代码开发中的画布</h3><p>低代码画布实现方案：</p>
<ol>
<li>核心功能：</li>
</ol>
<ul>
<li>拖拽功能（react-dnd）</li>
<li>组件渲染器</li>
<li>属性配置面板</li>
<li>布局系统</li>
</ul>
<ol start="2">
<li>技术实现：</li>
</ol>
<ul>
<li>组件注册机制</li>
<li>状态管理</li>
<li>事件系统</li>
<li>数据流转</li>
</ul>
<ol start="3">
<li>优化方案：</li>
</ol>
<ul>
<li>组件懒加载</li>
<li>渲染优化</li>
<li>状态缓存</li>
<li>操作历史记录</li>
</ul>
<h3 id="如何一个页面同时加载几十个组件（低码项目）怎么去优化？"><a href="#如何一个页面同时加载几十个组件（低码项目）怎么去优化？" class="headerlink" title="如何一个页面同时加载几十个组件（低码项目）怎么去优化？"></a>如何一个页面同时加载几十个组件（低码项目）怎么去优化？</h3><p>多组件优化策略：</p>
<ol>
<li>加载优化：</li>
</ol>
<ul>
<li>组件懒加载</li>
<li>分批渲染</li>
<li>虚拟列表</li>
<li>预加载策略</li>
</ul>
<ol start="2">
<li>渲染优化：</li>
</ol>
<ul>
<li>React.memo</li>
<li>使用骨架屏</li>
<li>优化重渲染</li>
<li>合理使用Suspense</li>
</ul>
<ol start="3">
<li>性能监控：</li>
</ol>
<ul>
<li>性能指标收集</li>
<li>渲染时间优化</li>
<li>内存占用监控</li>
<li>性能瓶颈分析</li>
</ul>
<h3 id="react的redux、zustand、mobx-的使用场景有什么不同？让你开发一个项目，你该怎么选择的？"><a href="#react的redux、zustand、mobx-的使用场景有什么不同？让你开发一个项目，你该怎么选择的？" class="headerlink" title="react的redux、zustand、mobx 的使用场景有什么不同？让你开发一个项目，你该怎么选择的？"></a>react的redux、zustand、mobx 的使用场景有什么不同？让你开发一个项目，你该怎么选择的？</h3><p>状态管理方案选择：</p>
<ol>
<li>Redux：</li>
</ol>
<ul>
<li>适合大型应用</li>
<li>需要严格的数据流</li>
<li>需要中间件</li>
<li>团队协作要求高</li>
</ul>
<ol start="2">
<li>Zustand：</li>
</ol>
<ul>
<li>轻量级应用</li>
<li>简单状态管理</li>
<li>快速开发</li>
<li>学习成本低</li>
</ul>
<ol start="3">
<li>MobX：</li>
</ol>
<ul>
<li>响应式编程</li>
<li>面向对象</li>
<li>灵活性高</li>
<li>适合复杂业务</li>
</ul>
<p>选择依据：</p>
<ul>
<li>项目规模</li>
<li>团队熟悉度</li>
<li>性能要求</li>
<li>开发效率</li>
</ul>
<h3 id="看你的项目用的微前端？看样子你很熟悉微前端，说说qiankun、无界的实现方案，如何实现js、css-隔离的，子系统之间如何通信的"><a href="#看你的项目用的微前端？看样子你很熟悉微前端，说说qiankun、无界的实现方案，如何实现js、css-隔离的，子系统之间如何通信的" class="headerlink" title="看你的项目用的微前端？看样子你很熟悉微前端，说说qiankun、无界的实现方案，如何实现js、css 隔离的，子系统之间如何通信的"></a>看你的项目用的微前端？看样子你很熟悉微前端，说说qiankun、无界的实现方案，如何实现js、css 隔离的，子系统之间如何通信的</h3><p>微前端实现方案对比：</p>
<ol>
<li>qiankun：</li>
</ol>
<ul>
<li>基于single-spa</li>
<li>沙箱机制</li>
<li>样式隔离</li>
<li>预加载能力</li>
</ul>
<ol start="2">
<li>无界方案：</li>
</ol>
<ul>
<li>iframe方案</li>
<li>纯web组件</li>
<li>性能更好</li>
<li>隔离更彻底</li>
</ul>
<ol start="3">
<li>隔离实现：</li>
</ol>
<ul>
<li>JS沙箱：快照、Proxy</li>
<li>CSS隔离：Shadow DOM、前缀</li>
<li>通信：发布订阅、Props传递</li>
<li>全局状态：统一状态管理</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>技术面试</tag>
      </tags>
  </entry>
  <entry>
    <title>2.15 前端面试复盘（二）</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/engine-websocket/</url>
    <content><![CDATA[<h1 id="WebSocket-技术要点总结"><a href="#WebSocket-技术要点总结" class="headerlink" title="WebSocket 技术要点总结"></a>WebSocket 技术要点总结</h1><h2 id="WebSocket-连接管理详解"><a href="#WebSocket-连接管理详解" class="headerlink" title="WebSocket 连接管理详解"></a>WebSocket 连接管理详解</h2><h3 id="心跳检测与断线重连机制"><a href="#心跳检测与断线重连机制" class="headerlink" title="心跳检测与断线重连机制"></a>心跳检测与断线重连机制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebSocketClient</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">            <span class="attr">heartbeatInterval</span>: <span class="number">30000</span>,</span><br><span class="line">            <span class="attr">reconnectInterval</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">maxReconnectAttempts</span>: <span class="number">5</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>; <span class="comment">// 重置重连次数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">startHeartbeat</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">clearHeartbeat</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">data</span> === <span class="string">&#x27;pong&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 收到心跳响应</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理其他消息</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">startHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="string">&#x27;ping&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">heartbeatInterval</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clearHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">reconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> &lt; <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">maxReconnectAttempts</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>++;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">            &#125;, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">reconnectInterval</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>心跳检测是<strong>预防性</strong>的，用于及时发现连接问题。断线重连是<strong>补救性</strong>的，用于恢复已断开的连接。两者配合使用可以提供更可靠的连接保障。</p>
<h3 id="黏包问题"><a href="#黏包问题" class="headerlink" title="黏包问题"></a>黏包问题</h3><p>在 WebSocket 通信中，由于 TCP 的特性，可能会出现数据包粘连的情况。这就是所谓的黏包问题，主要表现为多个数据包在传输过程中粘在一起，接收端无法正确分割。</p>
<h4 id="TCP-特性与黏包原因"><a href="#TCP-特性与黏包原因" class="headerlink" title="TCP 特性与黏包原因"></a>TCP 特性与黏包原因</h4><p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。黏包问题产生的主要原因有：</p>
<ol>
<li><p><strong>TCP 是流式协议</strong></p>
<ul>
<li>TCP 传输的数据是连续的字节流，没有消息边界</li>
<li>应用层的一次写操作，并不对应网络上的一个数据包</li>
<li>TCP 可能将多个小数据包合并成一个大的数据包发送</li>
<li>也可能将一个大的数据包拆分成多个小数据包发送</li>
</ul>
</li>
<li><p><strong>Nagle 算法</strong></p>
<ul>
<li>TCP 默认启用 Nagle 算法，用于提高网络传输效率</li>
<li>算法会等待一定时间，收集多个小数据包后一起发送</li>
<li>这种优化机制直接导致了数据包的粘连</li>
</ul>
</li>
<li><p><strong>接收方 TCP 缓冲区</strong></p>
<ul>
<li>TCP 接收方会将收到的数据包暂存在缓冲区</li>
<li>应用程序如果读取不及时，多个数据包会在缓冲区中堆积</li>
<li>当应用程序一次性读取时，会同时读到多个数据包的数据</li>
</ul>
</li>
</ol>
<p>示意图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">发送方                                接收方</span><br><span class="line">+------------+                     +------------+</span><br><span class="line">| 数据包 1   |                     | 数据包 1+2 |</span><br><span class="line">+------------+     TCP 传输        +------------+</span><br><span class="line">| 数据包 2   |  =============&gt;    | 数据       |</span><br><span class="line">+------------+     合并传输        | 无法区分边界|</span><br></pre></td></tr></table></figure>

<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>消息帧格式设计</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> frame = &#123;</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="attr">messageLength</span>: number,  <span class="comment">// 消息总长度</span></span><br><span class="line">        <span class="attr">messageType</span>: string,    <span class="comment">// 消息类型</span></span><br><span class="line">        <span class="attr">timestamp</span>: number       <span class="comment">// 时间戳</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: any                   <span class="comment">// 消息主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现消息解析器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessageParser</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">buffer</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 缓存数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">buffer</span> += data;</span><br><span class="line">        <span class="keyword">const</span> messages = [];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查是否包含完整的消息头</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &lt; <span class="number">8</span>) <span class="keyword">break</span>;  <span class="comment">// 假设头部长度为8字节</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> headerLength = <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">const</span> header = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(<span class="number">0</span>, headerLength));</span><br><span class="line">            <span class="keyword">const</span> totalLength = header.<span class="property">messageLength</span> + headerLength;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否收到完整消息</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &lt; totalLength) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提取完整消息</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(headerLength, totalLength);</span><br><span class="line">            messages.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: header.<span class="property">messageType</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(message)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新缓存</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">buffer</span> = <span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(totalLength);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> messages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="keyword">new</span> <span class="title class_">MessageParser</span>();</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = parser.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">    messages.<span class="title function_">forEach</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(msg.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;market&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleMarketData</span>(msg.<span class="property">data</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;trade&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleTradeData</span>(msg.<span class="property">data</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// ... 处理其他类型消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键点说明</p>
</li>
</ol>
<ul>
<li>每个消息都有固定格式的头部，包含消息长度等信息</li>
<li>使用缓冲区暂存不完整的消息</li>
<li>通过消息长度字段来正确拆分消息</li>
<li>支持批量处理多个粘连的消息</li>
</ul>
<p>这种方案可以有效处理 WebSocket 通信中的黏包问题，保证数据的完整性和正确性。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>WebSocket</tag>
        <tag>网络通信</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理性看待AI发展：一把双刃剑</title>
    <url>/AI/ai-ai-development-perspective/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人工智能(AI)正以前所未有的速度发展，从ChatGPT到DALL-E，从自动驾驶到智能医疗，AI技术正在重塑我们的生活方式和工作模式。作为21世纪最具革命性的技术之一，AI就像一把双刃剑，既能创造巨大价值，也可能带来意想不到的挑战。本文将深入分析AI发展的方方面面，帮助我们以更理性的态度看待AI技术的发展。</p>
<h2 id="AI发展的积极影响"><a href="#AI发展的积极影响" class="headerlink" title="AI发展的积极影响"></a>AI发展的积极影响</h2><h3 id="1-效率提升"><a href="#1-效率提升" class="headerlink" title="1. 效率提升"></a>1. 效率提升</h3><ul>
<li><p><strong>工作自动化</strong></p>
<ul>
<li>自动处理重复性文档工作，提高办公效率</li>
<li>智能客服24小时在线，提升服务质量</li>
<li>工业自动化生产，提高产能和精确度</li>
</ul>
</li>
<li><p><strong>决策优化</strong></p>
<ul>
<li>大数据分析辅助决策，降低决策风险</li>
<li>预测模型提供决策参考，提高准确率</li>
<li>实时数据处理，支持快速响应</li>
</ul>
</li>
<li><p><strong>资源配置</strong></p>
<ul>
<li>智能调度系统优化物流配送</li>
<li>能源使用智能管理，降低资源浪费</li>
<li>智能算法优化人力资源分配</li>
</ul>
</li>
</ul>
<h3 id="2-创新突破"><a href="#2-创新突破" class="headerlink" title="2. 创新突破"></a>2. 创新突破</h3><ul>
<li><p><strong>医疗健康</strong></p>
<ul>
<li>AI辅助诊断提高疾病识别准确率</li>
<li>药物研发周期大幅缩短</li>
<li>个性化治疗方案制定</li>
<li>远程医疗服务普及</li>
</ul>
</li>
<li><p><strong>科研进展</strong></p>
<ul>
<li>加速科学计算和模拟</li>
<li>发现新材料和新物质</li>
<li>气候变化预测更准确</li>
<li>空间探索取得新突破</li>
</ul>
</li>
<li><p><strong>产品创新</strong></p>
<ul>
<li>智能产品快速迭代</li>
<li>个性化定制更便捷</li>
<li>新产品研发周期缩短</li>
<li>用户体验持续优化</li>
</ul>
</li>
</ul>
<h3 id="3-生活改善"><a href="#3-生活改善" class="headerlink" title="3. 生活改善"></a>3. 生活改善</h3><ul>
<li><p><strong>智能家居</strong></p>
<ul>
<li>家电智能控制，提升生活便利性</li>
<li>能源使用更环保高效</li>
<li>居家安全保障增强</li>
<li>老人和儿童照护更周到</li>
</ul>
</li>
<li><p><strong>教育革新</strong></p>
<ul>
<li>个性化学习计划制定</li>
<li>教育资源普惠化</li>
<li>在线教育更加智能</li>
<li>终身学习更加便捷</li>
</ul>
</li>
<li><p><strong>娱乐体验</strong></p>
<ul>
<li>游戏体验更加真实</li>
<li>虚拟现实技术提升</li>
<li>内容创作更加丰富</li>
<li>个性化推荐更准确</li>
</ul>
</li>
</ul>
<h2 id="AI发展的潜在风险"><a href="#AI发展的潜在风险" class="headerlink" title="AI发展的潜在风险"></a>AI发展的潜在风险</h2><h3 id="1-就业冲击"><a href="#1-就业冲击" class="headerlink" title="1. 就业冲击"></a>1. 就业冲击</h3><ul>
<li><p><strong>岗位替代</strong></p>
<ul>
<li>基础性工作岗位加速消失</li>
<li>传统行业面临转型压力</li>
<li>就业结构急剧变化</li>
</ul>
</li>
<li><p><strong>技能挑战</strong></p>
<ul>
<li>现有技能快速过时</li>
<li>新技能学习压力增大</li>
<li>职业转型难度加大</li>
</ul>
</li>
<li><p><strong>就业市场变化</strong></p>
<ul>
<li>人才需求结构性失衡</li>
<li>就业竞争加剧</li>
<li>收入差距可能扩大</li>
</ul>
</li>
</ul>
<h3 id="2-伦理挑战"><a href="#2-伦理挑战" class="headerlink" title="2. 伦理挑战"></a>2. 伦理挑战</h3><ul>
<li><p><strong>隐私安全</strong></p>
<ul>
<li>个人数据被过度收集</li>
<li>隐私边界日益模糊</li>
<li>数据安全风险增加</li>
<li>个人信息滥用问题</li>
</ul>
</li>
<li><p><strong>算法公平</strong></p>
<ul>
<li>AI决策可能存在偏见</li>
<li>算法歧视问题</li>
<li>责任归属难以界定</li>
<li>社会公平受到挑战</li>
</ul>
</li>
<li><p><strong>人机关系</strong></p>
<ul>
<li>人类自主性可能受限</li>
<li>过度依赖AI的风险</li>
<li>人际关系疏离化</li>
<li>心理健康新挑战</li>
</ul>
</li>
</ul>
<h3 id="3-社会影响"><a href="#3-社会影响" class="headerlink" title="3. 社会影响"></a>3. 社会影响</h3><ul>
<li><p><strong>数字鸿沟</strong></p>
<ul>
<li>贫富差距可能扩大</li>
<li>教育资源获取不均</li>
<li>技术普及度差异</li>
<li>区域发展不平衡</li>
</ul>
</li>
<li><p><strong>社会结构</strong></p>
<ul>
<li>传统社会关系改变</li>
<li>社会价值观转变</li>
<li>文化传承面临挑战</li>
<li>社会治理新课题</li>
</ul>
</li>
</ul>
<h2 id="如何理性应对"><a href="#如何理性应对" class="headerlink" title="如何理性应对"></a>如何理性应对</h2><h3 id="1-个人层面"><a href="#1-个人层面" class="headerlink" title="1. 个人层面"></a>1. 个人层面</h3><ul>
<li><p><strong>终身学习</strong></p>
<ul>
<li>持续更新知识储备</li>
<li>培养跨领域能力</li>
<li>提升数字化素养</li>
<li>保持学习积极性</li>
</ul>
</li>
<li><p><strong>能力培养</strong></p>
<ul>
<li>强化创造性思维</li>
<li>提升批判性思考</li>
<li>发展情商和共情能力</li>
<li>培养人机协作能力</li>
</ul>
</li>
</ul>
<h3 id="2-社会层面"><a href="#2-社会层面" class="headerlink" title="2. 社会层面"></a>2. 社会层面</h3><ul>
<li><p><strong>制度建设</strong></p>
<ul>
<li>完善AI伦理准则</li>
<li>建立监管框架</li>
<li>保护个人权益</li>
<li>促进公平发展</li>
</ul>
</li>
<li><p><strong>教育改革</strong></p>
<ul>
<li>更新教育理念</li>
<li>改革课程体系</li>
<li>加强技能培训</li>
<li>普及AI教育</li>
</ul>
</li>
</ul>
<h3 id="3-发展方向"><a href="#3-发展方向" class="headerlink" title="3. 发展方向"></a>3. 发展方向</h3><ul>
<li><p><strong>以人为本</strong></p>
<ul>
<li>强调技术向善</li>
<li>注重人文关怀</li>
<li>维护人类尊严</li>
<li>促进共同发展</li>
</ul>
</li>
<li><p><strong>可持续发展</strong></p>
<ul>
<li>平衡效率与公平</li>
<li>注重环境保护</li>
<li>促进包容性增长</li>
<li>维护社会稳定</li>
</ul>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>AI发展是一把真正的双刃剑，它既能带来前所未有的发展机遇，也可能产生难以预料的风险。关键在于我们如何趋利避害，在享受技术红利的同时，也要未雨绸缪，防范潜在风险。</p>
<p>我们需要以开放、包容但审慎的态度拥抱AI技术，在个人、企业和社会层面都要做好充分准备。只有正确认识和把握这把双刃剑，在发展中坚持以人为本，注重可持续发展，我们才能在AI时代走得更稳、走得更远。</p>
<p>让我们携手共建一个人机协作、互惠共赢的美好未来。 </p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>人工智能</tag>
        <tag>技术发展</tag>
        <tag>AI伦理</tag>
        <tag>未来发展</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解CDN？说说实现原理？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-CDN/</url>
    <content><![CDATA[<h1 id="如何理解CDN？说说实现原理？"><a href="#如何理解CDN？说说实现原理？" class="headerlink" title="如何理解CDN？说说实现原理？"></a>如何理解CDN？说说实现原理？</h1><p><img src="https://static.vue-js.com/437ae0f0-b86b-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>CDN (全称 Content Delivery Network)，即内容分发网络</p>
<p>构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。<code>CDN</code> 的关键技术主要有内容存储和分发技术</p>
<p>简单来讲，<code>CDN</code>就是根据用户位置分配最近的资源</p>
<p>于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫<strong>边缘节点</strong>，其实就是缓存了源站内容的代理服务器。如下图：</p>
<p> <img src="https://static.vue-js.com/4f0289f0-b86b-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="二、原理分析"><a href="#二、原理分析" class="headerlink" title="二、原理分析"></a>二、原理分析</h2><p>在没有应用<code>CDN</code>时，我们使用域名访问某一个站点时的路径为</p>
<blockquote>
<p>用户提交域名→浏览器对域名进行解释→<code>DNS</code> 解析得到目的主机的IP地址→根据IP地址访问发出请求→得到请求数据并回复</p>
</blockquote>
<p>应用<code>CDN</code>后，<code>DNS</code> 返回的不再是 <code>IP</code> 地址，而是一个<code>CNAME</code>(Canonical Name ) 别名记录，指向<code>CDN</code>的全局负载均衡</p>
<p><code>CNAME</code>实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是<code>CDN</code>实现的关键</p>
<h4 id="负载均衡系统"><a href="#负载均衡系统" class="headerlink" title="负载均衡系统"></a>负载均衡系统</h4><p>由于没有返回<code>IP</code>地址，于是本地<code>DNS</code>会向负载均衡系统再发送请求  ，则进入到<code>CDN</code>的全局负载均衡系统进行智能调度：</p>
<ul>
<li><p>看用户的 IP 地址，查表得知地理位置，找相对最近的边缘节点</p>
</li>
<li><p>看用户所在的运营商网络，找相同网络的边缘节点</p>
</li>
<li><p>检查边缘节点的负载情况，找负载较轻的节点</p>
</li>
<li><p>其他，比如节点的“健康状况”、服务能力、带宽、响应时间等</p>
</li>
</ul>
<p>结合上面的因素，得到最合适的边缘节点，然后把这个节点返回给用户，用户就能够就近访问<code>CDN</code>的缓存代理</p>
<p>整体流程如下图：</p>
<p> <img src="https://static.vue-js.com/588d7890-b86b-11eb-85f6-6fac77c0c9b3.png"></p>
<h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h4><p>缓存系统是 <code>CDN </code>的另一个关键组成部分，缓存系统会有选择地缓存那些最常用的那些资源</p>
<p>其中有两个衡量<code>CDN</code>服务质量的指标：</p>
<ul>
<li>命中率：用户访问的资源恰好在缓存系统里，可以直接返回给用户，命中次数与所有访问次数之比</li>
<li>回源率：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比</li>
</ul>
<p>缓存系统也可以划分出层次，分成一级缓存节点和二级缓存节点。一级缓存配置高一些，直连源站，二级缓存配置低一些，直连用户</p>
<p>回源的时候二级缓存只找一级缓存，一级缓存没有才回源站，可以有效地减少真正的回源</p>
<p>现在的商业 <code>CDN</code>命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>CDN</code> 目的是为了改善互联网的服务质量，通俗一点说其实就是提高访问速度</p>
<p><code>CDN</code> 构建了全国、全球级别的专网，让用户就近访问专网里的边缘节点，降低了传输延迟，实现了网站加速</p>
<p>通过<code>CDN</code>的负载均衡系统，智能调度边缘节点提供服务，相当于<code>CDN</code>服务的大脑，而缓存系统相当于<code>CDN</code>的心脏，缓存命中直接返回给用户，否则回源</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF">https://zh.wikipedia.org/wiki/內容傳遞網路</a></li>
<li><a href="https://juejin.cn/post/6844903890706661389#heading-5">https://juejin.cn/post/6844903890706661389#heading-5</a></li>
<li><a href="https://blog.csdn.net/lxx309707872/article/details/109078783">https://blog.csdn.net/lxx309707872/article/details/109078783</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP1.0/1.1/2.0 的区别</title>
    <url>/%E7%BD%91%E7%BB%9C/http-1-0-1-1-2-0/</url>
    <content><![CDATA[<h1 id="HTTP1-0-1-1-2-0-的区别"><a href="#HTTP1-0-1-1-2-0-的区别" class="headerlink" title="HTTP1.0&#x2F;1.1&#x2F;2.0 的区别?"></a>HTTP1.0&#x2F;1.1&#x2F;2.0 的区别?</h1><p> <img src="https://static.vue-js.com/e167a580-b93a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、HTTP1-0"><a href="#一、HTTP1-0" class="headerlink" title="一、HTTP1.0"></a>一、HTTP1.0</h2><p><code>HTTP</code>协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本</p>
<p><code>HTTP 1.0</code> 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个<code>TCP</code>连接</p>
<p>服务器完成请求处理后立即断开<code>TCP</code>连接，服务器不跟踪每个客户也不记录过去的请求</p>
<p>简单来讲，每次与服务器交互，都需要新开一个连接</p>
<p> <img src="https://static.vue-js.com/efff4da0-b93a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>例如，解析<code>html</code>文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接</p>
<p>最终导致，一个<code>html</code>文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接</p>
<p>这种形式明显造成了性能上的缺陷</p>
<p>如果需要建立长连接，需要设置一个非标准的Connection字段 <code>Connection: keep-alive</code></p>
<h2 id="二、HTTP1-1"><a href="#二、HTTP1-1" class="headerlink" title="二、HTTP1.1"></a>二、HTTP1.1</h2><p>在<code>HTTP1.1</code>中，默认支持长连接（<code>Connection: keep-alive</code>），即在一个TCP连接上可以传送多个<code>HTTP</code>请求和响应，减少了建立和关闭连接的消耗和延迟</p>
<p>建立一次连接，多次请求均由这个连接完成</p>
<p> <img src="https://static.vue-js.com/22db2b90-b93b-11eb-ab90-d9ae814b240d.png"></p>
<p>这样，在加载<code>html</code>文件的时候，文件中多个请求和响应就可以在一个连接中传输</p>
<p>同时，<code>HTTP 1.1</code>还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间</p>
<p>同时，<code>HTTP1.1</code>在<code>HTTP1.0</code>的基础上，增加更多的请求头和响应头来完善的功能，如下：</p>
<ul>
<li>引入了更多的缓存控制策略，如If-Unmodified-Since, If-Match, If-None-Match等缓存头来控制缓存策略</li>
<li>引入range，允许值请求资源某个部分</li>
<li>引入host，实现了在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点</li>
</ul>
<p>并且还添加了其他的请求方法：<code>put</code>、<code>delete</code>、<code>options</code>…</p>
<h2 id="三、HTTP2-0"><a href="#三、HTTP2-0" class="headerlink" title="三、HTTP2.0"></a>三、HTTP2.0</h2><p>而<code>HTTP2.0</code>在相比之前版本，性能上有很大的提升，如添加了一个特性：</p>
<ul>
<li>多路复用</li>
<li>二进制分帧</li>
<li>首部压缩</li>
<li>服务器推送</li>
</ul>
<h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p><code>HTTP/2</code> 复用<code>TCP</code>连接，在一个连接里，客户端和浏览器都可以<strong>同时</strong>发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”</p>
<p> <img src="https://static.vue-js.com/313f1980-b93b-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上图中，可以看到第四步中<code>css</code>、<code>js</code>资源是同时发送到服务端</p>
<h3 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h3><p>帧是<code>HTTP2</code>通信中最小单位信息</p>
<p><code>HTTP/2</code> 采用二进制格式传输数据，而非 <code>HTTP 1.x </code>的文本格式，解析起来更高效</p>
<p>将请求和响应数据分割为更小的帧，并且它们采用二进制编码</p>
<p><code>HTTP2 </code>中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流</p>
<p>每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件</p>
<h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p><code>HTTP/2</code>在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送</p>
<p>首部表在<code>HTTP/2</code>的连接存续期内始终存在，由客户端和服务器共同渐进地更新</p>
<p>例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销</p>
<p> <img src="https://static.vue-js.com/3c536740-b93b-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h3><p><code>HTTP2</code>引入服务器推送，允许服务端推送资源给客户端</p>
<p>服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源</p>
<p>免得客户端再次创建连接发送请求到服务器端获取</p>
<p>这种方式非常合适加载静态资源</p>
<p> <img src="https://static.vue-js.com/47130550-b93b-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>HTTP1.0：</p>
<ul>
<li>浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接</li>
</ul>
<p>HTTP1.1：</p>
<ul>
<li>引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用</li>
<li>在同一个TCP连接里面，客户端可以同时发送多个请求</li>
<li>虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着</li>
<li>新增了一些请求方法</li>
<li>新增了一些请求头和响应头</li>
</ul>
<p>HTTP2.0：</p>
<ul>
<li>采用二进制格式而非文本格式</li>
<li>完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行</li>
<li>使用报头压缩，降低开销</li>
<li>服务器推送</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#HTTP/1.0">https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#HTTP/1.0</a></li>
<li><a href="https://www.jianshu.com/p/52d86558ca57">https://www.jianshu.com/p/52d86558ca57</a></li>
<li><a href="https://segmentfault.com/a/1190000016496448">https://segmentfault.com/a/1190000016496448</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26559480">https://zhuanlan.zhihu.com/p/26559480</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS协议 是什么？说说DNS 完整的查询过程?</title>
    <url>/%E7%BD%91%E7%BB%9C/http-DNS/</url>
    <content><![CDATA[<h1 id="DNS协议-是什么？说说DNS-完整的查询过程"><a href="#DNS协议-是什么？说说DNS-完整的查询过程" class="headerlink" title="DNS协议 是什么？说说DNS 完整的查询过程?"></a>DNS协议 是什么？说说DNS 完整的查询过程?</h1><p> <img src="https://static.vue-js.com/88081710-b78f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器</p>
<p>简单来讲，<code>DNS</code>相当于一个翻译官，负责将域名翻译成<code>ip</code>地址</p>
<ul>
<li>IP 地址：一长串能够唯一地标记网络上的计算机的数字</li>
<li>域名：是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识</li>
</ul>
<p> <img src="https://static.vue-js.com/965a03a0-b78f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h2><p>域名是一个具有层次的结构，从上到下一次为根域名、顶级域名、二级域名、三级域名…</p>
<p> <img src="https://static.vue-js.com/9f112780-b78f-11eb-85f6-6fac77c0c9b3.png"></p>
<p>例如<code>www.xxx.com</code>，<code>www</code>为三级域名、<code>xxx</code>为二级域名、<code>com</code>为顶级域名，系统为用户做了兼容，域名末尾的根域名<code>.</code>一般不需要输入</p>
<p>在域名的每一层都会有一个域名服务器，如下图：</p>
<p> <img src="https://static.vue-js.com/f40e0090-b7a4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>除此之外，还有电脑默认的本地域名服务器</p>
<h2 id="三、查询方式"><a href="#三、查询方式" class="headerlink" title="三、查询方式"></a>三、查询方式</h2><p>DNS 查询的方式有两种：</p>
<ul>
<li>递归查询：如果 A 请求 B，那么 B 作为请求的接收者一定要给 A 想要的答案</li>
</ul>
<p> <img src="https://static.vue-js.com/a73be9e0-b78f-11eb-85f6-6fac77c0c9b3.png"></p>
<ul>
<li>迭代查询：如果接收者 B 没有请求者 A 所需要的准确内容，接收者 B 将告诉请求者 A，如何去获得这个内容，但是自己并不去发出请求</li>
</ul>
<p> <img src="https://static.vue-js.com/b023e1c0-b78f-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="四、域名缓存"><a href="#四、域名缓存" class="headerlink" title="四、域名缓存"></a>四、域名缓存</h2><p>在域名服务器解析的时候，使用缓存保存域名和<code>IP</code>地址的映射</p>
<p>计算机中<code>DNS</code>的记录也分成了两种缓存方式：</p>
<ul>
<li>浏览器缓存：浏览器在获取网站域名的实际 IP 地址后会对其进行缓存，减少网络请求的损耗</li>
<li>操作系统缓存：操作系统的缓存其实是用户自己配置的 <code>hosts</code> 文件</li>
</ul>
<h2 id="五、查询过程"><a href="#五、查询过程" class="headerlink" title="五、查询过程"></a>五、查询过程</h2><p>解析域名的过程如下：</p>
<ul>
<li><p>首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表</p>
</li>
<li><p>若没有命中，则继续搜索操作系统的 DNS 缓存</p>
</li>
<li><p>若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果</p>
</li>
<li><p>若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询</p>
<ul>
<li>首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器</li>
<li>本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址</li>
<li>本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址</li>
</ul>
</li>
<li><p>本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来</p>
</li>
<li><p>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起</p>
</li>
<li><p>至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起</p>
</li>
</ul>
<p>流程如下图所示：</p>
<p> <img src="https://static.vue-js.com/bec3c740-b78f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F</a></li>
<li><a href="https://www.cnblogs.com/jmilkfan-fanguiju/p/12789677.html">https://www.cnblogs.com/jmilkfan-fanguiju/p/12789677.html</a></li>
<li><a href="https://segmentfault.com/a/1190000039039275">https://segmentfault.com/a/1190000039039275</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-HTTPS/</url>
    <content><![CDATA[<h1 id="为什么说HTTPS比HTTP安全-HTTPS是如何保证安全的？"><a href="#为什么说HTTPS比HTTP安全-HTTPS是如何保证安全的？" class="headerlink" title="为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？"></a>为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？</h1><p> <img src="https://static.vue-js.com/b5512250-b2ff-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、安全特性"><a href="#一、安全特性" class="headerlink" title="一、安全特性"></a>一、安全特性</h2><p>在上篇文章中，我们了解到<code>HTTP</code>在通信过程中，存在以下问题：</p>
<ul>
<li>通信使用明文（不加密），内容可能被窃听</li>
<li>不验证通信方的身份，因此有可能遭遇伪装</li>
</ul>
<p>而<code>HTTPS</code>的出现正是解决这些问题，<code>HTTPS</code>是建立在<code>SSL</code>之上，其安全性由<code>SSL</code>来保证</p>
<p>在采用<code>SSL</code>后，<code>HTTP</code>就拥有了<code>HTTPS</code>的加密、证书和完整性保护这些功能</p>
<blockquote>
<p>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议</p>
</blockquote>
<p> <img src="https://static.vue-js.com/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="二、如何做"><a href="#二、如何做" class="headerlink" title="二、如何做"></a>二、如何做</h2><p><code>SSL </code>的实现这些功能主要依赖于三种手段：</p>
<ul>
<li>对称加密：采用协商的密钥对数据加密</li>
<li>非对称加密：实现身份认证和密钥协商</li>
<li>摘要算法：验证信息的完整性</li>
<li>数字签名：身份验证</li>
</ul>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密指的是加密和解密使用的秘钥都是同一个，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性</p>
<p> <img src="https://static.vue-js.com/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>非对称加密，存在两个秘钥，一个叫公钥，一个叫私钥。两个秘钥是不同的，公钥可以公开给任何人使用，私钥则需要保密</p>
<p>公钥和私钥都可以用来加密解密，但公钥加密后只能用私钥解<br>密，反过来，私钥加密后也只能用公钥解密</p>
<p> <img src="https://static.vue-js.com/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h3><p>在<code>HTTPS</code>通信过程中，采用的是对称加密+非对称加密，也就是混合加密</p>
<p>在对称加密中讲到，如果能够保证了密钥的安全，那整个通信过程就可以说具有了机密性</p>
<p>而<code>HTTPS</code>采用非对称加密解决秘钥交换的问题</p>
<p>具体做法是发送密文的一方使用对方的公钥进行加密处理“对称的密钥”，然后对方用自己的私钥解密拿到“对称的密钥”</p>
<p> <img src="https://static.vue-js.com/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png"></p>
<p>这样可以确保交换的密钥是安全的前提下，使用对称加密方式进行通信</p>
<h4 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h4><p>网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文</p>
<p>上述的方法解决了数据加密，在网络传输过程中，数据有可能被篡改，并且黑客可以伪造身份发布公钥，如果你获取到假的公钥，那么混合加密也并无多大用处，你的数据扔被黑客解决</p>
<p>因此，在上述加密的基础上仍需加上完整性、身份验证的特性，来实现真正的安全，实现这一功能则是摘要算法</p>
<h3 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h3><p>实现完整性的手段主要是摘要算法，也就是常说的散列函数、哈希函数</p>
<p>可以理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”</p>
<p> <img src="https://static.vue-js.com/12798da0-b300-11eb-85f6-6fac77c0c9b3.png"></p>
<p>摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性</p>
<p>比如，你发了条消息：“转账 1000 元”，然后再加上一个 SHA-2 的摘要。网站收到后也计算一下消息的摘要，把这两份“指纹”做个对比，如果一致，就说明消息是完整可信的，没有被修改</p>
<p> <img src="https://static.vue-js.com/023790e0-b300-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名</p>
<p>原理其实很简单，就是用私钥加密，公钥解密</p>
<p>签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的</p>
<p> <img src="https://static.vue-js.com/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png"></p>
<p>和消息本身一样，因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么判断这个公钥就是你的公钥</p>
<p>这时候就需要一个第三方，就是证书验证机构</p>
<h3 id="CA验证机构"><a href="#CA验证机构" class="headerlink" title="CA验证机构"></a>CA验证机构</h3><p>数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场</p>
<p>CA 对公钥的签名认证要求包括序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书”</p>
<p>流程如下图：</p>
<p> <img src="https://static.vue-js.com/395648a0-b300-11eb-85f6-6fac77c0c9b3.png"></p>
<ul>
<li>服务器的运营人员向数字证书认证机构提出公开密钥的申请</li>
<li>数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名</li>
<li>然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起</li>
<li>服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端，以进行非对称加密方式通信</li>
</ul>
<p>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，则证明：</p>
<ul>
<li>认证服务器的公开密钥的是真实有效的数字证书认证机构</li>
<li>服务器的公开密钥是值得信赖的</li>
</ul>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>可以看到，<code>HTTPS</code>与<code>HTTP</code>虽然只差一个<code>SSL</code>，但是通信安全得到了大大的保障，通信的四大特性都以解决，解决方式如下：</p>
<ul>
<li>机密性：混合算法</li>
<li>完整性：摘要算法</li>
<li>身份认证：数字签名</li>
<li>不可否定：数字签名</li>
</ul>
<p>同时引入第三方证书机构，确保公开秘钥的安全性</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/100657391">https://zhuanlan.zhihu.com/p/100657391</a></li>
<li><a href="https://juejin.cn/post/6844903830987997197#heading-7">https://juejin.cn/post/6844903830987997197#heading-7</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1748862">https://cloud.tencent.com/developer/article/1748862</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是HTTP? HTTP 和 HTTPS 的区别?</title>
    <url>/%E7%BD%91%E7%BB%9C/http-HTTP-HTTPS/</url>
    <content><![CDATA[<h1 id="什么是HTTP-HTTP-和-HTTPS-的区别"><a href="#什么是HTTP-HTTP-和-HTTPS-的区别" class="headerlink" title="什么是HTTP? HTTP 和 HTTPS 的区别?"></a>什么是HTTP? HTTP 和 HTTPS 的区别?</h1><p> <img src="https://static.vue-js.com/f50c71f0-b20b-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、HTTP"><a href="#一、HTTP" class="headerlink" title="一、HTTP"></a>一、HTTP</h2><p><code>HTTP</code> (HyperText Transfer Protocol)，即超文本运输协议，是实现网络通信的一种规范</p>
<p> <img src="https://static.vue-js.com/fda119b0-b20b-11eb-85f6-6fac77c0c9b3.png"></p>
<p>在计算机和网络世界有，存在不同的协议，如广播协议、寻址协议、路由协议等等……</p>
<p>而<code>HTTP</code>是一个传输协议，即将数据由A传到B或将B传输到A，并且 A 与 B 之间能够存放很多第三方，如： A&lt;&#x3D;&gt;X&lt;&#x3D;&gt;Y&lt;&#x3D;&gt;Z&lt;&#x3D;&gt;B</p>
<p>传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据，如HTML 文件, 图片文件, 查询结果等超文本，能够被上层应用识别</p>
<p>在实际应用中，<code>HTTP</code>常被用于在<code>Web</code>浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密</p>
<p>特点如下：</p>
<ul>
<li><p>支持客户&#x2F;服务器模式</p>
</li>
<li><p>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快</p>
</li>
<li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记</p>
</li>
<li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</p>
</li>
<li><p>无状态：HTTP协议无法根据之前的状态进行本次的请求处理</p>
</li>
</ul>
<h2 id="二、HTTPS"><a href="#二、HTTPS" class="headerlink" title="二、HTTPS"></a>二、HTTPS</h2><p>在上述介绍<code>HTTP</code>中，了解到<code>HTTP</code>传递信息是以明文的形式发送内容，这并不安全。而<code>HTTPS</code>出现正是为了解决<code>HTTP</code>不安全的特性</p>
<p>为了保证这些隐私数据能加密传输，让<code>HTTP</code>运行安全的<code>SSL/TLS</code>协议上，即 HTTPS &#x3D; HTTP + SSL&#x2F;TLS，通过 <code>SSL</code>证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密</p>
<p><code>SSL</code> 协议位于<code> TCP/IP</code> 协议与各种应用层协议之间，浏览器和服务器在使用 <code>SSL</code> 建立连接时需要选择一组恰当的加密算法来实现安全通信，为数据通讯提供安全支持</p>
<p> <img src="https://static.vue-js.com/078c50c0-b20c-11eb-ab90-d9ae814b240d.png"></p>
<p>流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png"></p>
<ul>
<li>首先客户端通过URL访问服务器建立SSL连接</li>
<li>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端</li>
<li>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级</li>
<li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站</li>
<li>服务器利用自己的私钥解密出会话密钥</li>
<li>服务器利用会话密钥加密与客户端之间的通信</li>
</ul>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><ul>
<li>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL&#x2F;TLS协议进行了加密处理，相对更安全</li>
<li>HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443</li>
<li>HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP</li>
<li>HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.cnblogs.com/klb561/p/10289199.html">https://www.cnblogs.com/klb561/p/10289199.html</a></li>
<li><a href="https://www.jianshu.com/p/205c0fc51c97">https://www.jianshu.com/p/205c0fc51c97</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>GET 和 POST 的区别？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-GET-POST/</url>
    <content><![CDATA[<h1 id="GET-和-POST-的区别？"><a href="#GET-和-POST-的区别？" class="headerlink" title="GET 和 POST 的区别？"></a>GET 和 POST 的区别？</h1><p> <img src="https://static.vue-js.com/6e8d19e0-bc3d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>GET</code>和<code>POST</code>，两者是<code>HTTP</code>协议中发送请求的方法</p>
<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p><code>GET</code>方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据</p>
<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p><code>POST</code>方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或<strong>副作用</strong></p>
<p>本质上都是<code>TCP</code>链接，并无差别</p>
<p>但是由于<code>HTTP</code>的规定和浏览器&#x2F;服务器的限制，导致他们在应用过程中会体现出一些区别</p>
<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>从<code>w3schools</code>得到的标准答案的区别如下：</p>
<ul>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>
<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>
<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>
<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>
<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>
<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>
<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>
<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>
<li>GET参数通过URL传递，POST放在Request body中</li>
</ul>
<h3 id="参数位置"><a href="#参数位置" class="headerlink" title="参数位置"></a>参数位置</h3><p>貌似从上面看到<code>GET</code>与<code>POST</code>请求区别非常大，但两者实质并没有区别</p>
<p>无论 <code>GET </code>还是 <code>POST</code>，用的都是同一个传输层协议，所以在传输上没有区别</p>
<p>当不携带参数的时候，两者最大的区别为第一行方法名不同</p>
<blockquote>
<p>POST &#x2F;uri HTTP&#x2F;1.1 \r\n</p>
<p>GET &#x2F;uri HTTP&#x2F;1.1 \r\n</p>
</blockquote>
<p>当携带参数的时候，我们都知道<code>GET</code>请求是放在<code>url</code>中，<code>POST</code>则放在<code>body</code>中</p>
<p><code>GET</code> 方法简约版报文是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /index.html?name=qiming.c&amp;age=22 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure>

<p><code>POST </code>方法简约版报文是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.html HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">name=qiming.c&amp;age=22</span><br></pre></td></tr></table></figure>

<p>注意：这里只是约定，并不属于<code>HTTP</code>规范，相反的，我们可以在<code>POST</code>请求中<code>url</code>中写入参数，或者<code>GET</code>请求中的<code>body</code>携带参数</p>
<h3 id="参数长度"><a href="#参数长度" class="headerlink" title="参数长度"></a>参数长度</h3><p><code>HTTP </code>协议没有<code>Body</code>和 <code>URL</code> 的长度限制，对 <code>URL </code>限制的大多是浏览器和服务器的原因</p>
<p><code>IE</code>对<code>URL</code>长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持</p>
<p>这里限制的是整个<code>URL</code>长度，而不仅仅是参数值的长度</p>
<p>服务器处理长<code> URL</code> 要消耗比较多的资源，为了性能和安全考虑，会给 <code>URL</code> 长度加限制</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p><code>POST </code>比<code> GET</code> 安全，因为数据在地址栏上不可见</p>
<p>然而，从传输的角度来说，他们都是不安全的，因为<code> HTTP</code> 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文</p>
<p>只有使用<code>HTTPS</code>才能加密安全</p>
<h3 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h3><p>对于<code>GET</code>方式的请求，浏览器会把<code>http header</code>和<code>data</code>一并发送出去，服务器响应200（返回数据）</p>
<p>对于<code>POST</code>，浏览器先发送<code>header</code>，服务器响应100 <code>continue</code>，浏览器再发送<code>data</code>，服务器响应200 ok</p>
<p>并不是所有浏览器都会在<code>POST</code>中发送两次包，<code>Firefox</code>就只发送一次</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd">https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd</a></li>
<li><a href="https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/">https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/</a></li>
<li><a href="https://www.w3school.com.cn/tags/html_ref_httpmethods.asp">https://www.w3school.com.cn/tags/html_ref_httpmethods.asp</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解OSI七层模型?</title>
    <url>/%E7%BD%91%E7%BB%9C/http-OSI/</url>
    <content><![CDATA[<h1 id="如何理解OSI七层模型"><a href="#如何理解OSI七层模型" class="headerlink" title="如何理解OSI七层模型?"></a>如何理解OSI七层模型?</h1><p> <img src="https://static.vue-js.com/e2e1b910-b61e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>OSI （Open System Interconnect）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架</p>
<p><code>OSI </code>将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。即每一层扮演固定的角色，互不打扰</p>
<h2 id="二、划分"><a href="#二、划分" class="headerlink" title="二、划分"></a>二、划分</h2><p><code>OSI</code>主要划分了七层，如下图所示：</p>
<p> <img src="https://static.vue-js.com/eb1b2170-b61e-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用</p>
<p>该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 <code>DNS</code>，支持万维网应用的 <code>HTTP</code> 协议，电子邮件系统采用的 <code>SMTP </code>协议等</p>
<p>在应用层交互的数据单元我们称之为报文</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 <code>OSI </code>参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务</p>
<p>该层提供的服务主要包括数据压缩，数据加密以及数据描述，使应用程序不必担心在各台计算机中表示和存储的内部格式差异</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话</p>
<p>该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题</p>
<p>传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层</p>
<p>其中，主要的传输层协议是<code>TCP</code>和<code>UDP</code></p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网</p>
<p>网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送</p>
<p>在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包，向下传输到数据链路层</p>
<p>在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>数据链路层通常也叫做链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议</p>
<p>在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 <code>IP </code>数据报组装成帧，在两个相邻节点间的链路上传送帧</p>
<p>每一帧的数据可以分成：报头<code>head</code>和数据<code>data</code>两部分:</p>
<ul>
<li>head 标明数据发送者、接受者、数据类型，如 MAC地址</li>
<li>data 存储了计算机之间交互的数据</li>
</ul>
<p>通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>作为<code> OSI</code> 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送</p>
<p>该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性）</p>
<p>该层主要是和硬件有关，与软件关系不大</p>
<h2 id="三、传输过程"><a href="#三、传输过程" class="headerlink" title="三、传输过程"></a>三、传输过程</h2><p>数据在各层之间的传输如下图所示：</p>
<p> <img src="https://static.vue-js.com/f3a89d40-b61e-11eb-85f6-6fac77c0c9b3.png"></p>
<ul>
<li>应用层报文被传送到运输层</li>
<li>在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用</li>
<li>应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变</li>
<li>运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报</li>
<li>网络层数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧</li>
<li>在物理层数据帧被封装成比特流，之后通过传输介质传送到对端</li>
<li>对端再一步步解开封装，获取到传送的数据</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B">https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/32059190">https://zhuanlan.zhihu.com/p/32059190</a></li>
<li><a href="https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/">https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解UDP 和 TCP? 区别? 应用场景?</title>
    <url>/%E7%BD%91%E7%BB%9C/http-UDP-TCP/</url>
    <content><![CDATA[<h1 id="如何理解UDP-和-TCP-区别-应用场景"><a href="#如何理解UDP-和-TCP-区别-应用场景" class="headerlink" title="如何理解UDP 和 TCP? 区别? 应用场景?"></a>如何理解UDP 和 TCP? 区别? 应用场景?</h1><p> <img src="https://static.vue-js.com/85ad65b0-b393-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、UDP"><a href="#一、UDP" class="headerlink" title="一、UDP"></a>一、UDP</h2><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报的通信协议</strong>，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层</p>
<p>也就是说无论应用层交给<code>UDP</code>多长的报文，它统统发送，一次发送一个报文</p>
<p>而对接收方，接到后直接去除首部，交给上面的应用层就完成任务</p>
<p><code>UDP</code>报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小</p>
<p> <img src="https://static.vue-js.com/928e5d20-b393-11eb-ab90-d9ae814b240d.png"></p>
<p>特点如下：</p>
<ul>
<li>UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务</li>
<li>传输途中出现丢包，UDP 也不负责重发</li>
<li>当包的到达顺序出现乱序时，UDP没有纠正的功能。</li>
<li>并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为</li>
</ul>
<h2 id="二、TCP"><a href="#二、TCP" class="headerlink" title="二、TCP"></a>二、TCP</h2><p>TCP（Transmission Control Protocol），传输控制协议，是一种可靠、<strong>面向字节流的通信协议</strong>，把上面应用层交下来的数据看成无结构的字节流来发送</p>
<p>可以想象成流水形式的，发送方TCP会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP会根据当前网络的拥塞状态来确定每个报文段的大小</p>
<p><code>TCP</code>报文首部有20个字节，额外开销大</p>
<p> <img src="https://static.vue-js.com/a0010d40-b393-11eb-ab90-d9ae814b240d.png"></p>
<p>特点如下：</p>
<ul>
<li>TCP充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在 UDP 中都没有。</li>
<li>此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。</li>
<li>根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高可靠性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li>
</ul>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p><code>UDP</code>与<code>TCP</code>两者的都位于传输层，如下图所示：</p>
<p> <img src="https://static.vue-js.com/a92bda80-b393-11eb-ab90-d9ae814b240d.png"></p>
<p>两者区别如下表所示：</p>
<table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>可靠性</td>
<td>可靠</td>
<td>不可靠</td>
</tr>
<tr>
<td>连接性</td>
<td>面向连接</td>
<td>无连接</td>
</tr>
<tr>
<td>报文</td>
<td>面向字节流</td>
<td>面向报文</td>
</tr>
<tr>
<td>效率</td>
<td>传输效率低</td>
<td>传输效率高</td>
</tr>
<tr>
<td>双共性</td>
<td>全双工</td>
<td>一对一、一对多、多对一、多对多</td>
</tr>
<tr>
<td>流量控制</td>
<td>滑动窗口</td>
<td>无</td>
</tr>
<tr>
<td>拥塞控制</td>
<td>慢开始、拥塞避免、快重传、快恢复</td>
<td>无</td>
</tr>
<tr>
<td>传输效率</td>
<td>慢</td>
<td>快</td>
</tr>
</tbody></table>
<ul>
<li><p>TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</p>
</li>
<li><p>TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</p>
</li>
<li><p>TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</p>
</li>
<li><p>TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信</p>
</li>
</ul>
<p>两者应用场景如下图：</p>
<p> <img src="https://static.vue-js.com/b6cdd800-b393-11eb-ab90-d9ae814b240d.png"></p>
<p>可以看到，TCP 应用场景适用于对效率要求低，对准确性要求高或者要求有链接的场景，而UDP 适用场景为对效率要求高，对准确性要求低的场景</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/">https://zh.wikipedia.org</a></li>
<li><a href="https://www.shangmayuan.com/a/a1e3ceb218284cefb95de7fd.html">https://www.shangmayuan.com/a/a1e3ceb218284cefb95de7fd.html</a></li>
<li><a href="https://segmentfault.com/a/1190000021815671">https://segmentfault.com/a/1190000021815671</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解TCP/IP协议?</title>
    <url>/%E7%BD%91%E7%BB%9C/http-TCP-IP/</url>
    <content><![CDATA[<h1 id="如何理解TCP-IP协议"><a href="#如何理解TCP-IP协议" class="headerlink" title="如何理解TCP&#x2F;IP协议?"></a>如何理解TCP&#x2F;IP协议?</h1><p> <img src="https://static.vue-js.com/4f69a930-b647-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>TCP&#x2F;IP，<strong>传输控制协议</strong>&#x2F;<strong>网际协议</strong>，是指能够在多个不同网络间实现信息传输的协议簇</p>
<ul>
<li>TCP（传输控制协议）</li>
</ul>
<p>一种面向连接的、可靠的、基于字节流的传输层通信协议</p>
<ul>
<li>IP（网际协议）</li>
</ul>
<p>用于封包交换数据网络的协议</p>
<p>TCP&#x2F;IP协议不仅仅指的是<code>TCP </code>和<code>IP</code>两个协议，而是指一个由<code>FTP</code>、<code>SMTP</code>、<code>TCP</code>、<code>UDP</code>、<code>IP</code>等协议构成的协议簇，</p>
<p>只是因为在<code>TCP/IP</code>协议中<code>TCP</code>协议和<code>IP</code>协议最具代表性，所以通称为TCP&#x2F;IP协议族（英语：TCP&#x2F;IP Protocol Suite，或TCP&#x2F;IP Protocols）</p>
<h2 id="二、划分"><a href="#二、划分" class="headerlink" title="二、划分"></a>二、划分</h2><p>TCP&#x2F;IP协议族按层次分别了五层体系或者四层体系</p>
<p>五层体系的协议结构是综合了 OSI 和 TCP&#x2F;IP 优点的一种协议，包括应用层、传输层、网络层、数据链路层和物理层</p>
<p>五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是 TCP&#x2F;IP 四层体系结构，包括应用层、传输层、网络层（网际互联层）、网络接口层</p>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/5bb93610-b647-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="五层体系"><a href="#五层体系" class="headerlink" title="五层体系"></a>五层体系</h3><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p><code>TCP/IP</code> 模型将 <code>OSI </code>参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现，通过不同的应用层协议为不同的应用提供服务</p>
<p>如：<code>FTP</code>、<code>Telnet</code>、<code>DNS</code>、<code>SMTP</code> 等</p>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能</p>
<p>传输层定义了两个主要协议：传输控制协议（TCP）和用户数据报协议（UDP）</p>
<p>其中面向连接的 TCP 协议保证了数据的传输可靠性，面向无连接的 UDP 协议能够实现数据包简单、快速地传输</p>
<h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机</p>
<p>在发送数据时，网络层把运输层产生的报文段或用户数据封装成分组或包进行传送</p>
<h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报组装成帧，在两个相邻节点之间的链路上传送帧</p>
<h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境</p>
<h3 id="四层体系"><a href="#四层体系" class="headerlink" title="四层体系"></a>四层体系</h3><p>TCP&#x2F;IP 的四层结构则如下表所示：</p>
<table>
<thead>
<tr>
<th>层次名称</th>
<th>单位</th>
<th>功 能</th>
<th>协 议</th>
</tr>
</thead>
<tbody><tr>
<td>网络接口层</td>
<td>帧</td>
<td>负责实际数据的传输，对应OSI参考模型的下两层</td>
<td>HDLC（高级链路控制协议）PPP（点对点协议） SLIP（串行线路接口协议）</td>
</tr>
<tr>
<td>网络层</td>
<td>数据报</td>
<td>负责网络间的寻址数据传输，对应OSI参考模型的第三层</td>
<td>IP（网际协议） ICMP（网际控制消息协议）ARP（地址解析协议） RARP（反向地址解析协议）</td>
</tr>
<tr>
<td>传输层</td>
<td>报文段</td>
<td>负责提供可靠的传输服务，对应OSI参考模型的第四层</td>
<td>TCP（控制传输协议） UDP（用户数据报协议）</td>
</tr>
<tr>
<td>应用层</td>
<td></td>
<td>负责实现一切与应用程序相关的功能，对应OSI参考模型的上三层</td>
<td>FTP（文件传输协议） HTTP（超文本传输协议） DNS（域名服务器协议）SMTP（简单邮件传输协议）NFS（网络文件系统协议）</td>
</tr>
</tbody></table>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>OSI 参考模型与 TCP&#x2F;IP 参考模型区别如下：</p>
<p>相同点：</p>
<ul>
<li>OSI 参考模型与 TCP&#x2F;IP 参考模型都采用了层次结构</li>
<li>都能够提供面向连接和无连接两种通信服务机制</li>
</ul>
<p>不同点：</p>
<ul>
<li><p>OSI 采用的七层模型； TCP&#x2F;IP 是四层或五层结构</p>
</li>
<li><p>TCP&#x2F;IP 参考模型没有对网络接口层进行细分，只是一些概念性的描述； OSI 参考模型对服务和协议做了明确的区分</p>
</li>
<li><p>OSI 参考模型虽然网络划分为七层，但实现起来较困难。TCP&#x2F;IP 参考模型作为一种简化的分层结构是可以的</p>
</li>
<li><p>TCP&#x2F;IP协议去掉表示层和会话层的原因在于会话层、表示层、应用层都是在应用程序内部实现的，最终产出的是一个应用数据包，而应用程序之间是几乎无法实现代码的抽象共享的，这也就造成 <code>OSI</code> 设想中的应用程序维度的分层是无法实现的</p>
</li>
</ul>
<p>三种模型对应关系如下图所示：</p>
<p><img src="https://static.vue-js.com/3fbff4d0-b647-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F">https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/103162095">https://zhuanlan.zhihu.com/p/103162095</a></li>
<li><a href="https://segmentfault.com/a/1190000039204681">https://segmentfault.com/a/1190000039204681</a></li>
<li><a href="https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/">https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>对WebSocket的理解？应用场景</title>
    <url>/%E7%BD%91%E7%BB%9C/http-WebSocket/</url>
    <content><![CDATA[<h1 id="对WebSocket的理解？应用场景？"><a href="#对WebSocket的理解？应用场景？" class="headerlink" title="对WebSocket的理解？应用场景？"></a>对WebSocket的理解？应用场景？</h1><p> <img src="https://static.vue-js.com/a358a8c0-c0f1-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>WebSocket，是一种网络传输协议，位于<code>OSI</code>模型的应用层。可在单个<code>TCP</code>连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅</p>
<p>客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输</p>
<p> <img src="https://static.vue-js.com/ad386e20-c0f1-11eb-85f6-6fac77c0c9b3.png"></p>
<p>从上图可见，<code>websocket</code>服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据</p>
<p>而在<code>websocket</code>出现之前，开发实时<code>web</code>应用的方式为轮询</p>
<p>不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果</p>
<p>轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 <code>CPU </code>资源</p>
<h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><h3 id="全双工"><a href="#全双工" class="headerlink" title="全双工"></a>全双工</h3><p>通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合</p>
<p>例如指 A→B 的同时 B→A ，是瞬时同步的</p>
<h3 id="二进制帧"><a href="#二进制帧" class="headerlink" title="二进制帧"></a>二进制帧</h3><p>采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比<code>http/2</code>，<code>WebSocket </code>更侧重于“实时通信”，而<code>HTTP/2</code> 更侧重于提高传输效率，所以两者的帧结构也有很大的区别</p>
<p>不像 <code>HTTP/2</code> 那样定义流，也就不存在多路复用、优先级等特性</p>
<p>自身就是全双工，也不需要服务器推送</p>
<h3 id="协议名"><a href="#协议名" class="headerlink" title="协议名"></a>协议名</h3><p>引入<code>ws</code>和<code>wss</code>分别代表明文和密文的<code>websocket</code>协议，且默认端口使用80或443，几乎与<code>http</code>一致</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">ws://www.chrono.com</span><br><span class="line">ws://www.chrono.com:8080/srv</span><br><span class="line">wss://www.chrono.com:445/im?user_id=xxx</span><br></pre></td></tr></table></figure>



<h3 id="握手"><a href="#握手" class="headerlink" title="握手"></a>握手</h3><p><code>WebSocket </code>也要有一个握手过程，然后才能正式收发数据</p>
<p>客户端发送数据格式如下：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>server.example.com</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span><span class="punctuation">: </span>dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://example.com</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span><span class="punctuation">: </span>chat, superchat</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span><span class="punctuation">: </span>13</span><br></pre></td></tr></table></figure>

<ul>
<li>Connection：必须设置Upgrade，表示客户端希望连接升级</li>
<li>Upgrade：必须设置Websocket，表示希望升级到Websocket协议</li>
<li>Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接</li>
<li>Sec-WebSocket-Version ：表示支持的Websocket版本</li>
</ul>
<p>服务端返回的数据格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure>

<ul>
<li>HTTP&#x2F;1.1 101 Switching Protocols：表示服务端接受 WebSocket 协议的客户端连接</li>
<li>Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部</li>
<li>更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少</li>
<li>保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证</li>
<li>更好的二进制支持：定义了二进制帧，更好处理二进制内容</li>
<li>支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议</li>
<li>更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率</li>
</ul>
<h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><p>基于<code>websocket</code>的事实通信的特点，其存在的应用场景大概有：</p>
<ul>
<li>弹幕</li>
<li>媒体聊天</li>
<li>协同编辑</li>
<li>基于位置的应用</li>
<li>体育实况更新</li>
<li>股票基金报价实时更新</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/WebSocket">https://zh.wikipedia.org/wiki/WebSocket</a></li>
<li><a href="https://www.oschina.net/translate/9-killer-uses-for-websockets">https://www.oschina.net/translate/9-killer-uses-for-websockets</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>地址栏输入 URL 敲下回车后发生了什么</title>
    <url>/%E7%BD%91%E7%BB%9C/http-after-url/</url>
    <content><![CDATA[<h1 id="地址栏输入-URL-敲下回车后发生了什么"><a href="#地址栏输入-URL-敲下回车后发生了什么" class="headerlink" title="地址栏输入 URL 敲下回车后发生了什么?"></a>地址栏输入 URL 敲下回车后发生了什么?</h1><p> <img src="https://static.vue-js.com/11bf1f20-bdf4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、简单分析"><a href="#一、简单分析" class="headerlink" title="一、简单分析"></a>一、简单分析</h2><p>简单的分析，从输入 <code>URL</code>到回车后发生的行为如下：</p>
<ul>
<li>URL解析</li>
<li>DNS 查询</li>
<li>TCP 连接</li>
<li>HTTP 请求</li>
<li>响应请求</li>
<li>页面渲染</li>
</ul>
<h2 id="二、详细分析"><a href="#二、详细分析" class="headerlink" title="二、详细分析"></a>二、详细分析</h2><h3 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h3><p>首先判断你输入的是一个合法的<code> URL</code> 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作</p>
<p><code>URL</code>的解析第过程中的第一步，一个<code>url</code>的结构解析如下：</p>
<p> <img src="https://static.vue-js.com/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h3><p>在之前文章中讲过<code>DNS</code>的查询，这里就不再讲述了</p>
<p>整个查询过程如下图所示：</p>
<p> <img src="https://static.vue-js.com/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>最终，获取到了域名对应的目标服务器<code>IP</code>地址</p>
<h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>在之前文章中，了解到<code>tcp</code>是一种面向有连接的传输层协议</p>
<p>在确定目标服务器服务器的<code>IP</code>地址后，则经历三次握手建立<code>TCP</code>连接，流程如下：</p>
<p> <img src="https://static.vue-js.com/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="发送-http-请求"><a href="#发送-http-请求" class="headerlink" title="发送 http 请求"></a>发送 http 请求</h3><p>当建立<code>tcp</code>连接之后，就可以在这基础上进行通信，浏览器发送 <code>http</code> 请求到目标服务器</p>
<p>请求的内容包括：</p>
<ul>
<li>请求行</li>
<li>请求头</li>
<li>请求主体</li>
</ul>
<p> <img src="https://static.vue-js.com/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h3><p>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个<code>HTTP</code>响应消息，包括：</p>
<ul>
<li>状态行</li>
<li>响应头</li>
<li>响应正文</li>
</ul>
<p> <img src="https://static.vue-js.com/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png"></p>
<p>在服务器响应之后，由于现在<code>http</code>默认开始长连接<code>keep-alive</code>，当页面关闭之后，<code>tcp</code>链接则会经过四次挥手完成断开</p>
<h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>当浏览器接收到服务器响应的资源后，首先会对资源进行解析：</p>
<ul>
<li>查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等</li>
<li>查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式</li>
</ul>
<p>关于页面的渲染过程如下：</p>
<ul>
<li>解析HTML，构建 DOM 树</li>
<li>解析 CSS ，生成 CSS 规则树</li>
<li>合并 DOM 树和 CSS 规则，生成 render 树</li>
<li>布局 render 树（ Layout &#x2F; reflow ），负责各元素尺寸、位置的计算</li>
<li>绘制 render 树（ paint ），绘制页面像素信息</li>
<li>浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上</li>
</ul>
<p> <img src="https://static.vue-js.com/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://github.com/febobo/web-interview/issues/141">https://github.com/febobo/web-interview/issues/141</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/80551769">https://zhuanlan.zhihu.com/p/80551769</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP为什么需要三次握手和四次挥手？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-handshakes-waves/</url>
    <content><![CDATA[<h1 id="TCP为什么需要三次握手和四次挥手？"><a href="#TCP为什么需要三次握手和四次挥手？" class="headerlink" title="TCP为什么需要三次握手和四次挥手？"></a>TCP为什么需要三次握手和四次挥手？</h1><p> <img src="https://static.vue-js.com/ef4696a0-beb9-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、三次握手"><a href="#一、三次握手" class="headerlink" title="一、三次握手"></a>一、三次握手</h2><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包</p>
<p>主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p>
<p>过程如下：</p>
<ul>
<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于  SYN_SENT 状态</li>
<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 SYN_RCVD  的状态</li>
<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED  状态，此时，双方已建立起了连接</li>
</ul>
<p> <img src="https://static.vue-js.com/fb489fc0-beb9-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上述每一次握手的作用如下：</p>
<ul>
<li>第一次握手：客户端发送网络包，服务端收到了<br>这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li>
<li>第二次握手：服务端发包，客户端收到了<br>这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常</li>
<li>第三次握手：客户端发包，服务端收到了。<br>这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常</li>
</ul>
<p>通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了</p>
<h3 id="为什么不是两次握手"><a href="#为什么不是两次握手" class="headerlink" title="为什么不是两次握手?"></a>为什么不是两次握手?</h3><p>如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到</p>
<p>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</p>
<h2 id="二、四次挥手"><a href="#二、四次挥手" class="headerlink" title="二、四次挥手"></a>二、四次挥手</h2><p><code>tcp</code>终止一个连接，需要经过四次挥手</p>
<p>过程如下：</p>
<ul>
<li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于  FIN_WAIT1 状态，停止发送数据，等待服务端的确认</li>
<li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态</li>
<li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态</li>
<li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态</li>
</ul>
<p> <img src="https://static.vue-js.com/0a3ebb90-beba-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="四次挥手原因"><a href="#四次挥手原因" class="headerlink" title="四次挥手原因"></a>四次挥手原因</h3><p>服务端在收到客户端断开连接<code>Fin</code>报文后，并不会立即关闭连接，而是先发送一个<code>ACK</code>包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送<code>FIN</code>报文断开连接，因此需要四次挥手</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>一个完整的三次握手四次挥手如下图所示：</p>
<p> <img src="https://static.vue-js.com/65941490-beba-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/53374516">https://zhuanlan.zhihu.com/p/53374516</a></li>
<li><a href="https://segmentfault.com/a/1190000020610336">https://segmentfault.com/a/1190000020610336</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 常见的请求头有哪些? 作用？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-headers/</url>
    <content><![CDATA[<h1 id="HTTP-常见的请求头有哪些-作用？"><a href="#HTTP-常见的请求头有哪些-作用？" class="headerlink" title="HTTP 常见的请求头有哪些? 作用？"></a>HTTP 常见的请求头有哪些? 作用？</h1><p> <img src="https://static.vue-js.com/964abb00-bc69-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>HTTP头字段（HTTP header fields）,是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分</p>
<p>它们定义了一个超文本传输协议事务中的操作参数</p>
<p>HTTP头部字段可以自己根据需要定义，因此可能在 <code>Web </code>服务器和浏览器上发现非标准的头字段</p>
<p>下面是一个<code>HTTP</code>请求的请求头：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/home.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>developer.mozilla.org</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://developer.mozilla.org/testpage.html</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Mon, 18 Jul 2016 02:36:04 GMT</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>&quot;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&quot;</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br></pre></td></tr></table></figure>


<h2 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h2><p>常见的请求字段如下表所示：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>能够接受的回应内容类型（Content-Types）</td>
<td>Accept: text&#x2F;plain</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>能够接受的字符集</td>
<td>Accept-Charset: utf-8</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>能够接受的编码方式列表</td>
<td>Accept-Encoding: gzip, deflate</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>能够接受的回应内容的自然语言列表</td>
<td>Accept-Language: en-US</td>
</tr>
<tr>
<td>Authorization</td>
<td>用于超文本传输协议的认证的认证信息</td>
<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ&#x3D;&#x3D;</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>用来指定在这次的请求&#x2F;响应链中的所有缓存机制 都必须 遵守的指令</td>
<td>Cache-Control: no-cache</td>
</tr>
<tr>
<td>Connection</td>
<td>该浏览器想要优先使用的连接类型</td>
<td>Connection: keep-alive Connection: Upgrade</td>
</tr>
<tr>
<td>Cookie</td>
<td>服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie</td>
<td>Cookie: $Version&#x3D;1; Skin&#x3D;new;</td>
</tr>
<tr>
<td>Content-Length</td>
<td>以 八位字节数组 （8位的字节）表示的请求体的长度</td>
<td>Content-Length: 348</td>
</tr>
<tr>
<td>Content-Type</td>
<td>请求体的 多媒体类型</td>
<td>Content-Type: application&#x2F;x-www-form-urlencoded</td>
</tr>
<tr>
<td>Date</td>
<td>发送该消息的日期和时间</td>
<td>Date: Tue, 15 Nov 1994 08:12:31 GMT</td>
</tr>
<tr>
<td>Expect</td>
<td>表明客户端要求服务器做出特定的行为</td>
<td>Expect: 100-continue</td>
</tr>
<tr>
<td>Host</td>
<td>服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号</td>
<td>Host: en.wikipedia.org:80 Host: en.wikipedia.org</td>
</tr>
<tr>
<td>If-Match</td>
<td>仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源</td>
<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>允许在对应的内容未被修改的情况下返回304未修改</td>
<td>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>允许在对应的内容未被修改的情况下返回304未修改</td>
<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td>If-Range</td>
<td>如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体</td>
<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td>Range</td>
<td>仅请求某个实体的一部分</td>
<td>Range: bytes&#x3D;500-999</td>
</tr>
<tr>
<td>User-Agent</td>
<td>浏览器的浏览器身份标识字符串</td>
<td>User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:12.0) Gecko&#x2F;20100101 Firefox&#x2F;21.0</td>
</tr>
<tr>
<td>Origin</td>
<td>发起一个针对 跨来源资源共享 的请求</td>
<td>Origin: <a href="http://www.example-social-network.com/">http://www.example-social-network.com</a></td>
</tr>
</tbody></table>
<h2 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h2><p>通过配合请求头和响应头，可以满足一些场景的功能实现：</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存是利用的是<code>【Last-Modified，If-Modified-Since】</code>和<code>【ETag、If-None-Match】</code>这两对请求头响应头来管理的</p>
<p><code>Last-Modified</code> 表示本地文件最后修改日期，浏览器会在request header加上<code>If-Modified-Since</code>（上次返回的<code>Last-Modified</code>的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p>
<p><code>Etag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的</p>
<p><code>If-None-Match</code>的header会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来</p>
<p>而强制缓存不需要发送请求到服务端，根据请求头<code>expires</code>和<code>cache-control</code>判断是否命中强缓存</p>
<p>强制缓存与协商缓存的流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/a4065b00-bc69-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="会话状态"><a href="#会话状态" class="headerlink" title="会话状态"></a>会话状态</h3><p><code>cookie</code>，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据，通过响应头<code>set-cookie</code>决定</p>
<p>作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 <code>Cookie </code>有效期、安全性、使用范围的可选属性组成</p>
<p><code>Cookie</code> 主要用于以下三个方面：</p>
<ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">https://zh.wikipedia.org/wiki/HTTP头字段</a></li>
<li><a href="https://github.com/amandakelake/blog/issues/41">https://github.com/amandakelake/blog/issues/41</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>全面提升免疫力的详细计划</title>
    <url>/%E7%94%9F%E6%B4%BB%E5%81%A5%E5%BA%B7/life-boost-immune-system/</url>
    <content><![CDATA[<h1 id="全面提升免疫力的详细计划"><a href="#全面提升免疫力的详细计划" class="headerlink" title="全面提升免疫力的详细计划"></a>全面提升免疫力的详细计划</h1><p>免疫系统是人体抵抗疾病的天然防御机制。通过科学的方法提高免疫力，可以帮助我们更好地预防疾病，保持健康的状态。以下是一个全面的提升免疫力计划。</p>
<h2 id="一、营养补充计划"><a href="#一、营养补充计划" class="headerlink" title="一、营养补充计划"></a>一、营养补充计划</h2><h3 id="1-每日必需营养素"><a href="#1-每日必需营养素" class="headerlink" title="1. 每日必需营养素"></a>1. 每日必需营养素</h3><ul>
<li><p>维生素 C：每天摄入 500-1000mg</p>
<ul>
<li>食物来源：柑橘类水果、猕猴桃、青椒</li>
<li>最佳食用时间：早餐或午餐</li>
</ul>
</li>
<li><p>维生素 D：每天 400-800IU</p>
<ul>
<li>适度晒太阳：每天 15-20 分钟</li>
<li>食物来源：鱼类、蛋黄、奶制品</li>
</ul>
</li>
<li><p>锌：每天 15-30mg</p>
<ul>
<li>食物来源：牡蛎、瘦肉、南瓜子</li>
</ul>
</li>
</ul>
<h3 id="2-免疫力提升食物清单"><a href="#2-免疫力提升食物清单" class="headerlink" title="2. 免疫力提升食物清单"></a>2. 免疫力提升食物清单</h3><ul>
<li>蒜头：含有大蒜素，每天 2-3 瓣</li>
<li>姜：具有抗炎作用，可泡茶或炒菜</li>
<li>蘑菇：提供 β-葡聚糖，每周 2-3 次</li>
<li>酸奶：补充益生菌，每天一份</li>
</ul>
<h2 id="二、运动计划"><a href="#二、运动计划" class="headerlink" title="二、运动计划"></a>二、运动计划</h2><h3 id="1-有氧运动"><a href="#1-有氧运动" class="headerlink" title="1. 有氧运动"></a>1. 有氧运动</h3><ul>
<li>快走：每天 30-45 分钟</li>
<li>慢跑：每周 3 次，每次 20-30 分钟</li>
<li>游泳：每周 1-2 次，每次 30 分钟</li>
</ul>
<h3 id="2-力量训练"><a href="#2-力量训练" class="headerlink" title="2. 力量训练"></a>2. 力量训练</h3><ul>
<li>每周 2-3 次</li>
<li>每次 30-45 分钟</li>
<li>包括：<ul>
<li>俯卧撑</li>
<li>深蹲</li>
<li>平板支撑</li>
</ul>
</li>
</ul>
<h2 id="三、睡眠计划"><a href="#三、睡眠计划" class="headerlink" title="三、睡眠计划"></a>三、睡眠计划</h2><h3 id="1-睡眠时间安排"><a href="#1-睡眠时间安排" class="headerlink" title="1. 睡眠时间安排"></a>1. 睡眠时间安排</h3><ul>
<li>晚上 10:30 前上床</li>
<li>保证 7-8 小时充足睡眠</li>
<li>午休 20-30 分钟（如可能）</li>
</ul>
<h3 id="2-提高睡眠质量的方法"><a href="#2-提高睡眠质量的方法" class="headerlink" title="2. 提高睡眠质量的方法"></a>2. 提高睡眠质量的方法</h3><ul>
<li>睡前 1 小时不看手机</li>
<li>保持房间温度在 18-22℃</li>
<li>使用遮光窗帘</li>
<li>保持房间安静或使用白噪音</li>
</ul>
<h2 id="四、压力管理"><a href="#四、压力管理" class="headerlink" title="四、压力管理"></a>四、压力管理</h2><h3 id="1-日常减压方法"><a href="#1-日常减压方法" class="headerlink" title="1. 日常减压方法"></a>1. 日常减压方法</h3><ul>
<li>每天进行 15-20 分钟冥想</li>
<li>深呼吸练习：每天 3 次，每次 5 分钟</li>
<li>保持规律的作息时间</li>
<li>培养兴趣爱好</li>
</ul>
<h3 id="2-情绪管理"><a href="#2-情绪管理" class="headerlink" title="2. 情绪管理"></a>2. 情绪管理</h3><ul>
<li>保持积极心态</li>
<li>适当倾诉和社交</li>
<li>每周安排 1-2 次放松活动</li>
</ul>
<h2 id="五、生活习惯调整"><a href="#五、生活习惯调整" class="headerlink" title="五、生活习惯调整"></a>五、生活习惯调整</h2><h3 id="1-个人卫生"><a href="#1-个人卫生" class="headerlink" title="1. 个人卫生"></a>1. 个人卫生</h3><ul>
<li>勤洗手：每次 20-30 秒</li>
<li>保持环境清洁</li>
<li>适时更换毛巾和床单</li>
</ul>
<h3 id="2-饮食习惯"><a href="#2-饮食习惯" class="headerlink" title="2. 饮食习惯"></a>2. 饮食习惯</h3><ul>
<li>每天喝够 2000ml 水</li>
<li>少食多餐，每餐八分饱</li>
<li>减少精制糖和油炸食品</li>
<li>增加蔬菜水果摄入</li>
</ul>
<h2 id="六、定期检查"><a href="#六、定期检查" class="headerlink" title="六、定期检查"></a>六、定期检查</h2><h3 id="1-身体检查"><a href="#1-身体检查" class="headerlink" title="1. 身体检查"></a>1. 身体检查</h3><ul>
<li>每年进行一次体检</li>
<li>定期监测身体指标</li>
<li>及时处理身体不适</li>
</ul>
<h3 id="2-指标监测"><a href="#2-指标监测" class="headerlink" title="2. 指标监测"></a>2. 指标监测</h3><ul>
<li>定期测量体重</li>
<li>监测血压</li>
<li>注意体温变化</li>
</ul>
<h2 id="执行建议"><a href="#执行建议" class="headerlink" title="执行建议"></a>执行建议</h2><ol>
<li>循序渐进：不要急于一次性改变所有习惯</li>
<li>建立记录：记录每日完成情况</li>
<li>坚持执行：至少坚持 3 个月养成习惯</li>
<li>适时调整：根据身体反应调整计划</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>以上建议仅供参考，具体实施请根据个人情况调整</li>
<li>如有特殊健康问题，请遵医嘱</li>
<li>保持作息规律比单一措施更重要</li>
<li>适度锻炼，避免过度疲劳</li>
</ol>
<p>记住，提高免疫力是一个循序渐进的过程，需要在日常生活中持续坚持。通过以上综合计划，配合科学的生活方式，相信您的免疫力会得到显著提升。</p>
<h2 id="免疫力提升的关键时间节点"><a href="#免疫力提升的关键时间节点" class="headerlink" title="免疫力提升的关键时间节点"></a>免疫力提升的关键时间节点</h2><h3 id="短期效果（1-4周）"><a href="#短期效果（1-4周）" class="headerlink" title="短期效果（1-4周）"></a>短期效果（1-4周）</h3><ol>
<li><p>睡眠改善</p>
<ul>
<li>第1周：入睡时间缩短</li>
<li>第2-3周：睡眠质量明显提升</li>
<li>第4周：精力充沛感明显</li>
</ul>
</li>
<li><p>体能提升</p>
<ul>
<li>第1-2周：适应期，可能会感觉疲劳</li>
<li>第3-4周：体能明显提升，运动后恢复更快</li>
</ul>
</li>
<li><p>饮食调整</p>
<ul>
<li>第1周：消化系统适应期</li>
<li>第2-3周：肠道功能改善</li>
<li>第4周：身体更轻盈，精力更充沛</li>
</ul>
</li>
</ol>
<h3 id="中期效果（1-3个月）"><a href="#中期效果（1-3个月）" class="headerlink" title="中期效果（1-3个月）"></a>中期效果（1-3个月）</h3><ol>
<li><p>身体指标改善</p>
<ul>
<li>血压趋于稳定</li>
<li>体重达到理想范围</li>
<li>皮肤状态改善</li>
<li>感冒等小病发生频率降低</li>
</ul>
</li>
<li><p>心理状态提升</p>
<ul>
<li>压力耐受度提高</li>
<li>情绪更稳定</li>
<li>睡眠质量持续改善</li>
</ul>
</li>
</ol>
<h3 id="长期效果（3-6个月及以上）"><a href="#长期效果（3-6个月及以上）" class="headerlink" title="长期效果（3-6个月及以上）"></a>长期效果（3-6个月及以上）</h3><ol>
<li>免疫系统质的飞跃<ul>
<li>抵抗力显著增强</li>
<li>恢复能力加快</li>
<li>慢性疾病风险降低</li>
<li>精力持久稳定</li>
</ul>
</li>
</ol>
<h2 id="突破关键点"><a href="#突破关键点" class="headerlink" title="突破关键点"></a>突破关键点</h2><h3 id="1-坚持的黄金期"><a href="#1-坚持的黄金期" class="headerlink" title="1. 坚持的黄金期"></a>1. 坚持的黄金期</h3><ul>
<li>第21天：形成初步习惯</li>
<li>第60天：习惯稳定形成</li>
<li>第90天：生活方式彻底改变</li>
</ul>
<h3 id="2-关键突破技巧"><a href="#2-关键突破技巧" class="headerlink" title="2. 关键突破技巧"></a>2. 关键突破技巧</h3><ol>
<li><p>建立正向反馈</p>
<ul>
<li>每周记录身体变化</li>
<li>定期进行体能测试</li>
<li>拍照记录外表变化</li>
</ul>
</li>
<li><p>克服瓶颈期</p>
<ul>
<li>第3-4周可能出现倦怠</li>
<li>第8-10周可能遇到平台期</li>
<li>应对方法：<ul>
<li>适当调整运动强度</li>
<li>变换运动方式</li>
<li>调整营养摄入</li>
<li>加入新的健康习惯</li>
</ul>
</li>
</ul>
</li>
<li><p>维持动力的方法</p>
<ul>
<li>找到运动伙伴</li>
<li>参加健康社群</li>
<li>设定阶段性目标</li>
<li>奖励自己的进步</li>
</ul>
</li>
</ol>
<h3 id="3-效果倍增的组合拳"><a href="#3-效果倍增的组合拳" class="headerlink" title="3. 效果倍增的组合拳"></a>3. 效果倍增的组合拳</h3><ol>
<li><p>晨间黄金时段（6:00-8:00）</p>
<ul>
<li>晨练20分钟</li>
<li>喝温水500ml</li>
<li>营养早餐</li>
</ul>
</li>
<li><p>午间关键期（12:00-14:00）</p>
<ul>
<li>适量午餐</li>
<li>午休15-20分钟</li>
<li>喝水补充</li>
</ul>
</li>
<li><p>夜间修复期（21:00-22:30）</p>
<ul>
<li>热水泡脚</li>
<li>放松练习</li>
<li>早睡保证</li>
</ul>
</li>
</ol>
<h2 id="注意事项补充"><a href="#注意事项补充" class="headerlink" title="注意事项补充"></a>注意事项补充</h2><ol>
<li>改变不要过急，循序渐进最重要</li>
<li>每个人体质不同，效果显现时间也不同</li>
<li>保持耐心，关注长期效果</li>
<li>如果感觉不适，及时调整或咨询医生</li>
</ol>
<p>记住：真正的改变是一个循序渐进的过程，快速见效的方法往往不够稳定。通过科学且持续的努力，3-6个月就能达到免疫力的质的飞跃，一年以上的坚持将会带来更持久的健康改变。</p>
<h2 id="特殊工作时间的调整方案"><a href="#特殊工作时间的调整方案" class="headerlink" title="特殊工作时间的调整方案"></a>特殊工作时间的调整方案</h2><h3 id="1-作息时间调整"><a href="#1-作息时间调整" class="headerlink" title="1. 作息时间调整"></a>1. 作息时间调整</h3><ul>
<li>睡眠时间：凌晨1:30-9:00（确保7.5小时睡眠）</li>
<li>午休时间：13:00-13:30（短暂补充）</li>
<li>建议作息表：<ul>
<li>9:00 起床</li>
<li>9:15-9:45 晨间活动</li>
<li>13:00-13:30 午休</li>
<li>1:30 就寝</li>
</ul>
</li>
</ul>
<h3 id="2-优化建议"><a href="#2-优化建议" class="headerlink" title="2. 优化建议"></a>2. 优化建议</h3><ol>
<li><p>早晨安排（9:00-10:00）</p>
<ul>
<li>起床后喝500ml温水</li>
<li>10分钟轻度拉伸</li>
<li>营养早餐</li>
<li>补充维生素D（如无法晒太阳）</li>
</ul>
</li>
<li><p>午间调整（13:00-14:00）</p>
<ul>
<li>午餐避免过饱</li>
<li>午休20-30分钟（使用眼罩）</li>
<li>适量运动或站立办公</li>
</ul>
</li>
<li><p>晚间规划（22:00-1:30）</p>
<ul>
<li>22:00开始减少工作强度</li>
<li>23:00后避免剧烈运动</li>
<li>0:30开始准备睡眠</li>
<li>1:00-1:30泡脚放松</li>
</ul>
</li>
</ol>
<h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><ol>
<li><p>作息调整</p>
<ul>
<li>周末尽量保持相同作息</li>
<li>避免熬夜超过2点</li>
<li>保证睡眠环境（遮光、安静）</li>
</ul>
</li>
<li><p>运动建议</p>
<ul>
<li>主要在10:00-22:00之间进行</li>
<li>避免临睡前剧烈运动</li>
<li>可以选择：<ul>
<li>午休后轻度运动</li>
<li>晚餐后散步</li>
<li>下班前健身</li>
</ul>
</li>
</ul>
</li>
<li><p>饮食调整</p>
<ul>
<li>早餐（9:30前）：营养丰富</li>
<li>午餐（12:30）：适量主食</li>
<li>晚餐（20:00前）：易消化</li>
<li>避免23:00后进食</li>
</ul>
</li>
</ol>
<h3 id="4-免疫力提升重点"><a href="#4-免疫力提升重点" class="headerlink" title="4. 免疫力提升重点"></a>4. 免疫力提升重点</h3><ol>
<li><p>作息规律最重要</p>
<ul>
<li>固定起床时间</li>
<li>保证睡眠时长</li>
<li>适度午休</li>
</ul>
</li>
<li><p>营养补充时间调整</p>
<ul>
<li>维生素C：早餐和午餐</li>
<li>维生素D：早上补充</li>
<li>蛋白质：午餐为主</li>
<li>益生菌：晚餐后</li>
</ul>
</li>
<li><p>运动安排</p>
<ul>
<li>10:00-11:00：适合有氧运动</li>
<li>15:00-17:00：适合力量训练</li>
<li>19:00-21:00：适合舒缓运动</li>
</ul>
</li>
</ol>
<h3 id="5-效果优化建议"><a href="#5-效果优化建议" class="headerlink" title="5. 效果优化建议"></a>5. 效果优化建议</h3><ol>
<li><p>提高睡眠质量</p>
<ul>
<li>使用遮光窗帘</li>
<li>调整空调温度</li>
<li>准备眼罩和耳塞</li>
<li>睡前1小时避免使用电子设备</li>
</ul>
</li>
<li><p>工作期间注意事项</p>
<ul>
<li>每60分钟起身活动</li>
<li>保持适度饮水</li>
<li>注意办公室采光</li>
<li>适时进行眼部放松</li>
</ul>
</li>
<li><p>压力管理</p>
<ul>
<li>工作间隙深呼吸</li>
<li>午休时听轻音乐</li>
<li>建立工作与休息界限</li>
<li>培养放松习惯</li>
</ul>
</li>
</ol>
<p>记住：特殊的工作时间不是障碍，关键是建立适合自己的规律作息。通过以上调整，同样可以在3-6个月内看到明显的免疫力提升。重点是保证睡眠质量和作息规律性，其他活动围绕这个核心时间来安排。 </p>
]]></content>
      <categories>
        <category>生活健康</category>
      </categories>
      <tags>
        <tag>健康</tag>
        <tag>免疫力</tag>
        <tag>生活方式</tag>
      </tags>
  </entry>
  <entry>
    <title>说说HTTP 常见的状态码有哪些，适用场景？</title>
    <url>/%E7%BD%91%E7%BB%9C/http-status/</url>
    <content><![CDATA[<h1 id="说说HTTP-常见的状态码有哪些，适用场景？"><a href="#说说HTTP-常见的状态码有哪些，适用场景？" class="headerlink" title="说说HTTP 常见的状态码有哪些，适用场景？"></a>说说HTTP 常见的状态码有哪些，适用场景？</h1><p> <img src="https://static.vue-js.com/038831d0-bbc9-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>HTTP状态码（英语：HTTP Status Code），用以表示网页服务器超文本传输协议响应状态的3位数字代码</p>
<p>它由 RFC 2616规范定义的，并得到 <code>RFC 2518</code>、<code>RFC 2817</code>、<code>RFC 2295</code>、<code>RFC 2774</code>与 <code>RFC 4918</code>等规范扩展</p>
<p>简单来讲，<code>http</code>状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态</p>
<h2 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h2><p>状态码第一位数字决定了不同的响应状态，有如下：</p>
<ul>
<li>1 表示消息</li>
<li>2 表示成功</li>
<li>3 表示重定向</li>
<li>4 表示请求错误</li>
<li>5 表示服务器错误</li>
</ul>
<h3 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h3><p>代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>
<p>常见的有：</p>
<ul>
<li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li>
<li>101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级</li>
</ul>
<h3 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h3><p>代表请求已成功被服务器接收、理解、并接受</p>
<p>常见的有：</p>
<ul>
<li><p>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</p>
</li>
<li><p>201（已创建）：请求成功并且服务器创建了新的资源</p>
</li>
<li><p>202（已创建）：服务器已经接收请求，但尚未处理</p>
</li>
<li><p>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源</p>
</li>
<li><p>204（无内容）：服务器成功处理请求，但没有返回任何内容</p>
</li>
<li><p>205（重置内容）：服务器成功处理请求，但没有返回任何内容</p>
</li>
<li><p>206（部分内容）：服务器成功处理了部分请求</p>
</li>
</ul>
<h3 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h3><p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</p>
<p>常见的有：</p>
<ul>
<li><p>300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</p>
</li>
<li><p>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</p>
</li>
<li><p>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</p>
</li>
<li><p>303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</p>
</li>
<li><p>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</p>
</li>
<li><p>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</p>
</li>
</ul>
<h3 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h3><p>代表了客户端看起来可能发生了错误，妨碍了服务器的处理</p>
<p>常见的有：</p>
<ul>
<li>400（错误请求）： 服务器不理解请求的语法</li>
<li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li>
<li>403（禁止）： 服务器拒绝请求</li>
<li>404（未找到）： 服务器找不到请求的网页</li>
<li>405（方法禁用）： 禁用请求中指定的方法</li>
<li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li>
<li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li>
<li>408（请求超时）： 服务器等候请求时发生超时</li>
</ul>
<h3 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h3><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生</p>
<p>常见的有：</p>
<ul>
<li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li>
<li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li>
<li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li>
<li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li>
<li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>
<li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li>
</ul>
<h2 id="三、适用场景"><a href="#三、适用场景" class="headerlink" title="三、适用场景"></a>三、适用场景</h2><p>下面给出一些状态码的适用场景：</p>
<ul>
<li><p>100：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输</p>
</li>
<li><p>206：一般用来做断点续传，或者是视频文件等大文件的加载</p>
</li>
<li><p>301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名</p>
</li>
<li><p>302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面</p>
</li>
<li><p>304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</p>
</li>
<li><p>400：参数有误，请求无法被服务器识别</p>
</li>
<li><p>403：告诉客户端进制访问该站点或者资源，如在外网环境下，然后访问只有内网IP才能访问的时候则返回</p>
</li>
<li><p>404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时</p>
</li>
<li><p>503：服务器停机维护时，主动用503响应请求或 nginx 设置限速，超过限速，会返回503</p>
</li>
<li><p>504：网关超时</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">https://zh.wikipedia.org/wiki/HTTP状态码</a></li>
<li><a href="https://kebingzao.com/2018/10/05/http-status-code/">https://kebingzao.com/2018/10/05/http-status-code/</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2.15 面对职场矛盾，要不要宣泄怒气</title>
    <url>/%E8%81%8C%E5%9C%BA/life-1/</url>
    <content><![CDATA[<h1 id="面对职场矛盾，要不要宣泄怒气？？？"><a href="#面对职场矛盾，要不要宣泄怒气？？？" class="headerlink" title="面对职场矛盾，要不要宣泄怒气？？？"></a>面对职场矛盾，要不要宣泄怒气？？？</h1><h2 id="职场怒气管理决策模型"><a href="#职场怒气管理决策模型" class="headerlink" title="职场怒气管理决策模型"></a>职场怒气管理决策模型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[产生怒气] --&gt; B&#123;价值评估&#125;</span><br><span class="line">    B --&gt;|公司价值&gt;情绪成本| C[理性处理]</span><br><span class="line">    B --&gt;|情绪成本&gt;公司价值| D[考虑离职]</span><br><span class="line">    C --&gt; E[三步处理法]</span><br><span class="line">    E --&gt; F[24小时冷静期]</span><br><span class="line">    E --&gt; G[结构化表达]</span><br><span class="line">    E --&gt; H[寻求第三方案]</span><br><span class="line">    D --&gt; I[优雅退出策略]</span><br></pre></td></tr></table></figure>

<h2 id="替代宣泄的方案（更职业的处理方式）"><a href="#替代宣泄的方案（更职业的处理方式）" class="headerlink" title="替代宣泄的方案（更职业的处理方式）"></a>替代宣泄的方案（更职业的处理方式）</h2><h3 id="1-结构化沟通模板"><a href="#1-结构化沟通模板" class="headerlink" title="1. 结构化沟通模板"></a>1. 结构化沟通模板</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 非暴力沟通四步法</span><br><span class="line">[观察] + [感受] + [需求] + [请求]</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">&quot;张总，最近三次方案讨论会上（观察），</span><br><span class="line">您都直接否定了我的提案（观察），</span><br><span class="line">这让我感到困惑和受挫（感受）。</span><br><span class="line">我希望能够更好地理解项目方向（需求），</span><br><span class="line">能否请您具体说明期望的方案标准？（请求）&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-情绪转化工具"><a href="#2-情绪转化工具" class="headerlink" title="2. 情绪转化工具"></a>2. 情绪转化工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 怒气值转化公式：</span><br><span class="line">有效行动 = (怒气能量 × 专业素养) / 情绪管理能力</span><br><span class="line"></span><br><span class="line">实施步骤：</span><br><span class="line">1. 将愤怒事项写入《职场事件记录本》</span><br><span class="line">2. 标注情绪触发点（言语/行为/场景）</span><br><span class="line">3. 分析背后需求（被尊重/被认可/公平性）</span><br><span class="line">4. 制定改进方案（沟通方式/工作方法）</span><br></pre></td></tr></table></figure>

<h3 id="3-安全宣泄渠道"><a href="#3-安全宣泄渠道" class="headerlink" title="3. 安全宣泄渠道"></a>3. 安全宣泄渠道</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 方式         | 执行要点                      | 效果持续时间 |</span><br><span class="line">|--------------|-----------------------------|------------|</span><br><span class="line">| 运动宣泄     | 拳击/跑步至力竭               | 4-6小时     |</span><br><span class="line">| 写作疗法     | 写永不发送的&quot;愤怒信&quot;           | 1-2天       |</span><br><span class="line">| 职业化应对   | 将矛盾转化为优化流程的提案      | 长期有效    |</span><br><span class="line">| 心理咨询     | 通过EAP服务进行专业疏导        | 持续改善    |</span><br></pre></td></tr></table></figure>

<h2 id="关键决策因素评估表"><a href="#关键决策因素评估表" class="headerlink" title="关键决策因素评估表"></a>关键决策因素评估表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 评估维度       | 宣泄怒气的风险值 | 理性沟通的收益值 |</span><br><span class="line">|----------------|------------------|------------------|</span><br><span class="line">| 职业形象       | ⚠️⚠️⚠️⚠️⚠️ (5/5) | ✅✅✅✅✅ (5/5)  |</span><br><span class="line">| 工作推进       | ⚠️⚠️⚠️ (3/5)    | ✅✅✅✅ (4/5)   |</span><br><span class="line">| 团队关系       | ⚠️⚠️⚠️⚠️ (4/5)  | ✅✅✅ (3/5)     |</span><br><span class="line">| 个人成长       | ⚠️⚠️ (2/5)      | ✅✅✅✅ (4/5)   |</span><br><span class="line">| 法律风险       | ⚠️⚠️⚠️⚠️ (4/5)  | ✅✅✅✅✅ (5/5)  |</span><br></pre></td></tr></table></figure>

<h2 id="建议执行方案"><a href="#建议执行方案" class="headerlink" title="建议执行方案"></a>建议执行方案</h2><ol>
<li><strong>48小时冷静法则</strong>：任何情绪事件发生后，强制等待2个工作日再采取行动</li>
<li><strong>预案演练</strong>：提前准备3套标准化应对话术（肯定&#x2F;否定&#x2F;模糊场景）</li>
<li><strong>建立支持系统</strong>：发展1-2位可信赖的职场导师&#x2F;HR联系人</li>
<li><strong>设置底线清单</strong>：明确写出3条绝对不可接受的行为红线（如人格侮辱）</li>
</ol>
<p>最终建议：把”怒气”转化为”改进工作流程的提案”，既能释放压力，又能提升职业价值。例如将「领导总是挑刺」转化为「建议建立项目评审标准文档」，把个人矛盾升级为流程优化问题。</p>
]]></content>
      <categories>
        <category>职场</category>
      </categories>
      <tags>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>真菌性鼻窦炎的治疗与预防</title>
    <url>/%E7%94%9F%E6%B4%BB/%E5%81%A5%E5%BA%B7/life-2/</url>
    <content><![CDATA[<p>真菌性鼻窦炎是一种由真菌感染引起的鼻窦炎症，可能会导致不适和困扰。本文将介绍这种疾病的症状、治疗方法和预防措施。</p>
<h2 id="症状表现"><a href="#症状表现" class="headerlink" title="症状表现"></a>症状表现</h2><ul>
<li>鼻塞</li>
<li>流鼻涕（可能带有异味）</li>
<li>头痛，特别是面部疼痛</li>
<li>嗅觉减退或嗅觉异常（闻到持续的臭味）</li>
<li>鼻腔内有痂皮形成</li>
<li>疲劳感</li>
<li>鼻腔或口腔有持续性异味（腐臭味或霉味）</li>
</ul>
<h3 id="臭味问题的特别说明"><a href="#臭味问题的特别说明" class="headerlink" title="臭味问题的特别说明"></a>臭味问题的特别说明</h3><p>鼻腔异味通常是由于以下原因造成：</p>
<ul>
<li>真菌在鼻窦内繁殖分解产生的代谢物</li>
<li>感染组织的坏死或腐败</li>
<li>鼻窦分泌物淤积发生细菌二重感染</li>
</ul>
<h2 id="治疗方法"><a href="#治疗方法" class="headerlink" title="治疗方法"></a>治疗方法</h2><h3 id="1-医疗治疗"><a href="#1-医疗治疗" class="headerlink" title="1. 医疗治疗"></a>1. 医疗治疗</h3><ul>
<li>抗真菌药物治疗</li>
<li>必要时进行手术清除感染组织（特别是对于顽固性异味）</li>
<li>局部使用抗真菌喷剂</li>
<li>定期进行鼻腔冲洗（使用专业冲洗器）</li>
<li>必要时进行内窥镜下清创治疗</li>
</ul>
<h3 id="2-常用药物推荐"><a href="#2-常用药物推荐" class="headerlink" title="2. 常用药物推荐"></a>2. 常用药物推荐</h3><h4 id="处方药物"><a href="#处方药物" class="headerlink" title="处方药物"></a>处方药物</h4><ul>
<li>伊曲康唑（口服抗真菌药）</li>
<li>氟康唑（口服抗真菌药）</li>
<li>两性霉素B（局部喷剂）</li>
<li>制霉菌素（局部喷剂）</li>
</ul>
<h4 id="辅助用药"><a href="#辅助用药" class="headerlink" title="辅助用药"></a>辅助用药</h4><ul>
<li>生理盐水（鼻腔冲洗液）</li>
<li>含有糖皮质激素的鼻喷剂（减轻炎症）</li>
<li>抗组胺药（缓解过敏症状）</li>
</ul>
<h4 id="针对异味的特殊处理"><a href="#针对异味的特殊处理" class="headerlink" title="针对异味的特殊处理"></a>针对异味的特殊处理</h4><ul>
<li>专业鼻腔冲洗器（如洗鼻壶）进行深层冲洗</li>
<li>含有生理盐水的鼻腔喷雾（帮助溶解痂皮）</li>
<li>抗生素（如有细菌二重感染时）</li>
<li>黏液溶解剂（帮助清除分泌物）</li>
</ul>
<p><strong>注意：</strong> 以上药物需在医生指导下使用，请勿自行服用。不同患者病情不同，用药方案应个性化调整。</p>
<h3 id="3-日常护理"><a href="#3-日常护理" class="headerlink" title="3. 日常护理"></a>3. 日常护理</h3><ul>
<li>保持鼻腔湿润</li>
<li>使用生理盐水清洗鼻腔</li>
<li>避免接触可能含有真菌孢子的环境</li>
<li>保持室内通风</li>
</ul>
<h2 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h2><ol>
<li>保持环境干燥清洁</li>
<li>控制室内湿度在适宜范围（30-50%）</li>
<li>及时治疗感冒等上呼吸道感染</li>
<li>增强免疫力</li>
<li>避免长期使用抗生素</li>
<li>定期清洁空调和加湿器</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>如果症状持续或加重，应及时就医</li>
<li>遵医嘱用药，不要擅自停药</li>
<li>避免在潮湿环境中长期停留</li>
<li>保持作息规律，适当运动</li>
<li>每日坚持鼻腔冲洗，特别是晨起和睡前</li>
<li>保持口腔卫生，定期进行牙齿清洁</li>
<li>避免食用刺激性食物和饮料</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>真菌性鼻窦炎虽然困扰，但通过正确的治疗方法和预防措施，完全可以得到有效控制。保持良好的生活习惯和环境卫生，对预防复发具有重要意义。</p>
<p>如果您出现疑似症状，建议及时就医诊治，在医生指导下进行规范治疗。同时，做好日常预防工作，保持健康的生活方式，也能够大大降低患病风险。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>健康</category>
      </categories>
      <tags>
        <tag>鼻窦炎</tag>
        <tag>真菌感染</tag>
        <tag>健康知识</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是CI/CD？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-ci-cd/</url>
    <content><![CDATA[<h1 id="什么是CI-CD？"><a href="#什么是CI-CD？" class="headerlink" title="什么是CI&#x2F;CD？"></a>什么是CI&#x2F;CD？</h1><p>CI&#x2F;CD 是一种现代软件开发实践，它包含两个主要概念：持续集成（Continuous Integration）和持续交付&#x2F;部署（Continuous Delivery&#x2F;Deployment）。</p>
<h2 id="持续集成（CI）"><a href="#持续集成（CI）" class="headerlink" title="持续集成（CI）"></a>持续集成（CI）</h2><p>持续集成是指开发人员频繁地将代码集成到主干分支的过程。</p>
<h3 id="CI-的主要步骤"><a href="#CI-的主要步骤" class="headerlink" title="CI 的主要步骤"></a>CI 的主要步骤</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml CI配置示例</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lint</span>      <span class="comment"># 代码检查</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span>      <span class="comment"># 单元测试</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span>     <span class="comment"># 构建</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lint-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br></pre></td></tr></table></figure>

<h3 id="CI-的核心功能"><a href="#CI-的核心功能" class="headerlink" title="CI 的核心功能"></a>CI 的核心功能</h3><ol>
<li><p><strong>自动化构建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常见的构建命令</span></span><br><span class="line">npm run build</span><br><span class="line">yarn build</span><br><span class="line">pnpm build</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动化测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jest 测试示例</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Calculator&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>代码质量检查</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ESLint 配置示例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="持续交付-部署（CD）"><a href="#持续交付-部署（CD）" class="headerlink" title="持续交付&#x2F;部署（CD）"></a>持续交付&#x2F;部署（CD）</h2><p>持续交付&#x2F;部署是将软件自动发布到生产环境的过程。</p>
<h3 id="CD-的部署流程"><a href="#CD-的部署流程" class="headerlink" title="CD 的部署流程"></a>CD 的部署流程</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 完整的 CI/CD 流水线示例</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-prod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@test-server:/var/www/app/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-prod</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@prod-server:/var/www/app/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span>  <span class="comment"># 手动触发生产环境部署</span></span><br></pre></td></tr></table></figure>

<h3 id="CD-的主要特点"><a href="#CD-的主要特点" class="headerlink" title="CD 的主要特点"></a>CD 的主要特点</h3><ol>
<li><p><strong>环境管理</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 环境配置示例</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">development</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;http://dev-api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">staging</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;http://staging-api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">production</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动化部署</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署脚本示例</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Deploying to <span class="variable">$ENV</span> environment...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份当前版本</span></span><br><span class="line"><span class="built_in">cp</span> -r /var/www/app /var/www/app_backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署新版本</span></span><br><span class="line">rsync -av dist/ /var/www/app/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 健康检查</span></span><br><span class="line"><span class="keyword">if</span> curl -s <span class="string">&quot;https://<span class="variable">$DOMAIN</span>/health&quot;</span> | grep -q <span class="string">&quot;ok&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Deploy successful!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Deploy failed! Rolling back...&quot;</span></span><br><span class="line">    <span class="built_in">cp</span> -r /var/www/app_backup /var/www/app</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="CI-CD-的优势"><a href="#CI-CD-的优势" class="headerlink" title="CI&#x2F;CD 的优势"></a>CI&#x2F;CD 的优势</h2><ol>
<li><strong>提高开发效率</strong></li>
</ol>
<ul>
<li>自动化构建和测试</li>
<li>快速发现并修复问题</li>
<li>减少手动操作错误</li>
</ul>
<ol start="2">
<li><p><strong>保证代码质量</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交前的代码检查</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pre-push&quot;</span>: <span class="string">&quot;npm test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>快速迭代</strong></p>
</li>
</ol>
<ul>
<li>频繁、小批量的发布</li>
<li>降低发布风险</li>
<li>快速获取用户反馈</li>
</ul>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol>
<li><p><strong>分支管理策略</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Git Flow 工作流</span></span><br><span class="line">main      <span class="comment"># 生产环境分支</span></span><br><span class="line">develop   <span class="comment"># 开发环境分支</span></span><br><span class="line">feature/* <span class="comment"># 功能分支</span></span><br><span class="line">release/* <span class="comment"># 发布分支</span></span><br><span class="line">hotfix/*  <span class="comment"># 热修复分支</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>版本控制</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard-version&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>监控和告警</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 部署后的监控</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/metrics&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;healthy&#x27;</span>,</span><br><span class="line">    <span class="attr">uptime</span>: process.<span class="title function_">uptime</span>(),</span><br><span class="line">    <span class="attr">memory</span>: process.<span class="title function_">memoryUsage</span>(),</span><br><span class="line">    <span class="attr">cpu</span>: process.<span class="title function_">cpuUsage</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>回滚机制</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本回滚脚本</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">rollback</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> version=<span class="variable">$1</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Rolling back to version <span class="variable">$version</span>...&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 从备份恢复</span></span><br><span class="line">  aws s3 <span class="built_in">cp</span> s3://backups/app-<span class="variable">$version</span>.zip .</span><br><span class="line">  unzip app-<span class="variable">$version</span>.zip -d /var/www/app</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 更新数据库版本</span></span><br><span class="line">  npm run migrate:rollback</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>通过实施 CI&#x2F;CD，团队可以：</p>
<ul>
<li>更快地交付价值</li>
<li>提高代码质量</li>
<li>减少人为错误</li>
<li>增强团队协作</li>
<li>提升用户满意度</li>
</ul>
<p>选择合适的 CI&#x2F;CD 工具和流程，对于提高团队的开发效率和产品质量至关重要。常见的 CI&#x2F;CD 工具包括：Jenkins、GitLab CI、GitHub Actions、Circle CI 等。 </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>部署</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>如何开发公司基建组件库？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-component-library/</url>
    <content><![CDATA[<h1 id="如何开发公司基建组件库？"><a href="#如何开发公司基建组件库？" class="headerlink" title="如何开发公司基建组件库？"></a>如何开发公司基建组件库？</h1><p>组件库是前端基础建设中的重要一环，一个好的组件库可以提高开发效率、统一用户体验。本文将介绍如何基于 Vue 3 开发一个企业级组件库。</p>
<h2 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h2><h3 id="1-1-技术选型"><a href="#1-1-技术选型" class="headerlink" title="1.1 技术选型"></a>1.1 技术选型</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.69.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vitest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-tsc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-Vite-配置"><a href="#1-2-Vite-配置" class="headerlink" title="1.2 Vite 配置"></a>1.2 Vite 配置</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/index.ts&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MyLib&#x27;</span>,</span><br><span class="line">      <span class="attr">fileName</span>: <span class="function">(<span class="params">format</span>) =&gt;</span> <span class="string">`index.<span class="subst">$&#123;format&#125;</span>.js`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-组件开发规范"><a href="#2-组件开发规范" class="headerlink" title="2. 组件开发规范"></a>2. 组件开发规范</h2><h3 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my-components/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── components/     <span class="comment"># 组件目录</span></span><br><span class="line">│   │   ├── button/    </span><br><span class="line">│   │   │   ├── index.ts</span><br><span class="line">│   │   │   ├── button.vue</span><br><span class="line">│   │   │   └── __tests__/</span><br><span class="line">│   │   └── input/</span><br><span class="line">│   ├── hooks/         <span class="comment"># 组合式函数</span></span><br><span class="line">│   ├── utils/         <span class="comment"># 工具函数</span></span><br><span class="line">│   └── styles/        <span class="comment"># 全局样式</span></span><br><span class="line">├── docs/              <span class="comment"># 文档</span></span><br><span class="line">└── example/           <span class="comment"># 示例</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-组件示例"><a href="#2-2-组件示例" class="headerlink" title="2.2 组件示例"></a>2.2 组件示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- src/components/button/button.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    :class=&quot;[</span><br><span class="line">      &#x27;my-button&#x27;,</span><br><span class="line">      `my-button--$&#123;type&#125;`,</span><br><span class="line">      `my-button--$&#123;size&#125;`,</span><br><span class="line">      &#123; &#x27;is-disabled&#x27;: disabled &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    @click=&quot;handleClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface Props &#123;</span><br><span class="line">  type?: &#x27;primary&#x27; | &#x27;default&#x27; | &#x27;text&#x27;</span><br><span class="line">  size?: &#x27;small&#x27; | &#x27;medium&#x27; | &#x27;large&#x27;</span><br><span class="line">  disabled?: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  type: &#x27;default&#x27;,</span><br><span class="line">  size: &#x27;medium&#x27;,</span><br><span class="line">  disabled: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;click&#x27;, event: MouseEvent): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const handleClick = (event: MouseEvent) =&gt; &#123;</span><br><span class="line">  if (!props.disabled) &#123;</span><br><span class="line">    emit(&#x27;click&#x27;, event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.my-button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  </span><br><span class="line">  &amp;--primary &#123;</span><br><span class="line">    background: var(--primary-color);</span><br><span class="line">    color: white;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;--default &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;.is-disabled &#123;</span><br><span class="line">    opacity: 0.5;</span><br><span class="line">    cursor: not-allowed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-样式方案"><a href="#3-样式方案" class="headerlink" title="3. 样式方案"></a>3. 样式方案</h2><h3 id="3-1-CSS-变量"><a href="#3-1-CSS-变量" class="headerlink" title="3.1 CSS 变量"></a>3.1 CSS 变量</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/styles/variables.scss</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">// 主题色</span></span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attr">--success-color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attr">--warning-color</span>: <span class="number">#faad14</span>;</span><br><span class="line">  <span class="attr">--danger-color</span>: <span class="number">#f5222d</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 文字颜色</span></span><br><span class="line">  <span class="attr">--text-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attr">--text-color-secondary</span>: <span class="number">#666</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 间距</span></span><br><span class="line">  <span class="attr">--spacing-small</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--spacing-medium</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attr">--spacing-large</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-主题定制"><a href="#3-2-主题定制" class="headerlink" title="3.2 主题定制"></a>3.2 主题定制</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/utils/theme.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setTheme</span>(<span class="params"><span class="attr">theme</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">entries</span>(theme).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">`--<span class="subst">$&#123;key&#125;</span>`</span>, value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">setTheme</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;primary-color&#x27;</span>: <span class="string">&#x27;#f60&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#222&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-单元测试"><a href="#4-单元测试" class="headerlink" title="4. 单元测试"></a>4. 单元测试</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/components/button/__tests__/button.test.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; describe, it, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;vitest&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;../button.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;renders slot content&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>, &#123;</span><br><span class="line">      <span class="attr">slots</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;Click me&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">text</span>()).<span class="title function_">toBe</span>(<span class="string">&#x27;Click me&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;emits click event when not disabled&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>)</span><br><span class="line">    <span class="keyword">await</span> wrapper.<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>(<span class="string">&#x27;click&#x27;</span>)).<span class="title function_">toBeTruthy</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;does not emit click event when disabled&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">disabled</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> wrapper.<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>(<span class="string">&#x27;click&#x27;</span>)).<span class="title function_">toBeFalsy</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-发布配置"><a href="#5-发布配置" class="headerlink" title="5. 发布配置"></a>5. 发布配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@company/vue-components&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dist&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./dist/style.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/style.css&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vitest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc --noEmit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><ol>
<li><strong>组件设计原则</strong></li>
</ol>
<ul>
<li>保持组件的单一职责</li>
<li>提供合理的默认值</li>
<li>支持主题定制</li>
<li>完善的类型定义</li>
<li>详细的 Props 文档</li>
</ul>
<ol start="2">
<li><strong>性能优化</strong></li>
</ol>
<ul>
<li>合理使用 computed 和 watch</li>
<li>避免不必要的组件渲染</li>
<li>按需加载组件</li>
<li>提供 Tree Shaking 支持</li>
</ul>
<ol start="3">
<li><strong>开发建议</strong></li>
</ol>
<ul>
<li>统一的代码风格</li>
<li>完整的测试覆盖</li>
<li>规范的 Git 提交信息</li>
<li>及时的文档更新</li>
<li>版本号语义化管理</li>
</ul>
<p>通过以上实践，可以搭建一个高质量的 Vue 组件库。持续维护和迭代，根据用户反馈不断优化，才能打造一个好用的企业级组件库。 </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件库</tag>
        <tag>基建</tag>
      </tags>
  </entry>
  <entry>
    <title>qiankun如何实现css隔离？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-css-isolation/</url>
    <content><![CDATA[<h1 id="qiankun如何实现css隔离？"><a href="#qiankun如何实现css隔离？" class="headerlink" title="qiankun如何实现css隔离？"></a>qiankun如何实现css隔离？</h1><p>qiankun 提供了三种 CSS 隔离方案，用于解决微应用之间的样式冲突问题：</p>
<h2 id="1-Shadow-DOM-隔离"><a href="#1-Shadow-DOM-隔离" class="headerlink" title="1. Shadow DOM 隔离"></a>1. Shadow DOM 隔离</h2><p>这是最严格的隔离方式，通过 Web Components 的 Shadow DOM 特性实现完全隔离。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">strictStyleIsolation</span>: <span class="literal">true</span> <span class="comment">// 开启 Shadow DOM 隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>工作原理：</p>
<ul>
<li>为微应用的容器创建一个 Shadow DOM</li>
<li>微应用的所有内容都在 Shadow DOM 中运行</li>
<li>CSS 完全隔离，内部样式不会影响外部，外部样式也不会影响内部</li>
</ul>
<p>优缺点：</p>
<ul>
<li>优点：完全隔离，互不影响</li>
<li>缺点：<ul>
<li>一些第三方库可能不兼容</li>
<li>弹窗类组件可能无法正常工作</li>
<li>部分老浏览器不支持</li>
</ul>
</li>
</ul>
<h2 id="2-动态样式表前缀隔离"><a href="#2-动态样式表前缀隔离" class="headerlink" title="2. 动态样式表前缀隔离"></a>2. 动态样式表前缀隔离</h2><p>这是 qiankun 默认的隔离方式，通过为每个微应用的样式添加特定前缀来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span> <span class="comment">// 开启样式前缀隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>工作原理：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 原始样式 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换后 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[data-qiankun-app1]</span> <span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为微应用容器添加特定的 data 属性</li>
<li>动态处理所有样式规则，为选择器添加容器前缀</li>
<li>确保样式只在微应用内部生效</li>
</ul>
<p>优缺点：</p>
<ul>
<li>优点：<ul>
<li>兼容性好</li>
<li>实现相对简单</li>
<li>性能损耗小</li>
</ul>
</li>
<li>缺点：<ul>
<li>可能存在一些特殊选择器处理的边界情况</li>
<li>不能完全隔离，比如 body 上的样式</li>
</ul>
</li>
</ul>
<h2 id="3-手动样式隔离"><a href="#3-手动样式隔离" class="headerlink" title="3. 手动样式隔离"></a>3. 手动样式隔离</h2><p>不使用 qiankun 的隔离方案，而是通过开发规范和构建工具来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack 配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">true</span>, <span class="comment">// 启用 CSS Modules</span></span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">less</span>: &#123;</span><br><span class="line">        <span class="attr">modifyVars</span>: &#123;</span><br><span class="line">          <span class="comment">// 添加特定前缀</span></span><br><span class="line">          <span class="string">&#x27;@prefix&#x27;</span>: <span class="string">&#x27;app1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用方案：</p>
<ol>
<li><p><strong>CSS Modules</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构建后 */</span></span><br><span class="line"><span class="selector-class">.app1_title_hash</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BEM 命名规范</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app1-component__element--modifier</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>CSS-in-JS</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StyledComponent</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .title &#123;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol>
<li><strong>选择合适的隔离方案</strong></li>
</ol>
<ul>
<li>如果对隔离要求严格，使用 Shadow DOM</li>
<li>如果需要兼容性，使用动态样式表前缀</li>
<li>如果项目规范好，可以考虑手动隔离</li>
</ul>
<ol start="2">
<li><strong>注意事项</strong></li>
</ol>
<ul>
<li>避免使用全局选择器（*）</li>
<li>减少标签选择器的使用</li>
<li>合理使用 CSS 权重</li>
<li>注意处理第三方组件库的样式</li>
</ul>
<ol start="3">
<li><strong>常见问题解决</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理动态生成的样式</span></span><br><span class="line"><span class="keyword">const</span> dynamicStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">dynamicStyle.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-qiankun-app1&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">dynamicStyle.<span class="property">textContent</span> = <span class="string">&#x27;.dynamic &#123; color: blue; &#125;&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(dynamicStyle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理第三方组件弹窗</span></span><br><span class="line"><span class="comment">// 在主应用中预留弹窗容器</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;modal-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>通过合理使用这些隔离方案，可以有效避免微应用之间的样式冲突，保证应用的稳定运行。选择哪种方案主要取决于项目的具体需求、浏览器兼容性要求以及团队的开发规范。 </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>微前端</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端子应用如何部署？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-micro-deploy/</url>
    <content><![CDATA[<h1 id="微前端子应用如何部署？"><a href="#微前端子应用如何部署？" class="headerlink" title="微前端子应用如何部署？"></a>微前端子应用如何部署？</h1><p>微前端子应用的部署方案主要有以下几种：</p>
<h2 id="1-独立部署模式"><a href="#1-独立部署模式" class="headerlink" title="1. 独立部署模式"></a>1. 独立部署模式</h2><p>这是最常见的部署方式，每个子应用独立部署到不同的服务器或 CDN。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主应用配置</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;https://app1.example.com&#x27;</span>, <span class="comment">// 独立域名</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;https://app2.example.com&#x27;</span>, <span class="comment">// 独立域名</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>部署流程：</p>
<ol>
<li>子应用单独打包</li>
<li>部署到独立的服务器&#x2F;CDN</li>
<li>主应用配置对应的 entry 地址</li>
</ol>
<p>优点：</p>
<ul>
<li>部署独立，互不影响</li>
<li>可以使用不同的 CDN</li>
<li>便于独立扩展和维护</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要管理多个部署地址</li>
<li>跨域问题需要处理</li>
</ul>
<h2 id="2-同域部署模式"><a href="#2-同域部署模式" class="headerlink" title="2. 同域部署模式"></a>2. 同域部署模式</h2><p>所有子应用部署在同一个域名下的不同目录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;/subapps/app1/&#x27;</span>, <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;/subapps/app2/&#x27;</span>, <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/www/</span><br><span class="line">  ├── index.html      <span class="comment"># 主应用</span></span><br><span class="line">  ├── subapps/</span><br><span class="line">  │   ├── app1/      <span class="comment"># 子应用1</span></span><br><span class="line">  │   └── app2/      <span class="comment"># 子应用2</span></span><br><span class="line">  └── nginx.conf</span><br></pre></td></tr></table></figure>

<p>Nginx 配置示例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主应用</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /www;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子应用1</span></span><br><span class="line">    <span class="section">location</span> /subapps/app1/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /www/subapps/app1/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /subapps/app1/index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子应用2</span></span><br><span class="line">    <span class="section">location</span> /subapps/app2/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /www/subapps/app2/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /subapps/app2/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>不存在跨域问题</li>
<li>部署管理更简单</li>
<li>资源共享更方便</li>
</ul>
<p>缺点：</p>
<ul>
<li>所有应用耦合在一起</li>
<li>单点故障风险</li>
<li>扩展性较差</li>
</ul>
<h2 id="3-动态部署模式"><a href="#3-动态部署模式" class="headerlink" title="3. 动态部署模式"></a>3. 动态部署模式</h2><p>通过配置中心动态管理子应用的部署地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置中心返回的数据结构</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">apps</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">APP1_ENTRY</span> || <span class="string">&#x27;https://app1.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">APP2_ENTRY</span> || <span class="string">&#x27;https://app2.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用动态注册</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/micro-config&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">registerMicroApps</span>(config.<span class="property">apps</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>配置中心实现示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config-server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/micro-config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">apps</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">        <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> </span><br><span class="line">          ? <span class="string">&#x27;https://cdn.example.com/app1&#x27;</span> </span><br><span class="line">          : <span class="string">&#x27;http://localhost:8081&#x27;</span>,</span><br><span class="line">        <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">        <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...其他应用配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4-CI-CD-配置示例"><a href="#4-CI-CD-配置示例" class="headerlink" title="4. CI&#x2F;CD 配置示例"></a>4. CI&#x2F;CD 配置示例</h2><p>使用 GitLab CI 进行自动化部署：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子应用构建</span></span><br><span class="line"><span class="attr">build-subapp:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到测试环境</span></span><br><span class="line"><span class="attr">deploy-test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@test-server:/www/subapps/app1/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到生产环境</span></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">aws</span> <span class="string">s3</span> <span class="string">sync</span> <span class="string">dist/</span> <span class="string">s3://prod-bucket/app1/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol>
<li><p><strong>环境配置</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">development</span>: &#123;</span><br><span class="line">    <span class="attr">app1</span>: <span class="string">&#x27;http://localhost:8081&#x27;</span>,</span><br><span class="line">    <span class="attr">app2</span>: <span class="string">&#x27;http://localhost:8082&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">production</span>: &#123;</span><br><span class="line">    <span class="attr">app1</span>: <span class="string">&#x27;https://cdn.example.com/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">app2</span>: <span class="string">&#x27;https://cdn.example.com/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;[process.<span class="property">env</span>.<span class="property">NODE_ENV</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>公共依赖处理</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.example.com/vendor/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.example.com/vendor/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>健康检查</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子应用入口添加健康检查接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/health&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;ok&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>部署检查清单</strong></p>
</li>
</ol>
<ul>
<li>确保所有静态资源路径正确</li>
<li>检查跨域配置</li>
<li>验证公共依赖加载</li>
<li>测试应用间通信</li>
<li>确认环境变量配置</li>
<li>验证路由是否正常</li>
</ul>
<p>通过合理选择部署方案并遵循最佳实践，可以使微前端应用的部署更加可靠和高效。选择哪种部署方式主要取决于团队规模、技术栈、基础设施等因素。 </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>微前端</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>前端微服务架构的实践经验</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-micro-frontend/</url>
    <content><![CDATA[<h2 id="一、什么是微前端"><a href="#一、什么是微前端" class="headerlink" title="一、什么是微前端"></a>一、什么是微前端</h2><p>微前端是一种类似于微服务的架构理念，它将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的应用，而在用户看来仍然是内聚的单个产品。</p>
<h3 id="1-核心价值"><a href="#1-核心价值" class="headerlink" title="1. 核心价值"></a>1. 核心价值</h3><ol>
<li>技术栈无关</li>
<li>独立开发部署</li>
<li>增量升级</li>
<li>团队自治</li>
</ol>
<h2 id="二、实现方案"><a href="#二、实现方案" class="headerlink" title="二、实现方案"></a>二、实现方案</h2><h3 id="1-基于路由分发"><a href="#1-基于路由分发" class="headerlink" title="1. 基于路由分发"></a>1. 基于路由分发</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MicroRouter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">apps</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentApp</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleRoute</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">register</span>(<span class="params">path, app</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">apps</span>.<span class="title function_">set</span>(path, app)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleRoute</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="variable language_">this</span>.<span class="property">apps</span>.<span class="title function_">get</span>(path)</span><br><span class="line">    <span class="keyword">if</span> (app) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentApp</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentApp</span>.<span class="title function_">unmount</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentApp</span> = app</span><br><span class="line">      app.<span class="title function_">mount</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">MicroRouter</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">register</span>(<span class="string">&#x27;/app1&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">mount</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 加载并挂载应用1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">unmount</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 卸载应用1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-基于-Web-Components"><a href="#2-基于-Web-Components" class="headerlink" title="2. 基于 Web Components"></a>2. 基于 Web Components</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MicroApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shadow</span> = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">observedAttributes</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadModule</span>(url)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">mountApp</span>(<span class="variable language_">module</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Failed to load micro app <span class="subst">$&#123;name&#125;</span>:`</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadModule</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    <span class="keyword">const</span> code = <span class="keyword">await</span> response.<span class="title function_">text</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;exports&#x27;</span>, code)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">mountApp</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">exports</span> = &#123;&#125;</span><br><span class="line">    <span class="title function_">module</span>(<span class="built_in">exports</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exports</span>.<span class="property">render</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      <span class="built_in">exports</span>.<span class="title function_">render</span>(container)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">shadow</span>.<span class="title function_">appendChild</span>(container)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">disconnectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清理工作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;micro-app&#x27;</span>, <span class="title class_">MicroApp</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-基于-Module-Federation"><a href="#3-基于-Module-Federation" class="headerlink" title="3. 基于 Module Federation"></a>3. 基于 Module Federation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleFederationPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/container/ModuleFederationPlugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ModuleFederationPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">      <span class="attr">remotes</span>: &#123;</span><br><span class="line">        <span class="attr">app1</span>: <span class="string">&#x27;app1@http://localhost:3001/remoteEntry.js&#x27;</span>,</span><br><span class="line">        <span class="attr">app2</span>: <span class="string">&#x27;app2@http://localhost:3002/remoteEntry.js&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">shared</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App1</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;app1/App&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App2</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;app2/App&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Container</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;Loading App1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;Loading App2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、通信机制"><a href="#三、通信机制" class="headerlink" title="三、通信机制"></a>三、通信机制</h2><h3 id="1-事件总线"><a href="#1-事件总线" class="headerlink" title="1. 事件总线"></a>1. 事件总线</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">set</span>(event, <span class="keyword">new</span> <span class="title class_">Set</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(event).<span class="title function_">add</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">off</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(event).<span class="title function_">delete</span>(callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> callback <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">events</span>.<span class="title function_">get</span>(event)) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用1</span></span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&#x27;data-update&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App1 received:&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用2</span></span><br><span class="line">bus.<span class="title function_">emit</span>(<span class="string">&#x27;data-update&#x27;</span>, &#123; <span class="attr">value</span>: <span class="number">123</span> &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-状态共享"><a href="#2-状态共享" class="headerlink" title="2. 状态共享"></a>2. 状态共享</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SharedState</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">path, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="title function_">getState</span>(path)</span><br><span class="line">    <span class="keyword">if</span> (oldValue !== value) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateState</span>(path, value)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">notifyListeners</span>(path, value, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getState</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, key</span>) =&gt;</span> obj?.[key], <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">updateState</span>(<span class="params">path, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = path.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> lastKey = keys.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="keyword">const</span> target = keys.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj[key]) obj[key] = &#123;&#125;</span><br><span class="line">      <span class="keyword">return</span> obj[key]</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">    target[lastKey] = value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">add</span>(callback)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">delete</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">notifyListeners</span>(<span class="params">path, value, oldValue</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> listener <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">listeners</span>) &#123;</span><br><span class="line">      <span class="title function_">listener</span>(path, value, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、部署策略"><a href="#四、部署策略" class="headerlink" title="四、部署策略"></a>四、部署策略</h2><h3 id="1-独立部署"><a href="#1-独立部署" class="headerlink" title="1. 独立部署"></a>1. 独立部署</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DeploymentManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">apps</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">versions</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">deploy</span>(<span class="params">appName, version, assets</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 上传资源</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">uploadAssets</span>(appName, version, assets)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 更新版本信息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">versions</span>.<span class="title function_">set</span>(appName, version)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 通知其他应用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">notifyVersionUpdate</span>(appName, version)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">uploadAssets</span>(<span class="params">appName, version, assets</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cdn = <span class="keyword">new</span> <span class="title class_">CDNClient</span>()</span><br><span class="line">    <span class="keyword">const</span> urls = <span class="keyword">await</span> cdn.<span class="title function_">upload</span>(<span class="string">`<span class="subst">$&#123;appName&#125;</span>/<span class="subst">$&#123;version&#125;</span>`</span>, assets)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">apps</span>.<span class="title function_">set</span>(appName, urls)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">notifyVersionUpdate</span>(<span class="params">appName, version</span>) &#123;</span><br><span class="line">    <span class="comment">// 通知其他应用有新版本发布</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;app-version-update&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">detail</span>: &#123; appName, version &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-灰度发布"><a href="#2-灰度发布" class="headerlink" title="2. 灰度发布"></a>2. 灰度发布</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GrayRelease</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addRule</span>(<span class="params">appName, rule</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">set</span>(appName, rule)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">shouldUseNewVersion</span>(<span class="params">appName, context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rule = <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">get</span>(appName)</span><br><span class="line">    <span class="keyword">if</span> (!rule) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">evaluateRule</span>(rule, context)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">evaluateRule</span>(<span class="params">rule, context</span>) &#123;</span><br><span class="line">    <span class="comment">// 规则示例：</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   percentage: 10,  // 灰度比例</span></span><br><span class="line">    <span class="comment">//   userGroups: [&#x27;test&#x27;],  // 用户组</span></span><br><span class="line">    <span class="comment">//   regions: [&#x27;CN&#x27;]  // 地区</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rule.<span class="property">percentage</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span></span><br><span class="line">      <span class="keyword">if</span> (random &gt; rule.<span class="property">percentage</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rule.<span class="property">userGroups</span> &amp;&amp; !rule.<span class="property">userGroups</span>.<span class="title function_">includes</span>(context.<span class="property">userGroup</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rule.<span class="property">regions</span> &amp;&amp; !rule.<span class="property">regions</span>.<span class="title function_">includes</span>(context.<span class="property">region</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、性能优化"><a href="#五、性能优化" class="headerlink" title="五、性能优化"></a>五、性能优化</h2><h3 id="1-资源加载优化"><a href="#1-资源加载优化" class="headerlink" title="1. 资源加载优化"></a>1. 资源加载优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">load</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 检查缓存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(url)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 检查是否正在加载</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">has</span>(url)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">get</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 开始加载</span></span><br><span class="line">    <span class="keyword">const</span> promise = <span class="variable language_">this</span>.<span class="title function_">loadResource</span>(url)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">set</span>(url, promise)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resource = <span class="keyword">await</span> promise</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(url, resource)</span><br><span class="line">      <span class="keyword">return</span> resource</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">delete</span>(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadResource</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Failed to load <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">text</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-预加载策略"><a href="#2-预加载策略" class="headerlink" title="2. 预加载策略"></a>2. 预加载策略</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PreloadManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loader</span> = <span class="keyword">new</span> <span class="title class_">ResourceLoader</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addRule</span>(<span class="params">path, resources</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">set</span>(path, resources)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleRouteChange</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> resources = <span class="variable language_">this</span>.<span class="property">rules</span>.<span class="title function_">get</span>(path)</span><br><span class="line">    <span class="keyword">if</span> (resources) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">preloadResources</span>(resources)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">preloadResources</span>(<span class="params">resources</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> resources) &#123;</span><br><span class="line">      <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>)</span><br><span class="line">      link.<span class="property">rel</span> = <span class="string">&#x27;prefetch&#x27;</span></span><br><span class="line">      link.<span class="property">href</span> = url</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、监控与日志"><a href="#六、监控与日志" class="headerlink" title="六、监控与日志"></a>六、监控与日志</h2><h3 id="1-性能监控"><a href="#1-性能监控" class="headerlink" title="1. 性能监控"></a>1. 性能监控</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">trackAppLoad</span>(<span class="params">appName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = performance.<span class="title function_">now</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">end</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> duration = performance.<span class="title function_">now</span>() - startTime</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">recordMetric</span>(appName, <span class="string">&#x27;load&#x27;</span>, duration)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">recordMetric</span>(<span class="params">appName, metric, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">metrics</span>[appName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>[appName] = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">metrics</span>[appName][metric]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>[appName][metric] = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span>[appName][metric].<span class="title function_">push</span>(&#123;</span><br><span class="line">      value,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getMetrics</span>(<span class="params">appName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">metrics</span>[appName] || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-错误监控"><a href="#2-错误监控" class="headerlink" title="2. 错误监控"></a>2. 错误监控</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorTracker</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">trackError</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;runtime&#x27;</span>,</span><br><span class="line">        <span class="attr">error</span>: event.<span class="property">error</span>,</span><br><span class="line">        <span class="attr">source</span>: event.<span class="property">filename</span>,</span><br><span class="line">        <span class="attr">line</span>: event.<span class="property">lineno</span>,</span><br><span class="line">        <span class="attr">column</span>: event.<span class="property">colno</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;unhandledrejection&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">trackError</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;promise&#x27;</span>,</span><br><span class="line">        <span class="attr">error</span>: event.<span class="property">reason</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">trackError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      ...error,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reportError</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reportError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/errors&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to report error:&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://micro-frontends.org/">微前端框架对比</a></li>
<li><a href="https://webpack.js.org/concepts/module-federation/">Module Federation 文档</a></li>
<li><a href="https://www.webcomponents.org/">Web Components 规范</a></li>
<li><a href="https://web.dev/vitals-measurement-getting-started/">性能监控最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>微前端</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>如何部署和使用公司组件库？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-component-deploy/</url>
    <content><![CDATA[<h1 id="如何部署和使用公司组件库？"><a href="#如何部署和使用公司组件库？" class="headerlink" title="如何部署和使用公司组件库？"></a>如何部署和使用公司组件库？</h1><p>本文介绍如何部署和使用公司内部组件库，包括发布流程、使用方式和最佳实践。</p>
<h2 id="1-组件库发布"><a href="#1-组件库发布" class="headerlink" title="1. 组件库发布"></a>1. 组件库发布</h2><h3 id="1-1-发布准备"><a href="#1-1-发布准备" class="headerlink" title="1.1 发布准备"></a>1.1 发布准备</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@company/vue-components&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dist&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; npm publish&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-私有仓库配置"><a href="#1-2-私有仓库配置" class="headerlink" title="1.2 私有仓库配置"></a>1.2 私有仓库配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .npmrc</span></span><br><span class="line">registry=http://npm.company.com</span><br><span class="line">@company:registry=http://npm.company.com</span><br><span class="line">//npm.company.com/:_authToken=<span class="variable">$&#123;NPM_TOKEN&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-发布流程"><a href="#1-3-发布流程" class="headerlink" title="1.3 发布流程"></a>1.3 发布流程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 更新版本号</span></span><br><span class="line">npm version patch  <span class="comment"># 修订版本</span></span><br><span class="line">npm version minor  <span class="comment"># 次版本</span></span><br><span class="line">npm version major  <span class="comment"># 主版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构建并发布</span></span><br><span class="line">npm run release</span><br></pre></td></tr></table></figure>

<h2 id="2-组件库使用"><a href="#2-组件库使用" class="headerlink" title="2. 组件库使用"></a>2. 组件库使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm i @company/vue-components -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># pnpm</span></span><br><span class="line">pnpm add @company/vue-components</span><br></pre></td></tr></table></figure>

<h3 id="2-2-完整引入"><a href="#2-2-完整引入" class="headerlink" title="2.2 完整引入"></a>2.2 完整引入</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyUI</span> <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/style.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">MyUI</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-按需引入"><a href="#2-3-按需引入" class="headerlink" title="2.3 按需引入"></a>2.3 按需引入</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// 自定义组件解析器</span></span><br><span class="line">        <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (name.<span class="title function_">startsWith</span>(<span class="string">&#x27;My&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              name,</span><br><span class="line">              <span class="attr">from</span>: <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-主题定制"><a href="#3-主题定制" class="headerlink" title="3. 主题定制"></a>3. 主题定制</h2><h3 id="3-1-CSS-变量覆盖"><a href="#3-1-CSS-变量覆盖" class="headerlink" title="3.1 CSS 变量覆盖"></a>3.1 CSS 变量覆盖</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在项目的根样式文件中覆盖变量 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#f60</span>;</span><br><span class="line">  <span class="attr">--border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-运行时配置"><a href="#3-2-运行时配置" class="headerlink" title="3.2 运行时配置"></a>3.2 运行时配置</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态设置主题</span></span><br><span class="line"><span class="title function_">setTheme</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;primary-color&#x27;</span>: <span class="string">&#x27;#f60&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><h3 id="4-1-版本管理"><a href="#4-1-版本管理" class="headerlink" title="4.1 版本管理"></a>4.1 版本管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># package.json 中锁定版本</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@company/vue-components&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>  <span class="comment"># 使用 ^ 允许次版本更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 .npmrc 配置源</span></span><br><span class="line">save-exact=<span class="literal">true</span>  <span class="comment"># 锁定具体版本</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-按需加载优化"><a href="#4-2-按需加载优化" class="headerlink" title="4.2 按需加载优化"></a>4.2 按需加载优化</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 组件按需加载</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 样式按需加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/button.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/input.css&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-类型支持"><a href="#4-3-类型支持" class="headerlink" title="4.3 类型支持"></a>4.3 类型支持</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@company/vue-components/types&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h2><h3 id="5-1-版本冲突"><a href="#5-1-版本冲突" class="headerlink" title="5.1 版本冲突"></a>5.1 版本冲突</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查已安装版本</span></span><br><span class="line">npm <span class="built_in">ls</span> @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装指定版本</span></span><br><span class="line">npm i @company/vue-components@1.0.0</span><br></pre></td></tr></table></figure>

<h3 id="5-2-样式问题"><a href="#5-2-样式问题" class="headerlink" title="5.2 样式问题"></a>5.2 样式问题</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 确保样式文件已引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/style.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 检查样式优先级</span></span><br><span class="line"><span class="comment">// 在组件上添加自定义类名覆盖样式</span></span><br><span class="line">&lt;my-button <span class="keyword">class</span>=<span class="string">&quot;custom-button&quot;</span>&gt;按钮&lt;/my-button&gt;</span><br><span class="line"></span><br><span class="line">.<span class="property">custom</span>-button &#123;</span><br><span class="line">  <span class="comment">/* 自定义样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-按需加载失败"><a href="#5-3-按需加载失败" class="headerlink" title="5.3 按需加载失败"></a>5.3 按需加载失败</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 检查构建配置</span></span><br><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [<span class="string">&#x27;@company/vue-components/es/button&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 检查组件引入方式</span></span><br><span class="line"><span class="comment">// ✅ 正确方式</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"><span class="comment">// ❌ 错误方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components/button&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-升级指南"><a href="#6-升级指南" class="headerlink" title="6. 升级指南"></a>6. 升级指南</h2><ol>
<li><strong>升级前准备</strong></li>
</ol>
<ul>
<li>查看更新日志</li>
<li>测试环境验证</li>
<li>准备回滚方案</li>
</ul>
<ol start="2">
<li><p><strong>升级步骤</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 更新依赖</span></span><br><span class="line">npm update @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 检查破坏性更新</span></span><br><span class="line">npm run <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 按需修改代码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意事项</strong></p>
</li>
</ol>
<ul>
<li>主版本升级需要关注破坏性更新</li>
<li>升级后需要完整回归测试</li>
<li>建议渐进式升级，避免跨多个版本</li>
</ul>
<p>通过以上内容，可以帮助团队更好地使用和维护组件库。持续关注组件库的更新和问题反馈，确保组件库的稳定性和可用性。 </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>Vue</tag>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>qiankun如何实现js隔离？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/micro-snapshotSandbox/</url>
    <content><![CDATA[<h1 id="qiankun如何实现js隔离？"><a href="#qiankun如何实现js隔离？" class="headerlink" title="qiankun如何实现js隔离？"></a>qiankun如何实现js隔离？</h1><p>qiankun 提供了两种 JavaScript 隔离方式：</p>
<ol>
<li><strong>快照沙箱 (SnapshotSandbox)</strong></li>
</ol>
<ul>
<li>适用于单实例场景</li>
<li>工作原理：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnapshotSandbox</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">windowSnapshot</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 激活沙箱</span></span><br><span class="line">  <span class="title function_">active</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 保存当前 window 状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop] = <span class="variable language_">window</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 恢复之前的状态</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">prop</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>[prop] = <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>[prop];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 退出沙箱</span></span><br><span class="line">  <span class="title function_">inactive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 记录更改的状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">window</span>[prop] !== <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>[prop] = <span class="variable language_">window</span>[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 还原 window 状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>[prop] = <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><strong>代理沙箱 (ProxySandbox)</strong></li>
</ol>
<ul>
<li>适用于多实例场景</li>
<li>工作原理：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxySandbox</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fakeWindow = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">target, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">        target[prop] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">(<span class="params">target, prop</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 优先从 fake window 中取值</span></span><br><span class="line">        <span class="keyword">return</span> prop <span class="keyword">in</span> target ? target[prop] : <span class="variable language_">window</span>[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">proxy</span> = proxy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>主要隔离原理：</p>
<ol>
<li><strong>快照沙箱</strong>：</li>
</ol>
<ul>
<li>进入微应用时保存主应用的 window 状态</li>
<li>恢复微应用的 window 状态</li>
<li>退出微应用时保存微应用的 window 状态</li>
<li>恢复主应用的 window 状态</li>
</ul>
<ol start="2">
<li><strong>代理沙箱</strong>：</li>
</ol>
<ul>
<li>为每个微应用创建一个独立的 fakeWindow</li>
<li>通过 Proxy 代理对 window 对象的访问</li>
<li>所有对 window 的修改都会被限制在 fakeWindow 中</li>
<li>读取时会先从 fakeWindow 查找，找不到再从真实 window 中查找</li>
</ul>
<p>使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 qiankun 配置中开启 js 沙箱</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span>, <span class="comment">// 开启样式隔离</span></span><br><span class="line">        <span class="attr">strictStyleIsolation</span>: <span class="literal">false</span>,      <span class="comment">// 严格的样式隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>需要注意的点：</p>
<ol>
<li>快照沙箱只适合单实例应用，因为多个实例会相互影响</li>
<li>代理沙箱性能更好，且支持多实例，是更推荐的方案</li>
<li>某些特殊场景可能需要关闭沙箱：<ul>
<li>使用一些特殊的第三方库</li>
<li>需要跨应用共享变量</li>
</ul>
</li>
<li>沙箱机制可能无法完全隔离某些复杂的全局污染</li>
</ol>
<p>这就是 qiankun 实现 JavaScript 隔离的核心机制。通过这种方式，可以有效防止微应用之间的 JavaScript 代码相互污染。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>微前端</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据量的 Excel 导出解决方案有哪些？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/performance-excel-export/</url>
    <content><![CDATA[<h2 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h2><p>在实际业务中，经常需要导出大量数据到 Excel 文件，这可能会遇到以下问题：</p>
<ol>
<li>浏览器内存占用过大</li>
<li>导出过程页面卡顿</li>
<li>请求超时</li>
<li>文件过大下载慢</li>
</ol>
<h2 id="二、前端导出方案"><a href="#二、前端导出方案" class="headerlink" title="二、前端导出方案"></a>二、前端导出方案</h2><h3 id="1-使用-XLSX-js"><a href="#1-使用-XLSX-js" class="headerlink" title="1. 使用 XLSX.js"></a>1. 使用 XLSX.js</h3><h4 id="1-1-基础导出"><a href="#1-1-基础导出" class="headerlink" title="1.1 基础导出"></a>1.1 基础导出</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelExport</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">workbook</span> = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建工作表</span></span><br><span class="line">  <span class="title function_">createSheet</span>(<span class="params">data, sheetName = <span class="string">&#x27;Sheet1&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> worksheet = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>(data);</span><br><span class="line">    <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_append_sheet</span>(<span class="variable language_">this</span>.<span class="property">workbook</span>, worksheet, sheetName);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 导出文件</span></span><br><span class="line">  <span class="title function_">exportFile</span>(<span class="params">fileName = <span class="string">&#x27;export.xlsx&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable constant_">XLSX</span>.<span class="title function_">writeFile</span>(<span class="variable language_">this</span>.<span class="property">workbook</span>, fileName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> exporter = <span class="keyword">new</span> <span class="title class_">ExcelExport</span>();</span><br><span class="line">exporter.<span class="title function_">createSheet</span>([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;</span><br><span class="line">]);</span><br><span class="line">exporter.<span class="title function_">exportFile</span>();</span><br></pre></td></tr></table></figure>

<h4 id="1-2-分片处理"><a href="#1-2-分片处理" class="headerlink" title="1.2 分片处理"></a>1.2 分片处理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChunkExport</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">chunkSize = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chunkSize</span> = chunkSize;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">workbook</span> = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分片处理数据</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processDataInChunks</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chunks = <span class="variable language_">this</span>.<span class="title function_">splitIntoChunks</span>(data);</span><br><span class="line">    <span class="keyword">const</span> worksheet = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>([]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; chunks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processChunk</span>(worksheet, chunks[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_append_sheet</span>(<span class="variable language_">this</span>.<span class="property">workbook</span>, worksheet, <span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分割数据</span></span><br><span class="line">  <span class="title function_">splitIntoChunks</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chunks = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i += <span class="variable language_">this</span>.<span class="property">chunkSize</span>) &#123;</span><br><span class="line">      chunks.<span class="title function_">push</span>(data.<span class="title function_">slice</span>(i, i + <span class="variable language_">this</span>.<span class="property">chunkSize</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chunks;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理单个分片</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processChunk</span>(<span class="params">worksheet, chunk, index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rows = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>(chunk);</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">          worksheet[<span class="string">&#x27;!ref&#x27;</span>] = rows[<span class="string">&#x27;!ref&#x27;</span>];</span><br><span class="line">          worksheet[<span class="string">&#x27;!cols&#x27;</span>] = rows[<span class="string">&#x27;!cols&#x27;</span>];</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">assign</span>(worksheet, rows);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">appendRows</span>(worksheet, rows, index * <span class="variable language_">this</span>.<span class="property">chunkSize</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 追加行数据</span></span><br><span class="line">  <span class="title function_">appendRows</span>(<span class="params">worksheet, rows, startRow</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(rows).<span class="title function_">forEach</span>(<span class="function"><span class="params">cell</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (cell[<span class="number">0</span>] === <span class="string">&#x27;!&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">const</span> newCell = cell.<span class="title function_">replace</span>(<span class="regexp">/\d+/</span>, <span class="function"><span class="params">match</span> =&gt;</span> +match + startRow);</span><br><span class="line">      worksheet[newCell] = rows[cell];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 导出文件</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">export</span>(<span class="params">data, fileName = <span class="string">&#x27;export.xlsx&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processDataInChunks</span>(data);</span><br><span class="line">    <span class="variable constant_">XLSX</span>.<span class="title function_">writeFile</span>(<span class="variable language_">this</span>.<span class="property">workbook</span>, fileName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> exporter = <span class="keyword">new</span> <span class="title class_">ChunkExport</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> largeData = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">100000</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">id</span>: i,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">`User <span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>()</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">exporter.<span class="title function_">export</span>(largeData, <span class="string">&#x27;large-export.xlsx&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-Web-Worker-处理"><a href="#2-Web-Worker-处理" class="headerlink" title="2. Web Worker 处理"></a>2. Web Worker 处理</h3><h4 id="2-1-主线程代码"><a href="#2-1-主线程代码" class="headerlink" title="2.1 主线程代码"></a>2.1 主线程代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerExport</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span> = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;excel-worker.js&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupWorker</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setupWorker</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; type, data &#125; = event.<span class="property">data</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;progress&#x27;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">updateProgress</span>(data);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;complete&#x27;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">downloadFile</span>(data);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Export failed:&#x27;</span>, data);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">export</span>(<span class="params">data, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">      data,</span><br><span class="line">      options</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">updateProgress</span>(<span class="params">percent</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新进度条</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Export progress: <span class="subst">$&#123;percent&#125;</span>%`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">downloadFile</span>(<span class="params">blob</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">&#x27;export.xlsx&#x27;</span>;</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">terminate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="title function_">terminate</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Worker-线程代码"><a href="#2-2-Worker-线程代码" class="headerlink" title="2.2 Worker 线程代码"></a>2.2 Worker 线程代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// excel-worker.js</span></span><br><span class="line"><span class="title function_">importScripts</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExcelWorker</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupEventListeners</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">setupEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">    self.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; type, data, options &#125; = event.<span class="property">data</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (type === <span class="string">&#x27;start&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">processExport</span>(data, options);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processExport</span>(<span class="params">data, options</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>();</span><br><span class="line">      <span class="keyword">const</span> totalChunks = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(data.<span class="property">length</span> / <span class="number">1000</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalChunks; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> chunk = data.<span class="title function_">slice</span>(i * <span class="number">1000</span>, (i + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processChunk</span>(workbook, chunk, i === <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 报告进度</span></span><br><span class="line">        self.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;progress&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: <span class="title class_">Math</span>.<span class="title function_">round</span>((i + <span class="number">1</span>) / totalChunks * <span class="number">100</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 生成文件</span></span><br><span class="line">      <span class="keyword">const</span> wbout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(workbook, &#123;</span><br><span class="line">        <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 返回结果</span></span><br><span class="line">      self.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;complete&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">Blob</span>([wbout], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      self.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: error.<span class="property">message</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">processChunk</span>(<span class="params">workbook, chunk, isFirst</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">          <span class="keyword">const</span> worksheet = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>(chunk);</span><br><span class="line">          <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_append_sheet</span>(workbook, worksheet, <span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_add_json</span>(</span><br><span class="line">            workbook.<span class="property">Sheets</span>[<span class="string">&#x27;Sheet1&#x27;</span>],</span><br><span class="line">            chunk,</span><br><span class="line">            &#123; <span class="attr">origin</span>: -<span class="number">1</span> &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ExcelWorker</span>();</span><br></pre></td></tr></table></figure>

<h2 id="三、后端导出方案"><a href="#三、后端导出方案" class="headerlink" title="三、后端导出方案"></a>三、后端导出方案</h2><h3 id="1-流式处理"><a href="#1-流式处理" class="headerlink" title="1. 流式处理"></a>1. 流式处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">streamDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/export/stream&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> reader = response.<span class="property">body</span>.<span class="title function_">getReader</span>();</span><br><span class="line">  <span class="keyword">const</span> chunks = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader.<span class="title function_">read</span>();</span><br><span class="line">    <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">    chunks.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>(chunks, &#123; <span class="attr">type</span>: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  link.<span class="property">href</span> = url;</span><br><span class="line">  link.<span class="property">download</span> = <span class="string">&#x27;export.xlsx&#x27;</span>;</span><br><span class="line">  link.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端代码 (Node.js)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Excel</span> = <span class="built_in">require</span>(<span class="string">&#x27;exceljs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stream = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">streamExport</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> workbook = <span class="keyword">new</span> <span class="title class_">Excel</span>.<span class="property">stream</span>.<span class="property">xlsx</span>.<span class="title class_">WorkbookWriter</span>(&#123;</span><br><span class="line">    <span class="attr">stream</span>: res,</span><br><span class="line">    <span class="attr">useStyles</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> worksheet = workbook.<span class="title function_">addWorksheet</span>(<span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置表头</span></span><br><span class="line">  worksheet.<span class="property">columns</span> = [</span><br><span class="line">    &#123; <span class="attr">header</span>: <span class="string">&#x27;ID&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">header</span>: <span class="string">&#x27;Name&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;name&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">header</span>: <span class="string">&#x27;Date&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;date&#x27;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 流式查询数据库</span></span><br><span class="line">  <span class="keyword">const</span> cursor = db.<span class="title function_">collection</span>(<span class="string">&#x27;data&#x27;</span>).<span class="title function_">find</span>().<span class="title function_">cursor</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> doc = <span class="keyword">await</span> cursor.<span class="title function_">next</span>(); doc != <span class="literal">null</span>; doc = <span class="keyword">await</span> cursor.<span class="title function_">next</span>()) &#123;</span><br><span class="line">    worksheet.<span class="title function_">addRow</span>(doc).<span class="title function_">commit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">await</span> worksheet.<span class="title function_">commit</span>();</span><br><span class="line">  <span class="keyword">await</span> workbook.<span class="title function_">commit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-任务队列处理"><a href="#2-任务队列处理" class="headerlink" title="2. 任务队列处理"></a>2. 任务队列处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExportTask</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">createTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/export/task&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="comment">/* 导出参数 */</span> &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> &#123; taskId &#125; = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">pollTaskStatus</span>(taskId);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">pollTaskStatus</span>(<span class="params">taskId</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/export/status/<span class="subst">$&#123;taskId&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> &#123; status, url &#125; = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (status === <span class="string">&#x27;completed&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">downloadFile</span>(url);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="string">&#x27;failed&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Export failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">downloadFile</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">href</span> = url;</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">&#x27;export.xlsx&#x27;</span>;</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、最佳实践"><a href="#四、最佳实践" class="headerlink" title="四、最佳实践"></a>四、最佳实践</h2><h3 id="1-数据量判断"><a href="#1-数据量判断" class="headerlink" title="1. 数据量判断"></a>1. 数据量判断</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExportStrategy</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">threshold = <span class="number">10000</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">threshold</span> = threshold;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">export</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">length</span> &lt;= <span class="variable language_">this</span>.<span class="property">threshold</span>) &#123;</span><br><span class="line">      <span class="comment">// 小数据量：直接前端导出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">clientExport</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">length</span> &lt;= <span class="variable language_">this</span>.<span class="property">threshold</span> * <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="comment">// 中等数据量：使用 Web Worker</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">workerExport</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 大数据量：使用后端导出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">serverExport</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2. 性能优化"></a>2. 性能优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OptimizedExport</span> &#123;</span><br><span class="line">  <span class="comment">// 预处理数据</span></span><br><span class="line">  <span class="title function_">preprocessData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 只保留需要的字段</span></span><br><span class="line">      <span class="keyword">const</span> &#123; id, name, date &#125; = item;</span><br><span class="line">      <span class="keyword">return</span> &#123; id, name, date &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分批处理</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">batchProcess</span>(<span class="params">data, batchSize = <span class="number">1000</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i += batchSize) &#123;</span><br><span class="line">      <span class="keyword">const</span> batch = data.<span class="title function_">slice</span>(i, i + batchSize);</span><br><span class="line">      results.<span class="title function_">push</span>(<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">processBatch</span>(batch));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 允许其他任务执行</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 内存管理</span></span><br><span class="line">  <span class="title function_">cleanupMemory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">global</span>.<span class="property">gc</span>) &#123;</span><br><span class="line">      <span class="variable language_">global</span>.<span class="title function_">gc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-用户体验"><a href="#3-用户体验" class="headerlink" title="3. 用户体验"></a>3. 用户体验</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExportUI</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;idle&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新进度条</span></span><br><span class="line">  <span class="title function_">updateProgress</span>(<span class="params">percent</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">progress</span> = percent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateUI</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 显示状态</span></span><br><span class="line">  <span class="title function_">updateStatus</span>(<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = status;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateUI</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新界面</span></span><br><span class="line">  <span class="title function_">updateUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> progressBar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress-bar&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> statusText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.status-text&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (progressBar) &#123;</span><br><span class="line">      progressBar.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.progress&#125;</span>%`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (statusText) &#123;</span><br><span class="line">      statusText.<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="title function_">getStatusText</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取状态文本</span></span><br><span class="line">  <span class="title function_">getStatusText</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> statusMap = &#123;</span><br><span class="line">      <span class="attr">idle</span>: <span class="string">&#x27;准备导出&#x27;</span>,</span><br><span class="line">      <span class="attr">processing</span>: <span class="string">&#x27;正在导出...&#x27;</span>,</span><br><span class="line">      <span class="attr">completed</span>: <span class="string">&#x27;导出完成&#x27;</span>,</span><br><span class="line">      <span class="attr">failed</span>: <span class="string">&#x27;导出失败&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> statusMap[<span class="variable language_">this</span>.<span class="property">status</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://docs.sheetjs.com/">SheetJS 文档</a></li>
<li><a href="https://github.com/exceljs/exceljs">ExcelJS 文档</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web Workers API</a></li>
<li><a href="https://nodejs.org/api/stream.html">Stream API</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>Excel</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能指标有哪些，如何获取和分析？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/performance-performance-metrics/</url>
    <content><![CDATA[<h2 id="一、核心性能指标"><a href="#一、核心性能指标" class="headerlink" title="一、核心性能指标"></a>一、核心性能指标</h2><h3 id="1-加载性能指标"><a href="#1-加载性能指标" class="headerlink" title="1. 加载性能指标"></a>1. 加载性能指标</h3><ol>
<li>FCP (First Contentful Paint)</li>
</ol>
<ul>
<li>首次内容绘制时间</li>
<li>标记浏览器渲染第一个 DOM 内容的时间点<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：Performance API</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FCP:&#x27;</span>, entry.<span class="property">startTime</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;paint&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：Web Vitals</span></span><br><span class="line"><span class="keyword">import</span> &#123; getFCP &#125; <span class="keyword">from</span> <span class="string">&#x27;web-vitals&#x27;</span>;</span><br><span class="line"><span class="title function_">getFCP</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>LCP (Largest Contentful Paint)</li>
</ol>
<ul>
<li>最大内容绘制时间</li>
<li>页面主要内容加载完成的时间<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LCP:&#x27;</span>, entry.<span class="property">startTime</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;largest-contentful-paint&#x27;</span>] &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>TTI (Time to Interactive)</li>
</ol>
<ul>
<li>可交互时间</li>
<li>页面完全可交互所需时间<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getTTI &#125; <span class="keyword">from</span> <span class="string">&#x27;web-vitals&#x27;</span>;</span><br><span class="line"><span class="title function_">getTTI</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-交互性能指标"><a href="#2-交互性能指标" class="headerlink" title="2. 交互性能指标"></a>2. 交互性能指标</h3><ol>
<li>FID (First Input Delay)</li>
</ol>
<ul>
<li>首次输入延迟</li>
<li>用户首次交互的响应时间<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;FID:&#x27;</span>, entry.<span class="property">processingStart</span> - entry.<span class="property">startTime</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;first-input&#x27;</span>] &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>CLS (Cumulative Layout Shift)</li>
</ol>
<ul>
<li>累积布局偏移</li>
<li>页面视觉稳定性的度量<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CLS:&#x27;</span>, entry.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;layout-shift&#x27;</span>] &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="二、性能指标采集"><a href="#二、性能指标采集" class="headerlink" title="二、性能指标采集"></a>二、性能指标采集</h2><h3 id="1-Performance-API"><a href="#1-Performance-API" class="headerlink" title="1. Performance API"></a>1. Performance API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面加载性能</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getNavigationTiming</span>();</span><br><span class="line">    <span class="comment">// 资源加载性能</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getResourceTiming</span>();</span><br><span class="line">    <span class="comment">// 用户交互性能</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getUserTiming</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取导航加载性能</span></span><br><span class="line">  <span class="title function_">getNavigationTiming</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timing = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;navigation&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">navigation</span> = &#123;</span><br><span class="line">      <span class="comment">// DNS 解析时间</span></span><br><span class="line">      <span class="attr">dns</span>: timing.<span class="property">domainLookupEnd</span> - timing.<span class="property">domainLookupStart</span>,</span><br><span class="line">      <span class="comment">// TCP 连接时间</span></span><br><span class="line">      <span class="attr">tcp</span>: timing.<span class="property">connectEnd</span> - timing.<span class="property">connectStart</span>,</span><br><span class="line">      <span class="comment">// 首字节时间</span></span><br><span class="line">      <span class="attr">ttfb</span>: timing.<span class="property">responseStart</span> - timing.<span class="property">requestStart</span>,</span><br><span class="line">      <span class="comment">// DOM 解析时间</span></span><br><span class="line">      <span class="attr">domParse</span>: timing.<span class="property">domInteractive</span> - timing.<span class="property">responseEnd</span>,</span><br><span class="line">      <span class="comment">// 页面完全加载时间</span></span><br><span class="line">      <span class="attr">loadComplete</span>: timing.<span class="property">loadEventEnd</span> - timing.<span class="property">fetchStart</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取资源加载性能</span></span><br><span class="line">  <span class="title function_">getResourceTiming</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> resources = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;resource&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">resources</span> = resources.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">type</span>: item.<span class="property">initiatorType</span>,</span><br><span class="line">      <span class="attr">duration</span>: item.<span class="property">duration</span>,</span><br><span class="line">      <span class="attr">size</span>: item.<span class="property">transferSize</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取用户交互性能</span></span><br><span class="line">  <span class="title function_">getUserTiming</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听首次输入延迟</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">fid</span> = entries[<span class="number">0</span>].<span class="property">processingStart</span> - entries[<span class="number">0</span>].<span class="property">startTime</span>;</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;first-input&#x27;</span>] &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听布局偏移</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">entryList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = entryList.<span class="title function_">getEntries</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">metrics</span>.<span class="property">cls</span> = entries.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, entry</span>) =&gt;</span> sum + entry.<span class="property">value</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;).<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;layout-shift&#x27;</span>] &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Resource-Timing-API"><a href="#2-Resource-Timing-API" class="headerlink" title="2. Resource Timing API"></a>2. Resource Timing API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceMonitor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resourceList</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取资源加载详情</span></span><br><span class="line">  <span class="title function_">getResourceDetails</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> resources = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;resource&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resources.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> timings = &#123;</span><br><span class="line">        <span class="comment">// DNS 查询时间</span></span><br><span class="line">        <span class="attr">dns</span>: item.<span class="property">domainLookupEnd</span> - item.<span class="property">domainLookupStart</span>,</span><br><span class="line">        <span class="comment">// TCP 连接时间</span></span><br><span class="line">        <span class="attr">tcp</span>: item.<span class="property">connectEnd</span> - item.<span class="property">connectStart</span>,</span><br><span class="line">        <span class="comment">// 请求响应时间</span></span><br><span class="line">        <span class="attr">request</span>: item.<span class="property">responseEnd</span> - item.<span class="property">requestStart</span>,</span><br><span class="line">        <span class="comment">// 资源大小</span></span><br><span class="line">        <span class="attr">size</span>: item.<span class="property">encodedBodySize</span></span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">type</span>: item.<span class="property">initiatorType</span>,</span><br><span class="line">        timings</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分析资源加载瓶颈</span></span><br><span class="line">  <span class="title function_">analyzeBottlenecks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> resources = <span class="variable language_">this</span>.<span class="title function_">getResourceDetails</span>();</span><br><span class="line">    <span class="keyword">const</span> bottlenecks = &#123;</span><br><span class="line">      <span class="attr">slow_dns</span>: [],</span><br><span class="line">      <span class="attr">slow_tcp</span>: [],</span><br><span class="line">      <span class="attr">slow_request</span>: [],</span><br><span class="line">      <span class="attr">large_files</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    resources.<span class="title function_">forEach</span>(<span class="function"><span class="params">resource</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; timings, name &#125; = resource;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (timings.<span class="property">dns</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        bottlenecks.<span class="property">slow_dns</span>.<span class="title function_">push</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (timings.<span class="property">tcp</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        bottlenecks.<span class="property">slow_tcp</span>.<span class="title function_">push</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (timings.<span class="property">request</span> &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        bottlenecks.<span class="property">slow_request</span>.<span class="title function_">push</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (timings.<span class="property">size</span> &gt; <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">        bottlenecks.<span class="property">large_files</span>.<span class="title function_">push</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bottlenecks;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、性能分析与优化"><a href="#三、性能分析与优化" class="headerlink" title="三、性能分析与优化"></a>三、性能分析与优化</h2><h3 id="1-性能分数计算"><a href="#1-性能分数计算" class="headerlink" title="1. 性能分数计算"></a>1. 性能分数计算</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceScore</span> &#123;</span><br><span class="line">  <span class="comment">// 计算性能得分</span></span><br><span class="line">  <span class="title function_">calculateScore</span>(<span class="params">metrics</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> weights = &#123;</span><br><span class="line">      <span class="attr">fcp</span>: <span class="number">0.2</span>,</span><br><span class="line">      <span class="attr">lcp</span>: <span class="number">0.25</span>,</span><br><span class="line">      <span class="attr">fid</span>: <span class="number">0.3</span>,</span><br><span class="line">      <span class="attr">cls</span>: <span class="number">0.25</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> scores = &#123;</span><br><span class="line">      <span class="attr">fcp</span>: <span class="variable language_">this</span>.<span class="title function_">scoreFCP</span>(metrics.<span class="property">fcp</span>),</span><br><span class="line">      <span class="attr">lcp</span>: <span class="variable language_">this</span>.<span class="title function_">scoreLCP</span>(metrics.<span class="property">lcp</span>),</span><br><span class="line">      <span class="attr">fid</span>: <span class="variable language_">this</span>.<span class="title function_">scoreFID</span>(metrics.<span class="property">fid</span>),</span><br><span class="line">      <span class="attr">cls</span>: <span class="variable language_">this</span>.<span class="title function_">scoreCLS</span>(metrics.<span class="property">cls</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(weights).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, [key, weight]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> total + scores[key] * weight;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// FCP 得分计算</span></span><br><span class="line">  <span class="title function_">scoreFCP</span>(<span class="params">fcp</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fcp &lt;= <span class="number">1000</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (fcp &lt;= <span class="number">2500</span>) <span class="keyword">return</span> <span class="number">0.7</span>;</span><br><span class="line">    <span class="keyword">if</span> (fcp &lt;= <span class="number">4000</span>) <span class="keyword">return</span> <span class="number">0.3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 其他指标得分计算方法类似...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-性能监控报告"><a href="#2-性能监控报告" class="headerlink" title="2. 性能监控报告"></a>2. 性能监控报告</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceReport</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">monitor</span> = <span class="keyword">new</span> <span class="title class_">PerformanceMonitor</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resourceMonitor</span> = <span class="keyword">new</span> <span class="title class_">ResourceMonitor</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scoreCalculator</span> = <span class="keyword">new</span> <span class="title class_">PerformanceScore</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成性能报告</span></span><br><span class="line">  <span class="title function_">generateReport</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> metrics = <span class="variable language_">this</span>.<span class="property">monitor</span>.<span class="property">metrics</span>;</span><br><span class="line">    <span class="keyword">const</span> resources = <span class="variable language_">this</span>.<span class="property">resourceMonitor</span>.<span class="title function_">getResourceDetails</span>();</span><br><span class="line">    <span class="keyword">const</span> bottlenecks = <span class="variable language_">this</span>.<span class="property">resourceMonitor</span>.<span class="title function_">analyzeBottlenecks</span>();</span><br><span class="line">    <span class="keyword">const</span> score = <span class="variable language_">this</span>.<span class="property">scoreCalculator</span>.<span class="title function_">calculateScore</span>(metrics);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      score,</span><br><span class="line">      metrics,</span><br><span class="line">      resources,</span><br><span class="line">      bottlenecks,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">      <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送性能数据</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">sendReport</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> report = <span class="variable language_">this</span>.<span class="title function_">generateReport</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/performance&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(report)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to send performance report:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、实践建议"><a href="#四、实践建议" class="headerlink" title="四、实践建议"></a>四、实践建议</h2><h3 id="1-指标采集建议"><a href="#1-指标采集建议" class="headerlink" title="1. 指标采集建议"></a>1. 指标采集建议</h3><ul>
<li>采用抽样策略，避免全量采集</li>
<li>考虑网络环境的影响</li>
<li>过滤异常数据</li>
</ul>
<h3 id="2-性能分析建议"><a href="#2-性能分析建议" class="headerlink" title="2. 性能分析建议"></a>2. 性能分析建议</h3><ul>
<li>建立性能基准线</li>
<li>关注趋势变化</li>
<li>结合业务场景</li>
</ul>
<h3 id="3-优化方向"><a href="#3-优化方向" class="headerlink" title="3. 优化方向"></a>3. 优化方向</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 资源加载优化</span></span><br><span class="line"><span class="keyword">const</span> optimizeResource = &#123;</span><br><span class="line">  <span class="comment">// 预加载关键资源</span></span><br><span class="line">  <span class="attr">preload</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">    link.<span class="property">rel</span> = <span class="string">&#x27;preload&#x27;</span>;</span><br><span class="line">    link.<span class="property">as</span> = <span class="string">&#x27;script&#x27;</span>;</span><br><span class="line">    link.<span class="property">href</span> = <span class="string">&#x27;/critical.js&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 按需加载</span></span><br><span class="line">  <span class="attr">lazyLoad</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> img = entry.<span class="property">target</span>;</span><br><span class="line">          img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">          observer.<span class="title function_">unobserve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 渲染优化</span></span><br><span class="line"><span class="keyword">const</span> optimizeRender = &#123;</span><br><span class="line">  <span class="comment">// 避免布局抖动</span></span><br><span class="line">  <span class="attr">preventLayoutThrashing</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.dynamic&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> positions = elements.<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">getBoundingClientRect</span>());</span><br><span class="line">      </span><br><span class="line">      positions.<span class="title function_">forEach</span>(<span class="function">(<span class="params">pos, i</span>) =&gt;</span> &#123;</span><br><span class="line">        elements[i].<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(<span class="subst">$&#123;pos.left&#125;</span>px, <span class="subst">$&#123;pos.top&#125;</span>px)`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://web.dev/vitals/">Web Vitals</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance">Performance API</a></li>
<li><a href="https://w3c.github.io/resource-timing/">Resource Timing API</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/why-performance-matters">性能优化最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>前端监控</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现高性能的虚拟滚动？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/performance-virtual-scroll/</url>
    <content><![CDATA[<h2 id="一、虚拟滚动原理"><a href="#一、虚拟滚动原理" class="headerlink" title="一、虚拟滚动原理"></a>一、虚拟滚动原理</h2><p>虚拟滚动（Virtual Scrolling）是一种用于优化长列表性能的技术，其核心思想是：只渲染可视区域内的列表项，当用户滚动时动态更新列表项的内容。这种技术可以显著减少 DOM 节点数量，提高页面性能。</p>
<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ol>
<li>可视区域：用户当前能看到的列表区域</li>
<li>缓冲区：可视区域外预渲染的额外项</li>
<li>虚拟列表：实际渲染在 DOM 中的列表项</li>
<li>偏移量：用于模拟真实滚动位置的空白区域</li>
</ol>
<h2 id="二、基础实现"><a href="#二、基础实现" class="headerlink" title="二、基础实现"></a>二、基础实现</h2><h3 id="1-简单虚拟滚动"><a href="#1-简单虚拟滚动" class="headerlink" title="1. 简单虚拟滚动"></a>1. 简单虚拟滚动</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">containerHeight</span> = options.<span class="property">height</span>; <span class="comment">// 容器高度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemHeight</span> = options.<span class="property">itemHeight</span>; <span class="comment">// 每项高度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">totalCount</span> = options.<span class="property">totalCount</span>; <span class="comment">// 总数据量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bufferSize</span> = options.<span class="property">bufferSize</span> || <span class="number">5</span>; <span class="comment">// 缓冲区大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">visibleCount</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">containerHeight</span> / <span class="variable language_">this</span>.<span class="property">itemHeight</span>); <span class="comment">// 可视区域项数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="number">0</span>; <span class="comment">// 起始索引</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">endIndex</span> = <span class="variable language_">this</span>.<span class="property">startIndex</span> + <span class="variable language_">this</span>.<span class="property">visibleCount</span> + <span class="variable language_">this</span>.<span class="property">bufferSize</span>; <span class="comment">// 结束索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.containerHeight&#125;</span>px`</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.totalCount * <span class="variable language_">this</span>.itemHeight&#125;</span>px`</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onScroll</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onScroll</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = e.<span class="property">target</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateVisibleRange</span>(scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">updateVisibleRange</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / <span class="variable language_">this</span>.<span class="property">itemHeight</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">endIndex</span> = <span class="variable language_">this</span>.<span class="property">startIndex</span> + <span class="variable language_">this</span>.<span class="property">visibleCount</span> + <span class="variable language_">this</span>.<span class="property">bufferSize</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清空现有内容</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染可见区域的项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">startIndex</span>; i &lt; <span class="variable language_">this</span>.<span class="property">endIndex</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= <span class="variable language_">this</span>.<span class="property">totalCount</span>) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      item.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">      item.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;i * <span class="variable language_">this</span>.itemHeight&#125;</span>px`</span>;</span><br><span class="line">      item.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.itemHeight&#125;</span>px`</span>;</span><br><span class="line">      item.<span class="property">textContent</span> = <span class="string">`Item <span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">content</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> virtualScroll = <span class="keyword">new</span> <span class="title class_">VirtualScroll</span>(&#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">itemHeight</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">totalCount</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">bufferSize</span>: <span class="number">5</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(virtualScroll.<span class="property">container</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-动态高度支持"><a href="#2-动态高度支持" class="headerlink" title="2. 动态高度支持"></a>2. 动态高度支持</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicVirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">containerHeight</span> = options.<span class="property">height</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">estimatedItemHeight</span> = options.<span class="property">estimatedItemHeight</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">totalCount</span> = options.<span class="property">totalCount</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">positions</span> = []; <span class="comment">// 存储每项的位置信息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cachedHeights</span> = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 缓存实际高度</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化位置信息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initPositions</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.containerHeight&#125;</span>px`</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initPositions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">positions</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="variable language_">this</span>.<span class="property">totalCount</span>);</span><br><span class="line">    <span class="keyword">let</span> accumHeight = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">totalCount</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">positions</span>[i] = &#123;</span><br><span class="line">        <span class="attr">index</span>: i,</span><br><span class="line">        <span class="attr">top</span>: accumHeight,</span><br><span class="line">        <span class="attr">bottom</span>: accumHeight + <span class="variable language_">this</span>.<span class="property">estimatedItemHeight</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">estimatedItemHeight</span></span><br><span class="line">      &#125;;</span><br><span class="line">      accumHeight += <span class="variable language_">this</span>.<span class="property">estimatedItemHeight</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;accumHeight&#125;</span>px`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">updateItemHeight</span>(<span class="params">index, height</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldHeight = <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">height</span>;</span><br><span class="line">    <span class="keyword">const</span> dHeight = height - oldHeight;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">bottom</span> = <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">top</span> + height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cachedHeights</span>.<span class="title function_">set</span>(index, height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新后续项的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">totalCount</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">positions</span>[i].<span class="property">top</span> += dHeight;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">positions</span>[i].<span class="property">bottom</span> += dHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新总高度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.positions[<span class="variable language_">this</span>.totalCount - <span class="number">1</span>].bottom&#125;</span>px`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">findStartIndex</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">binarySearch</span>(scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">binarySearch</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="variable language_">this</span>.<span class="property">totalCount</span> - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">      <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">const</span> midVal = <span class="variable language_">this</span>.<span class="property">positions</span>[mid];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (midVal.<span class="property">bottom</span> &gt;= scrollTop &amp;&amp; midVal.<span class="property">top</span> &lt;= scrollTop) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal.<span class="property">bottom</span> &lt; scrollTop) &#123;</span><br><span class="line">        start = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> startIndex = <span class="variable language_">this</span>.<span class="title function_">findStartIndex</span>(scrollTop);</span><br><span class="line">    <span class="keyword">const</span> endIndex = <span class="variable language_">this</span>.<span class="title function_">findEndIndex</span>(startIndex, scrollTop);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空现有内容</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染可见项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt;= endIndex; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="title function_">createItem</span>(i);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">content</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">createItem</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    item.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    item.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.positions[index].top&#125;</span>px`</span>;</span><br><span class="line">    item.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听项高度变化</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> height = entries[<span class="number">0</span>].<span class="property">contentRect</span>.<span class="property">height</span>;</span><br><span class="line">      <span class="keyword">if</span> (height !== <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateItemHeight</span>(index, height);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    observer.<span class="title function_">observe</span>(item);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、性能优化"><a href="#三、性能优化" class="headerlink" title="三、性能优化"></a>三、性能优化</h2><h3 id="1-防抖与节流"><a href="#1-防抖与节流" class="headerlink" title="1. 防抖与节流"></a>1. 防抖与节流</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OptimizedVirtualScroll</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(options);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollTimer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 节流处理滚动事件</span></span><br><span class="line">  <span class="title function_">onScroll</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollTimer</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> scrollTop = e.<span class="property">target</span>.<span class="property">scrollTop</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateVisibleRange</span>(scrollTop);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollTimer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;, <span class="number">16</span>); <span class="comment">// 约60fps</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用 RAF 优化渲染</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 渲染逻辑</span></span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-DOM-复用"><a href="#2-DOM-复用" class="headerlink" title="2. DOM 复用"></a>2. DOM 复用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecycleVirtualScroll</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(options);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemPool</span> = []; <span class="comment">// DOM 节点池</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 优先从节点池获取</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">itemPool</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">itemPool</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    item.<span class="property">className</span> = <span class="string">&#x27;virtual-item&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">recycleItem</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// 回收节点到节点池</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemPool</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldItems = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">children</span>);</span><br><span class="line">    <span class="keyword">const</span> newItems = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染新的可见项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">startIndex</span>; i &lt; <span class="variable language_">this</span>.<span class="property">endIndex</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= <span class="variable language_">this</span>.<span class="property">totalCount</span>) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="title function_">getItem</span>();</span><br><span class="line">      item.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateY(<span class="subst">$&#123;i * <span class="variable language_">this</span>.itemHeight&#125;</span>px)`</span>;</span><br><span class="line">      item.<span class="property">textContent</span> = <span class="string">`Item <span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">      newItems.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回收不可见的项</span></span><br><span class="line">    oldItems.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">recycleItem</span>(item);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新 DOM</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    newItems.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">content</span>.<span class="title function_">appendChild</span>(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、进阶特性"><a href="#四、进阶特性" class="headerlink" title="四、进阶特性"></a>四、进阶特性</h2><h3 id="1-无限滚动"><a href="#1-无限滚动" class="headerlink" title="1. 无限滚动"></a>1. 无限滚动</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfiniteVirtualScroll</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(options);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hasMore</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">onScroll</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">onScroll</span>(e);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否需要加载更多</span></span><br><span class="line">    <span class="keyword">const</span> scrollTop = e.<span class="property">target</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> scrollHeight = e.<span class="property">target</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> clientHeight = e.<span class="property">target</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (scrollHeight - scrollTop - clientHeight &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadMore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadMore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span> || !<span class="variable language_">this</span>.<span class="property">hasMore</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newItems = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchMoreData</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">totalCount</span> += newItems.<span class="property">length</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateContent</span>();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-分组支持"><a href="#2-分组支持" class="headerlink" title="2. 分组支持"></a>2. 分组支持</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GroupVirtualScroll</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">groups</span> = options.<span class="property">groups</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">groupHeaderHeight</span> = options.<span class="property">groupHeaderHeight</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemHeight</span> = options.<span class="property">itemHeight</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initGroupPositions</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">initGroupPositions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> accumHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">groupPositions</span> = <span class="variable language_">this</span>.<span class="property">groups</span>.<span class="title function_">map</span>(<span class="function"><span class="params">group</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> groupHeight = <span class="variable language_">this</span>.<span class="property">groupHeaderHeight</span> + group.<span class="property">items</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">itemHeight</span>;</span><br><span class="line">      <span class="keyword">const</span> position = &#123;</span><br><span class="line">        <span class="attr">top</span>: accumHeight,</span><br><span class="line">        <span class="attr">height</span>: groupHeight,</span><br><span class="line">        <span class="attr">bottom</span>: accumHeight + groupHeight</span><br><span class="line">      &#125;;</span><br><span class="line">      accumHeight += groupHeight;</span><br><span class="line">      <span class="keyword">return</span> position;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">findVisibleGroups</span>(<span class="params">scrollTop, viewportHeight</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> visibleGroups = [];</span><br><span class="line">    <span class="keyword">const</span> viewportBottom = scrollTop + viewportHeight;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">groupPositions</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> group = <span class="variable language_">this</span>.<span class="property">groupPositions</span>[i];</span><br><span class="line">      <span class="keyword">if</span> (group.<span class="property">bottom</span> &gt; scrollTop &amp;&amp; group.<span class="property">top</span> &lt; viewportBottom) &#123;</span><br><span class="line">        visibleGroups.<span class="title function_">push</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> visibleGroups;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、最佳实践"><a href="#五、最佳实践" class="headerlink" title="五、最佳实践"></a>五、最佳实践</h2><ol>
<li>合理设置缓冲区大小</li>
<li>优化滚动事件处理</li>
<li>使用 transform 代替 top</li>
<li>实现 DOM 节点复用</li>
<li>优化重排重绘</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering">浏览器渲染原理</a></li>
<li><a href="https://developers.google.com/web/updates/2016/07/infinite-scroller">虚拟滚动实现</a></li>
<li><a href="https://github.com/TanStack/react-virtual">React Virtual</a></li>
<li><a href="https://github.com/Akryum/vue-virtual-scroller">Vue Virtual Scroller</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>虚拟滚动</tag>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>小心爆炸💥</title>
    <url>/%E4%BA%A4%E4%BA%92/scene-bubble-effect/</url>
    <content><![CDATA[<h2 id="效果介绍"><a href="#效果介绍" class="headerlink" title="效果介绍"></a>效果介绍</h2><p>这是我的博客的一个泡泡🫧交互，主要有以下功能：</p>
<ul>
<li>页面上会漂浮着多个半透明的气泡</li>
<li>气泡会缓慢上升并旋转</li>
<li>点击气泡会产生爆炸效果，并显示随机词汇</li>
<li>词汇包含财运、奶茶等多种趣味文本</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="1-HTML-结构"><a href="#1-HTML-结构" class="headerlink" title="1. HTML 结构"></a>1. HTML 结构</h3><p>整个特效是通过 JavaScript 动态创建的，使用 DocumentFragment 优化 DOM 操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">container.<span class="property">className</span> = <span class="string">&#x27;bubble-container&#x27;</span>;</span><br><span class="line">fragment.<span class="title function_">appendChild</span>(container);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(fragment);</span><br></pre></td></tr></table></figure>

<h3 id="2-CSS-样式"><a href="#2-CSS-样式" class="headerlink" title="2. CSS 样式"></a>2. CSS 样式</h3><p>需要添加以下样式来实现气泡和动画效果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bubble-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bubble</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attribute">animation</span>: float <span class="number">20s</span> linear infinite;</span><br><span class="line">  <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">will-change</span>: transform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blessing-text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">animation</span>: fadeOut <span class="number">2s</span> forwards;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.particle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">animation</span>: explode <span class="number">1s</span> ease-out forwards;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> float &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100vh</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100vh</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fadeOut &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> explode &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="built_in">var</span>(--angle)) <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="built_in">var</span>(--angle)) <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-JavaScript-实现"><a href="#3-JavaScript-实现" class="headerlink" title="3. JavaScript 实现"></a>3. JavaScript 实现</h3><h4 id="3-1-性能优化"><a href="#3-1-性能优化" class="headerlink" title="3.1 性能优化"></a>3.1 性能优化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Set 存储活动的泡泡，提高查找和删除效率</span></span><br><span class="line"><span class="keyword">const</span> activeBubbles = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存随机数生成函数</span></span><br><span class="line"><span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line"><span class="keyword">const</span> floor = <span class="title class_">Math</span>.<span class="property">floor</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-创建气泡"><a href="#3-2-创建气泡" class="headerlink" title="3.2 创建气泡"></a>3.2 创建气泡</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createBubble</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bubble = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  bubble.<span class="property">className</span> = <span class="string">&#x27;bubble&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 预计算并缓存样式值</span></span><br><span class="line">  <span class="keyword">const</span> margin = <span class="number">150</span>;</span><br><span class="line">  <span class="keyword">const</span> startX = margin + <span class="title function_">random</span>() * (<span class="variable language_">window</span>.<span class="property">innerWidth</span> - <span class="number">2</span> * margin);</span><br><span class="line">  <span class="keyword">const</span> duration = <span class="number">25</span> + <span class="title function_">random</span>() * <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="title function_">random</span>() * <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">const</span> rotation = <span class="title function_">random</span>() * <span class="number">360</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 cssText 批量设置样式</span></span><br><span class="line">  bubble.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    left:<span class="subst">$&#123;startX&#125;</span>px;</span></span><br><span class="line"><span class="string">    animation-duration:<span class="subst">$&#123;duration&#125;</span>s;</span></span><br><span class="line"><span class="string">    animation-delay:<span class="subst">$&#123;delay&#125;</span>s;</span></span><br><span class="line"><span class="string">    transform:rotate(<span class="subst">$&#123;rotation&#125;</span>deg)</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> bubble;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-趣味文本设计"><a href="#4-趣味文本设计" class="headerlink" title="4. 趣味文本设计"></a>4. 趣味文本设计</h3><p>包含了多种主题的祝福语：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blessings = [</span><br><span class="line">  <span class="comment">// 财运祝福</span></span><br><span class="line">  <span class="string">&quot;我看你今天要发财啊💰&quot;</span>,</span><br><span class="line">  <span class="string">&quot;今天赚它一个亿💴&quot;</span>,</span><br><span class="line">  <span class="string">&quot;钞能力MAX✨&quot;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 奶茶相关</span></span><br><span class="line">  <span class="string">`今天喝<span class="subst">$&#123;milkTeas[random() * milkTeas.length | <span class="number">0</span>]&#125;</span>🧋`</span>,</span><br><span class="line">  <span class="string">&quot;奶茶要加双倍珍珠🧋&quot;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 搞笑祝福</span></span><br><span class="line">  <span class="string">&quot;今天要当最强躺赢王👑&quot;</span>,</span><br><span class="line">  <span class="string">&quot;今天要当摸鱼王🐟&quot;</span>,</span><br><span class="line">  <span class="string">&quot;摸鱼时间到了~&quot;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="性能优化要点"><a href="#性能优化要点" class="headerlink" title="性能优化要点"></a>性能优化要点</h2><ol>
<li><p>DOM 操作优化</p>
<ul>
<li>使用 DocumentFragment 批量添加元素</li>
<li>使用 cssText 批量设置样式</li>
<li>减少重排重绘</li>
</ul>
</li>
<li><p>动画性能优化</p>
<ul>
<li>使用 transform 实现动画</li>
<li>缓存计算结果</li>
<li>添加 will-change 提示</li>
</ul>
</li>
<li><p>内存管理优化</p>
<ul>
<li>使用 Set 存储活动元素</li>
<li>及时清理不需要的元素</li>
<li>避免内存泄漏</li>
</ul>
</li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>将 CSS 代码添加到你的样式文件中</li>
<li>将 JavaScript 代码保存为 <code>bubble-effect.js</code></li>
<li>在页面中引入文件：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/bubble-effect.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>气泡效果只在首页和文章列表页显示</li>
<li>已进行性能优化，但仍建议控制气泡数量</li>
<li>可以根据需要调整动画参数</li>
<li>祝福语可以自定义扩展</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>泡泡带来的不只是视觉效果，更是一份美好的祝福 ✨</p>
]]></content>
      <categories>
        <category>交互</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>CSS</tag>
        <tag>前端特效</tag>
      </tags>
  </entry>
  <entry>
    <title>列表页跳转详情页的一些最佳实践？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/scene-list-detail-page/</url>
    <content><![CDATA[<h2 id="一、常见问题"><a href="#一、常见问题" class="headerlink" title="一、常见问题"></a>一、常见问题</h2><p>在列表页跳转到详情页时，通常会遇到以下问题：</p>
<ol>
<li>详情页数据获取方式</li>
<li>返回列表页如何定位到之前位置</li>
<li>列表页数据缓存</li>
<li>详情页数据共享</li>
<li>URL 参数处理</li>
</ol>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="1-数据传递方式"><a href="#1-数据传递方式" class="headerlink" title="1. 数据传递方式"></a>1. 数据传递方式</h3><h4 id="1-1-URL-参数传递"><a href="#1-1-URL-参数传递" class="headerlink" title="1.1 URL 参数传递"></a>1.1 URL 参数传递</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue Router 示例</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/detail/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">DetailPage</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span> <span class="comment">// 将路由参数作为组件的 props</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表页跳转</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">goToDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123; id &#125;,</span><br><span class="line">      <span class="attr">query</span>: &#123; </span><br><span class="line">        <span class="attr">source</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchDetail</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-状态管理传递"><a href="#1-2-状态管理传递" class="headerlink" title="1.2 状态管理传递"></a>1.2 状态管理传递</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vuex store</span></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">currentItem</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">listData</span>: [],</span><br><span class="line">    <span class="attr">listScrollPosition</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setCurrentItem</span>(<span class="params">state, item</span>) &#123;</span><br><span class="line">      state.<span class="property">currentItem</span> = item</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setListScrollPosition</span>(<span class="params">state, position</span>) &#123;</span><br><span class="line">      state.<span class="property">listScrollPosition</span> = position</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表页组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goToDetail</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setCurrentItem&#x27;</span>, item)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setListScrollPosition&#x27;</span>, <span class="variable language_">window</span>.<span class="property">scrollY</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">`/detail/<span class="subst">$&#123;item.id&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详情页组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">detailData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">currentItem</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">detailData</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果没有缓存数据，则请求详情</span></span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchDetail</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-列表页位置恢复"><a href="#2-列表页位置恢复" class="headerlink" title="2. 列表页位置恢复"></a>2. 列表页位置恢复</h3><h4 id="2-1-基于-scrollBehavior"><a href="#2-1-基于-scrollBehavior" class="headerlink" title="2.1 基于 scrollBehavior"></a>2.1 基于 scrollBehavior</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="comment">// 如果有保存的位置，则恢复</span></span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">keepAlive</span> &amp;&amp; to.<span class="property">meta</span>.<span class="property">isBack</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果是从详情页返回，且列表页需要缓存</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: store.<span class="property">state</span>.<span class="property">listScrollPosition</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他情况滚动到顶部</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-2-虚拟列表实现"><a href="#2-2-虚拟列表实现" class="headerlink" title="2.2 虚拟列表实现"></a>2.2 虚拟列表实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;virtual-list</span><br><span class="line">    :data-key=&quot;&#x27;id&#x27;&quot;</span><br><span class="line">    :data-sources=&quot;listData&quot;</span><br><span class="line">    :data-component=&quot;itemComponent&quot;</span><br><span class="line">    :keeps=&quot;30&quot;</span><br><span class="line">    :estimate-size=&quot;60&quot;</span><br><span class="line">    @scroll=&quot;handleScroll&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import VirtualList from &#x27;vue-virtual-scroll-list&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; VirtualList &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      listData: [],</span><br><span class="line">      scrollState: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleScroll(&#123; offset &#125;) &#123;</span><br><span class="line">      // 保存滚动状态</span><br><span class="line">      this.scrollState = offset</span><br><span class="line">    &#125;,</span><br><span class="line">    restoreScroll() &#123;</span><br><span class="line">      if (this.scrollState !== null) &#123;</span><br><span class="line">        this.$refs.virtualList.scrollToOffset(this.scrollState)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    // 在 keep-alive 组件被激活时恢复滚动位置</span><br><span class="line">    this.restoreScroll()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-数据缓存策略"><a href="#3-数据缓存策略" class="headerlink" title="3. 数据缓存策略"></a>3. 数据缓存策略</h3><h4 id="3-1-Keep-alive-缓存"><a href="#3-1-Keep-alive-缓存" class="headerlink" title="3.1 Keep-alive 缓存"></a>3.1 Keep-alive 缓存</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;keep-alive :include=&quot;[&#x27;ListView&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ListView.vue --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ListView&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      page: 1,</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    // 组件被激活时触发</span><br><span class="line">    if (this.$route.meta.isBack) &#123;</span><br><span class="line">      // 从详情页返回，使用缓存数据</span><br><span class="line">      this.restoreState()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 新进入页面，重新加载数据</span><br><span class="line">      this.loadData()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async loadData() &#123;</span><br><span class="line">      const data = await this.fetchList(this.page)</span><br><span class="line">      this.list = [...this.list, ...data]</span><br><span class="line">    &#125;,</span><br><span class="line">    restoreState() &#123;</span><br><span class="line">      // 恢复滚动位置和其他状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-本地存储缓存"><a href="#3-2-本地存储缓存" class="headerlink" title="3.2 本地存储缓存"></a>3.2 本地存储缓存</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">expireTime</span> = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 5分钟过期</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">save</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = &#123;</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(cache))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">    <span class="keyword">if</span> (!cache) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; data, timestamp &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(cache)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - timestamp &gt; <span class="variable language_">this</span>.<span class="property">expireTime</span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable language_">this</span>.<span class="property">key</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> listCache = <span class="keyword">new</span> <span class="title class_">ListCache</span>(<span class="string">&#x27;list_page_cache&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 尝试从缓存恢复数据</span></span><br><span class="line">    <span class="keyword">const</span> cached = listCache.<span class="title function_">get</span>()</span><br><span class="line">    <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = cached</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">loadData</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchList</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = data</span><br><span class="line">      <span class="comment">// 保存到缓存</span></span><br><span class="line">      listCache.<span class="title function_">save</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><h4 id="4-1-预加载详情"><a href="#4-1-预加载详情" class="headerlink" title="4.1 预加载详情"></a>4.1 预加载详情</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 鼠标悬停时预加载详情</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">preloadDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> detail = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchDetail</span>(id)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;cacheDetail&#x27;</span>, &#123; id, detail &#125;)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;预加载失败:&#x27;</span>, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用预加载数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">goToDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cached = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">detailCache</span>[id]</span><br><span class="line">      <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setCurrentDetail&#x27;</span>, cached)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">`/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 降级为普通加载</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">`/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-列表页懒加载"><a href="#4-2-列表页懒加载" class="headerlink" title="4.2 列表页懒加载"></a>4.2 列表页懒加载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;list-container&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-for=&quot;item in visibleItems&quot;</span><br><span class="line">      :key=&quot;item.id&quot;</span><br><span class="line">      class=&quot;list-item&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ref=&quot;observer&quot; class=&quot;observer&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      page: 1,</span><br><span class="line">      loading: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    visibleItems() &#123;</span><br><span class="line">      return this.list.slice(0, this.page * 20)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.setupIntersectionObserver()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setupIntersectionObserver() &#123;</span><br><span class="line">      const observer = new IntersectionObserver(</span><br><span class="line">        entries =&gt; &#123;</span><br><span class="line">          if (entries[0].isIntersecting &amp;&amp; !this.loading) &#123;</span><br><span class="line">            this.loadMore()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; threshold: 0.1 &#125;</span><br><span class="line">      )</span><br><span class="line">      </span><br><span class="line">      observer.observe(this.$refs.observer)</span><br><span class="line">    &#125;,</span><br><span class="line">    async loadMore() &#123;</span><br><span class="line">      this.loading = true</span><br><span class="line">      try &#123;</span><br><span class="line">        const data = await this.fetchList(this.page)</span><br><span class="line">        this.list.push(...data)</span><br><span class="line">        this.page++</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        this.loading = false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-分享页处理"><a href="#5-分享页处理" class="headerlink" title="5. 分享页处理"></a>5. 分享页处理</h3><h4 id="5-1-SEO-优化"><a href="#5-1-SEO-优化" class="headerlink" title="5.1 SEO 优化"></a>5.1 SEO 优化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详情页组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">asyncData</span>(<span class="params">&#123; params, $axios &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 服务端渲染时获取数据</span></span><br><span class="line">    <span class="keyword">const</span> detail = <span class="keyword">await</span> $axios.$get(<span class="string">`/api/detail/<span class="subst">$&#123;params.id&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; detail &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">head</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">meta</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">description</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;keywords&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;keywords&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">keywords</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Open Graph 标签</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;og:title&#x27;</span>,</span><br><span class="line">          <span class="attr">property</span>: <span class="string">&#x27;og:title&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">title</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;og:description&#x27;</span>,</span><br><span class="line">          <span class="attr">property</span>: <span class="string">&#x27;og:description&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">description</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">&#x27;og:image&#x27;</span>,</span><br><span class="line">          <span class="attr">property</span>: <span class="string">&#x27;og:image&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="variable language_">this</span>.<span class="property">detail</span>.<span class="property">image</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-来源判断"><a href="#5-2-来源判断" class="headerlink" title="5.2 来源判断"></a>5.2 来源判断</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isFromShare</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否来自分享</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isFromShare</span> = !<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">source</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据来源设置不同的返回行为</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isFromShare</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleShareVisit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleShareVisit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 处理分享访问</span></span><br><span class="line">      <span class="comment">// 1. 记录分享访问</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">recordShareVisit</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 2. 显示相关推荐</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">loadRecommendations</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3. 设置返回首页而不是列表页</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setupBackBehavior</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">setupBackBehavior</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 重写返回按钮行为</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/back&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-分享配置"><a href="#5-3-分享配置" class="headerlink" title="5.3 分享配置"></a>5.3 分享配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// share.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ShareService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">config</span> = config</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">generateShareInfo</span>(<span class="params">detail</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: detail.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">desc</span>: detail.<span class="property">description</span>,</span><br><span class="line">      <span class="attr">link</span>: <span class="variable language_">this</span>.<span class="title function_">generateShareLink</span>(detail.<span class="property">id</span>),</span><br><span class="line">      <span class="attr">imgUrl</span>: detail.<span class="property">image</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">generateShareLink</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseUrl = process.<span class="property">env</span>.<span class="property">BASE_URL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/detail/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 配置微信分享</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">setupWechatShare</span>(<span class="params">shareInfo</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> wx = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">initWechatSDK</span>()</span><br><span class="line">      </span><br><span class="line">      wx.<span class="title function_">updateAppMessageShareData</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: shareInfo.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">desc</span>: shareInfo.<span class="property">desc</span>,</span><br><span class="line">        <span class="attr">link</span>: shareInfo.<span class="property">link</span>,</span><br><span class="line">        <span class="attr">imgUrl</span>: shareInfo.<span class="property">imgUrl</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">trackShare</span>(<span class="string">&#x27;wechat&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      wx.<span class="title function_">updateTimelineShareData</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: shareInfo.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">link</span>: shareInfo.<span class="property">link</span>,</span><br><span class="line">        <span class="attr">imgUrl</span>: shareInfo.<span class="property">imgUrl</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;微信分享配置失败:&#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 追踪分享数据</span></span><br><span class="line">  <span class="title function_">trackShare</span>(<span class="params">platform</span>) &#123;</span><br><span class="line">    <span class="comment">// 记录分享数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reportShareEvent</span>(&#123;</span><br><span class="line">      platform,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">shareService</span>: <span class="keyword">new</span> <span class="title class_">ShareService</span>(&#123;</span><br><span class="line">        <span class="attr">appId</span>: <span class="string">&#x27;your-app-id&#x27;</span>,</span><br><span class="line">        <span class="comment">// 其他配置...</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 生成分享信息</span></span><br><span class="line">    <span class="keyword">const</span> shareInfo = <span class="variable language_">this</span>.<span class="property">shareService</span>.<span class="title function_">generateShareInfo</span>(<span class="variable language_">this</span>.<span class="property">detail</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置分享</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">shareService</span>.<span class="title function_">setupWechatShare</span>(shareInfo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-4-数据统计"><a href="#5-4-数据统计" class="headerlink" title="5.4 数据统计"></a>5.4 数据统计</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShareAnalytics</span> &#123;</span><br><span class="line">  <span class="comment">// 记录分享来源</span></span><br><span class="line">  <span class="title function_">trackShareSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> source = <span class="variable language_">this</span>.<span class="title function_">getUtmSource</span>()</span><br><span class="line">    <span class="keyword">const</span> medium = <span class="variable language_">this</span>.<span class="title function_">getUtmMedium</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">saveAnalytics</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;share_visit&#x27;</span>,</span><br><span class="line">      source,</span><br><span class="line">      medium,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 记录分享转化</span></span><br><span class="line">  <span class="title function_">trackConversion</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">saveAnalytics</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;share_conversion&#x27;</span>,</span><br><span class="line">      action,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取分享来源</span></span><br><span class="line">  <span class="title function_">getUtmSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span><br><span class="line">    <span class="keyword">return</span> params.<span class="title function_">get</span>(<span class="string">&#x27;utm_source&#x27;</span>) || <span class="string">&#x27;direct&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 保存统计数据</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">saveAnalytics</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/analytics&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;统计数据保存失败:&#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://router.vuejs.org/">Vue Router 官方文档</a></li>
<li><a href="https://cn.vuejs.org/v2/api/#keep-alive">Keep-alive 组件</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API">浏览器存储指南</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a></li>
<li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">微信 JS-SDK 文档</a></li>
<li><a href="https://developers.google.com/search/docs/fundamentals/seo-starter-guide">SEO 最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>React</tag>
        <tag>前端路由</tag>
      </tags>
  </entry>
  <entry>
    <title>地图海量点渲染的解决方案有哪些？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91/scene-map-big-data/</url>
    <content><![CDATA[<h2 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h2><p>在地图应用中，经常需要展示海量的点位数据（如出租车、共享单车、监控点位等）。当数据量达到几万甚至几十万个点时，会带来以下问题：</p>
<ol>
<li>渲染性能下降</li>
<li>交互响应迟缓</li>
<li>内存占用过大</li>
<li>视觉上的点位重叠</li>
</ol>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="1-数据分层与分块"><a href="#1-数据分层与分块" class="headerlink" title="1. 数据分层与分块"></a>1. 数据分层与分块</h3><h4 id="1-1-按层级分组"><a href="#1-1-按层级分组" class="headerlink" title="1.1 按层级分组"></a>1.1 按层级分组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LayerManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">layers</span> = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 存储不同层级的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">addPoint</span>(<span class="params">point, zoom</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">layers</span>.<span class="title function_">has</span>(zoom)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">layers</span>.<span class="title function_">set</span>(zoom, <span class="keyword">new</span> <span class="title class_">Set</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">layers</span>.<span class="title function_">get</span>(zoom).<span class="title function_">add</span>(point);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getVisiblePoints</span>(<span class="params">zoom</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">layers</span>.<span class="title function_">get</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(zoom)) || <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-网格分块"><a href="#1-2-网格分块" class="headerlink" title="1.2 网格分块"></a>1.2 网格分块</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GridManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">gridSize</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gridSize</span> = gridSize;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grids</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 计算点位所在的网格</span></span><br><span class="line">  <span class="title function_">getGridKey</span>(<span class="params">lat, lng</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="title class_">Math</span>.<span class="title function_">floor</span>(lng / <span class="variable language_">this</span>.<span class="property">gridSize</span>);</span><br><span class="line">    <span class="keyword">const</span> y = <span class="title class_">Math</span>.<span class="title function_">floor</span>(lat / <span class="variable language_">this</span>.<span class="property">gridSize</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;x&#125;</span>-<span class="subst">$&#123;y&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 添加点位到网格</span></span><br><span class="line">  <span class="title function_">addPoint</span>(<span class="params">point</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="variable language_">this</span>.<span class="title function_">getGridKey</span>(point.<span class="property">lat</span>, point.<span class="property">lng</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">grids</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">grids</span>.<span class="title function_">set</span>(key, []);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grids</span>.<span class="title function_">get</span>(key).<span class="title function_">push</span>(point);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取视野范围内的网格数据</span></span><br><span class="line">  <span class="title function_">getVisiblePoints</span>(<span class="params">bounds</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> visiblePoints = [];</span><br><span class="line">    <span class="keyword">const</span> &#123; north, south, east, west &#125; = bounds;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> lat = south; lat &lt;= north; lat += <span class="variable language_">this</span>.<span class="property">gridSize</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> lng = west; lng &lt;= east; lng += <span class="variable language_">this</span>.<span class="property">gridSize</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="variable language_">this</span>.<span class="title function_">getGridKey</span>(lat, lng);</span><br><span class="line">        <span class="keyword">const</span> points = <span class="variable language_">this</span>.<span class="property">grids</span>.<span class="title function_">get</span>(key) || [];</span><br><span class="line">        visiblePoints.<span class="title function_">push</span>(...points);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> visiblePoints;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-点位聚合"><a href="#2-点位聚合" class="headerlink" title="2. 点位聚合"></a>2. 点位聚合</h3><h4 id="2-1-基础聚合算法"><a href="#2-1-基础聚合算法" class="headerlink" title="2.1 基础聚合算法"></a>2.1 基础聚合算法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClusterManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius; <span class="comment">// 聚合半径</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 计算两点距离</span></span><br><span class="line">  <span class="title function_">getDistance</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dx = p1.<span class="property">lng</span> - p2.<span class="property">lng</span>;</span><br><span class="line">    <span class="keyword">const</span> dy = p1.<span class="property">lat</span> - p2.<span class="property">lat</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 聚合点位</span></span><br><span class="line">  <span class="title function_">cluster</span>(<span class="params">points</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> clusters = [];</span><br><span class="line">    <span class="keyword">const</span> processed = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> point <span class="keyword">of</span> points) &#123;</span><br><span class="line">      <span class="keyword">if</span> (processed.<span class="title function_">has</span>(point)) <span class="keyword">continue</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> cluster = &#123;</span><br><span class="line">        <span class="attr">center</span>: point,</span><br><span class="line">        <span class="attr">points</span>: [point],</span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> other <span class="keyword">of</span> points) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processed.<span class="title function_">has</span>(other)) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getDistance</span>(point, other) &lt;= <span class="variable language_">this</span>.<span class="property">radius</span>) &#123;</span><br><span class="line">          cluster.<span class="property">points</span>.<span class="title function_">push</span>(other);</span><br><span class="line">          cluster.<span class="property">count</span>++;</span><br><span class="line">          processed.<span class="title function_">add</span>(other);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      clusters.<span class="title function_">push</span>(cluster);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> clusters;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-四叉树聚合"><a href="#2-2-四叉树聚合" class="headerlink" title="2.2 四叉树聚合"></a>2.2 四叉树聚合</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuadTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">bounds, capacity</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bounds</span> = bounds;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">capacity</span> = capacity;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">points</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">divided</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 划分区域</span></span><br><span class="line">  <span class="title function_">subdivide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y, width, height &#125; = <span class="variable language_">this</span>.<span class="property">bounds</span>;</span><br><span class="line">    <span class="keyword">const</span> w = width / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> h = height / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">northwest</span> = <span class="keyword">new</span> <span class="title class_">QuadTree</span>(&#123;x, y, <span class="attr">width</span>: w, <span class="attr">height</span>: h&#125;, <span class="variable language_">this</span>.<span class="property">capacity</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">northeast</span> = <span class="keyword">new</span> <span class="title class_">QuadTree</span>(&#123;<span class="attr">x</span>: x + w, y, <span class="attr">width</span>: w, <span class="attr">height</span>: h&#125;, <span class="variable language_">this</span>.<span class="property">capacity</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">southwest</span> = <span class="keyword">new</span> <span class="title class_">QuadTree</span>(&#123;x, <span class="attr">y</span>: y + h, <span class="attr">width</span>: w, <span class="attr">height</span>: h&#125;, <span class="variable language_">this</span>.<span class="property">capacity</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">southeast</span> = <span class="keyword">new</span> <span class="title class_">QuadTree</span>(&#123;<span class="attr">x</span>: x + w, <span class="attr">y</span>: y + h, <span class="attr">width</span>: w, <span class="attr">height</span>: h&#125;, <span class="variable language_">this</span>.<span class="property">capacity</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">divided</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 插入点位</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">point</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">bounds</span>.<span class="title function_">contains</span>(point)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">capacity</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">points</span>.<span class="title function_">push</span>(point);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">divided</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">subdivide</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">northwest</span>.<span class="title function_">insert</span>(point) ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">northeast</span>.<span class="title function_">insert</span>(point) ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">southwest</span>.<span class="title function_">insert</span>(point) ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">southeast</span>.<span class="title function_">insert</span>(point)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-渲染优化"><a href="#3-渲染优化" class="headerlink" title="3. 渲染优化"></a>3. 渲染优化</h3><h4 id="3-1-Canvas-渲染"><a href="#3-1-Canvas-渲染" class="headerlink" title="3.1 Canvas 渲染"></a>3.1 Canvas 渲染</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CanvasLayer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">map</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = map;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 绘制点位</span></span><br><span class="line">  <span class="title function_">drawPoints</span>(<span class="params">points</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> point <span class="keyword">of</span> points) &#123;</span><br><span class="line">      <span class="keyword">const</span> pixel = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">latLngToContainerPoint</span>(point);</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">beginPath</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">arc</span>(pixel.<span class="property">x</span>, pixel.<span class="property">y</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = point.<span class="property">color</span> || <span class="string">&#x27;#ff0000&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">fill</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新 Canvas 大小</span></span><br><span class="line">  <span class="title function_">resize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getSize</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> = size.<span class="property">x</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> = size.<span class="property">y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-WebGL-渲染"><a href="#3-2-WebGL-渲染" class="headerlink" title="3.2 WebGL 渲染"></a>3.2 WebGL 渲染</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebGLLayer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">map</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gl</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = map;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initShaders</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBuffers</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化着色器</span></span><br><span class="line">  <span class="title function_">initShaders</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vertexShader = <span class="string">`</span></span><br><span class="line"><span class="string">      attribute vec2 a_position;</span></span><br><span class="line"><span class="string">      uniform vec2 u_resolution;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      void main() &#123;</span></span><br><span class="line"><span class="string">        vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;</span></span><br><span class="line"><span class="string">        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);</span></span><br><span class="line"><span class="string">        gl_PointSize = 4.0;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> fragmentShader = <span class="string">`</span></span><br><span class="line"><span class="string">      precision mediump float;</span></span><br><span class="line"><span class="string">      uniform vec4 u_color;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      void main() &#123;</span></span><br><span class="line"><span class="string">        float dist = length(gl_PointCoord - vec2(0.5, 0.5));</span></span><br><span class="line"><span class="string">        if (dist &gt; 0.5) &#123;</span></span><br><span class="line"><span class="string">          discard;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        gl_FragColor = u_color;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 编译和链接着色器的代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 渲染点位</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">points</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> positions = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(points.<span class="property">length</span> * <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    points.<span class="title function_">forEach</span>(<span class="function">(<span class="params">point, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> pixel = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">latLngToContainerPoint</span>(point);</span><br><span class="line">      positions[i * <span class="number">2</span>] = pixel.<span class="property">x</span>;</span><br><span class="line">      positions[i * <span class="number">2</span> + <span class="number">1</span>] = pixel.<span class="property">y</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... WebGL 绘制代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-数据调度优化"><a href="#4-数据调度优化" class="headerlink" title="4. 数据调度优化"></a>4. 数据调度优化</h3><h4 id="4-1-视野范围计算"><a href="#4-1-视野范围计算" class="headerlink" title="4.1 视野范围计算"></a>4.1 视野范围计算</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewportManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">map</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = map;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取当前视野范围</span></span><br><span class="line">  <span class="title function_">getBounds</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bounds = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getBounds</span>();</span><br><span class="line">    <span class="keyword">const</span> ne = bounds.<span class="title function_">getNorthEast</span>();</span><br><span class="line">    <span class="keyword">const</span> sw = bounds.<span class="title function_">getSouthWest</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">north</span>: ne.<span class="property">lat</span>,</span><br><span class="line">      <span class="attr">south</span>: sw.<span class="property">lat</span>,</span><br><span class="line">      <span class="attr">east</span>: ne.<span class="property">lng</span>,</span><br><span class="line">      <span class="attr">west</span>: sw.<span class="property">lng</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断点是否在视野内</span></span><br><span class="line">  <span class="title function_">isPointInView</span>(<span class="params">point</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bounds = <span class="variable language_">this</span>.<span class="title function_">getBounds</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      point.<span class="property">lat</span> &lt;= bounds.<span class="property">north</span> &amp;&amp;</span><br><span class="line">      point.<span class="property">lat</span> &gt;= bounds.<span class="property">south</span> &amp;&amp;</span><br><span class="line">      point.<span class="property">lng</span> &lt;= bounds.<span class="property">east</span> &amp;&amp;</span><br><span class="line">      point.<span class="property">lng</span> &gt;= bounds.<span class="property">west</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-异步加载"><a href="#4-2-异步加载" class="headerlink" title="4.2 异步加载"></a>4.2 异步加载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataLoader</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 异步加载数据</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadTileData</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;x&#125;</span>-<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;z&#125;</span>`</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> checkCache = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(checkCache);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">add</span>(key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/points?x=<span class="subst">$&#123;x&#125;</span>&amp;y=<span class="subst">$&#123;y&#125;</span>&amp;z=<span class="subst">$&#123;z&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> points = <span class="keyword">await</span> data.<span class="title function_">json</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, points);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> points;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、实践建议"><a href="#三、实践建议" class="headerlink" title="三、实践建议"></a>三、实践建议</h2><ol>
<li><p>数据处理</p>
<ul>
<li>预处理数据，提前计算聚合结果</li>
<li>使用 Web Worker 处理大量数据</li>
<li>采用增量加载策略</li>
</ul>
</li>
<li><p>渲染优化</p>
<ul>
<li>优先使用 Canvas&#x2F;WebGL 渲染</li>
<li>实现图层缓存机制</li>
<li>控制重绘频率</li>
</ul>
</li>
<li><p>交互优化</p>
<ul>
<li>实现节流和防抖</li>
<li>优化事件监听器</li>
<li>添加加载提示</li>
</ul>
</li>
</ol>
<h2 id="四、完整示例"><a href="#四、完整示例" class="headerlink" title="四、完整示例"></a>四、完整示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigDataMap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">container</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="title class_">Map</span>(container);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gridManager</span> = <span class="keyword">new</span> <span class="title class_">GridManager</span>(<span class="number">0.01</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clusterManager</span> = <span class="keyword">new</span> <span class="title class_">ClusterManager</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvasLayer</span> = <span class="keyword">new</span> <span class="title class_">CanvasLayer</span>(<span class="variable language_">this</span>.<span class="property">map</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataLoader</span> = <span class="keyword">new</span> <span class="title class_">DataLoader</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initEvents</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化事件</span></span><br><span class="line">  <span class="title function_">initEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">on</span>(<span class="string">&#x27;moveend&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">throttle</span>(<span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">100</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">on</span>(<span class="string">&#x27;zoomend&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">throttle</span>(<span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新视图</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bounds = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getBounds</span>();</span><br><span class="line">    <span class="keyword">const</span> zoom = <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">getZoom</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="keyword">const</span> points = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">dataLoader</span>.<span class="title function_">loadTileData</span>(</span><br><span class="line">      bounds.<span class="title function_">getWest</span>(),</span><br><span class="line">      bounds.<span class="title function_">getSouth</span>(),</span><br><span class="line">      zoom</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 网格分块</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gridManager</span>.<span class="title function_">clear</span>();</span><br><span class="line">    points.<span class="title function_">forEach</span>(<span class="function"><span class="params">point</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">gridManager</span>.<span class="title function_">addPoint</span>(point));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取视野内的点</span></span><br><span class="line">    <span class="keyword">const</span> visiblePoints = <span class="variable language_">this</span>.<span class="property">gridManager</span>.<span class="title function_">getVisiblePoints</span>(bounds);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点位聚合</span></span><br><span class="line">    <span class="keyword">const</span> clusters = <span class="variable language_">this</span>.<span class="property">clusterManager</span>.<span class="title function_">cluster</span>(visiblePoints);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvasLayer</span>.<span class="title function_">drawPoints</span>(clusters);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 节流函数</span></span><br><span class="line">  <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://webglfundamentals.org/">WebGL 基础教程</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas">Canvas 性能优化</a></li>
<li><a href="https://en.wikipedia.org/wiki/Quadtree">四叉树算法详解</a></li>
<li><a href="https://docs.mapbox.com/help/troubleshooting/mapbox-gl-js-performance/">地图可视化最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>地图开发</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>大数据</tag>
        <tag>地图</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实现即时通讯的常用技术有哪些？</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/socket-realtime-communication/</url>
    <content><![CDATA[<h2 id="一、技术概述"><a href="#一、技术概述" class="headerlink" title="一、技术概述"></a>一、技术概述</h2><p>前端实现即时通讯的主要技术方案包括：</p>
<ol>
<li>传统轮询（Polling）</li>
<li>长轮询（Long Polling）</li>
<li>WebSocket</li>
<li>Server-Sent Events (SSE)</li>
<li>Socket.IO</li>
</ol>
<h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><h3 id="1-传统轮询"><a href="#1-传统轮询" class="headerlink" title="1. 传统轮询"></a>1. 传统轮询</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Polling</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url, interval = <span class="number">3000</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interval</span> = interval;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Polling error:&#x27;</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">interval</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理接收到的消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> polling = <span class="keyword">new</span> <span class="title class_">Polling</span>(<span class="string">&#x27;/api/messages&#x27;</span>);</span><br><span class="line">polling.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<h3 id="2-长轮询"><a href="#2-长轮询" class="headerlink" title="2. 长轮询"></a>2. 长轮询</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LongPolling</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isPolling</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isPolling</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">isPolling</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">url</span>, &#123;</span><br><span class="line">          <span class="attr">timeout</span>: <span class="number">30000</span> <span class="comment">// 30秒超时</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Long polling error:&#x27;</span>, error);</span><br><span class="line">        <span class="comment">// 错误后等待一段时间再重试</span></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">5000</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isPolling</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3. WebSocket"></a>3. WebSocket</h3><h4 id="3-1-基础实现"><a href="#3-1-基础实现" class="headerlink" title="3.1 基础实现"></a>3.1 基础实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebSocketClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reconnectInterval</span> = <span class="number">3000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket connection error:&#x27;</span>, error);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connected&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket closed&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket error:&#x27;</span>, error);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">reconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> &lt; <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>++;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Reconnecting... Attempt <span class="subst">$&#123;<span class="variable language_">this</span>.reconnectAttempts&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">      &#125;, <span class="variable language_">this</span>.<span class="property">reconnectInterval</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket is not connected&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-心跳检测"><a href="#3-2-心跳检测" class="headerlink" title="3.2 心跳检测"></a>3.2 心跳检测</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeartbeatWebSocket</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WebSocketClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(url);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heartbeatInterval</span> = <span class="number">30000</span>; <span class="comment">// 30秒</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">startHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ping&#x27;</span> &#125;);</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">heartbeatInterval</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">stopHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connected&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">startHeartbeat</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket closed&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">stopHeartbeat</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Server-Sent-Events"><a href="#4-Server-Sent-Events" class="headerlink" title="4. Server-Sent Events"></a>4. Server-Sent Events</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SSEClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventSource</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventSource</span> = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventSource</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;SSE connected&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventSource</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventSource</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;SSE error:&#x27;</span>, error);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">eventSource</span>.<span class="title function_">close</span>();</span><br><span class="line">      <span class="comment">// 可以在这里实现重连逻辑</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">eventSource</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">eventSource</span>.<span class="title function_">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-Socket-IO"><a href="#5-Socket-IO" class="headerlink" title="5. Socket.IO"></a>5. Socket.IO</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SocketIOClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span> = <span class="title function_">io</span>(url, &#123;</span><br><span class="line">      <span class="attr">reconnection</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">reconnectionAttempts</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">reconnectionDelay</span>: <span class="number">3000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Socket.IO connected&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Socket.IO disconnected&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Socket.IO error:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义事件监听</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">send</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">emit</span>(event, data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、技术对比"><a href="#三、技术对比" class="headerlink" title="三、技术对比"></a>三、技术对比</h2><h3 id="1-性能对比"><a href="#1-性能对比" class="headerlink" title="1. 性能对比"></a>1. 性能对比</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceTest</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">runTests</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = &#123;</span><br><span class="line">      <span class="attr">polling</span>: <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">testPolling</span>(),</span><br><span class="line">      <span class="attr">longPolling</span>: <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">testLongPolling</span>(),</span><br><span class="line">      <span class="attr">webSocket</span>: <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">testWebSocket</span>(),</span><br><span class="line">      <span class="attr">sse</span>: <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">testSSE</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">table</span>(results);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">testPolling</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 测试代码...</span></span><br><span class="line">    <span class="keyword">const</span> endTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">latency</span>: endTime - startTime,</span><br><span class="line">      <span class="attr">bandwidth</span>: <span class="string">&#x27;高&#x27;</span>,</span><br><span class="line">      <span class="attr">serverLoad</span>: <span class="string">&#x27;高&#x27;</span>,</span><br><span class="line">      <span class="attr">realtime</span>: <span class="string">&#x27;低&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 其他测试方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a>2. 应用场景</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RealtimeStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getRecommendedTechnology</span>(<span class="params">requirements</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      messageFrequency,</span><br><span class="line">      userCount,</span><br><span class="line">      browserSupport,</span><br><span class="line">      bidirectional</span><br><span class="line">    &#125; = requirements;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (bidirectional &amp;&amp; browserSupport.<span class="property">webSocket</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;WebSocket&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!bidirectional &amp;&amp; browserSupport.<span class="property">sse</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;SSE&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (messageFrequency === <span class="string">&#x27;high&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Long Polling&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Traditional Polling&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、最佳实践"><a href="#四、最佳实践" class="headerlink" title="四、最佳实践"></a>四、最佳实践</h2><h3 id="1-消息可靠性"><a href="#1-消息可靠性" class="headerlink" title="1. 消息可靠性"></a>1. 消息可靠性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReliableMessaging</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageQueue</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageId</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">messageId</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageQueue</span>.<span class="title function_">set</span>(id, message);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sendWithRetry</span>(id, message);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">sendWithRetry</span>(<span class="params">id, message, retries = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">doSend</span>(message);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messageQueue</span>.<span class="title function_">delete</span>(id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (retries &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sendWithRetry</span>(id, message, retries - <span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-断线重连"><a href="#2-断线重连" class="headerlink" title="2. 断线重连"></a>2. 断线重连</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReconnectionManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxRetries</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">retryDelay</span> = <span class="number">3000</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">exponentialFactor</span> = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">reconnect</span>(<span class="params">connectFn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> retries = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="variable language_">this</span>.<span class="property">retryDelay</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (retries &lt; <span class="variable language_">this</span>.<span class="property">maxRetries</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">connectFn</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        retries++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Reconnection attempt <span class="subst">$&#123;retries&#125;</span> failed`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="variable language_">this</span>.<span class="property">maxRetries</span>) &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay));</span><br><span class="line">          delay *= <span class="variable language_">this</span>.<span class="property">exponentialFactor</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-消息压缩"><a href="#3-消息压缩" class="headerlink" title="3. 消息压缩"></a>3. 消息压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessageCompression</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">compress</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 MessagePack 或其他压缩算法</span></span><br><span class="line">    <span class="keyword">return</span> msgpack.<span class="title function_">encode</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">decompress</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> msgpack.<span class="title function_">decode</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">WebSocket API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">Server-Sent Events</a></li>
<li><a href="https://socket.io/docs/v4">Socket.IO 文档</a></li>
<li><a href="https://www.ably.io/blog/websockets-vs-long-polling">HTTP 轮询最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
        <tag>即时通讯</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？</title>
    <url>/Vue/vue3-composition/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/8d6dd7b0-6048-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p><code>Composition API</code> 可以说是<code>Vue3</code>的最大特点，那么为什么要推出<code>Composition Api</code>，解决了什么问题？</p>
<p>通常使用<code>Vue2</code>开发的项目，普遍会存在以下问题：</p>
<ul>
<li>代码的可读性随着组件变大而变差</li>
<li>每一种代码复用的方式，都存在缺点</li>
<li>TypeScript支持有限</li>
</ul>
<p>以上通过使用<code>Composition Api</code>都能迎刃而解</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、Options-Api"><a href="#一、Options-Api" class="headerlink" title="一、Options Api"></a>一、Options Api</h3><p><code>Options API</code>，即大家常说的选项API，即以<code>vue</code>为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑</p>
<p>如下图：</p>
<p> <img src="https://static.vue-js.com/9bf6d9d0-6048-11eb-85f6-6fac77c0c9b3.png"></p>
<p>可以看到<code>Options</code>代码编写方式，如果是组件状态，则写在<code>data</code>属性上，如果是方法，则写在<code>methods</code>属性上…</p>
<p>用组件的选项 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组织逻辑在大多数情况下都有效</p>
<p>然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解</p>
<h3 id="二、Composition-Api"><a href="#二、Composition-Api" class="headerlink" title="二、Composition Api"></a>二、Composition Api</h3><p>在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）</p>
<p>即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API</p>
<p> <img src="https://static.vue-js.com/acee9200-6048-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h3><p>下面对<code>Composition Api </code>与<code>Options Api</code>进行两大方面的比较</p>
<ul>
<li>逻辑组织</li>
<li>逻辑复用</li>
</ul>
<h4 id="逻辑组织"><a href="#逻辑组织" class="headerlink" title="逻辑组织"></a>逻辑组织</h4><h5 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a>Options API</h5><p>假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色）</p>
<p> <img src="https://static.vue-js.com/dc83d070-6048-11eb-ab90-d9ae814b240d.png"></p>
<p>可以看到，这种碎片化使得理解和维护复杂组件变得困难</p>
<p>选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块</p>
<h5 id="Compostion-API"><a href="#Compostion-API" class="headerlink" title="Compostion API"></a>Compostion API</h5><p>而<code>Compositon API</code>正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去</p>
<p>下面举个简单例子，将处理<code>count</code>属性相关的代码放在同一个函数了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleConut</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span> = count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        double,</span><br><span class="line">        handleConut,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件上中使用<code>count</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; count, double, handleConut &#125; = <span class="title function_">useCount</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count,</span><br><span class="line">            double,</span><br><span class="line">            handleConut</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>再来一张图进行对比，可以很直观地感受到 <code>Composition API </code>在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可</p>
<p><img src="https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png"></p>
<h4 id="逻辑复用"><a href="#逻辑复用" class="headerlink" title="逻辑复用"></a>逻辑复用</h4><p>在<code>Vue2</code>中，我们是用过<code>mixin</code>去复用相同的逻辑</p>
<p>下面举个例子，我们会另起一个<code>mixin.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MoveMixin</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleKeyup</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>);</span><br><span class="line">      <span class="comment">// 上下左右 x y</span></span><br><span class="line">      <span class="keyword">switch</span> (e.<span class="property">code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">y</span>--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">y</span>++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">x</span>--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">x</span>++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleKeyup</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleKeyup</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在组件中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> mousePositionMixin <span class="keyword">from</span> <span class="string">&#x27;./mouse&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mixins</span>: [mousePositionMixin]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用单个<code>mixin</code>似乎问题不大，但是当我们一个组件混入大量不同的 <code>mixins</code> 的时候</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixins</span>: [mousePositionMixin, fooMixin, barMixin, otherMixin]</span><br></pre></td></tr></table></figure>

<p>会存在两个非常明显的问题：</p>
<ul>
<li>命名冲突</li>
<li>数据来源不清晰</li>
</ul>
<p>现在通过<code>Compositon API</code>这种方式改写上面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> position = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleKeyup</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>);</span><br><span class="line">    <span class="comment">// 上下左右 x y</span></span><br><span class="line">    <span class="keyword">switch</span> (e.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">        <span class="comment">// y.value--;</span></span><br><span class="line">        position.<span class="property">y</span>--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">        <span class="comment">// y.value++;</span></span><br><span class="line">        position.<span class="property">y</span>++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">        <span class="comment">// x.value--;</span></span><br><span class="line">        position.<span class="property">x</span>--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">        <span class="comment">// x.value++;</span></span><br><span class="line">        position.<span class="property">x</span>++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleKeyup);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleKeyup);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; position &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在组件中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useMove &#125; <span class="keyword">from</span> <span class="string">&quot;./useMove&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; position &#125; = <span class="title function_">useMove</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">toRefs</span>(position);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      x,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      y,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>在逻辑组织和逻辑复用方面，<code>Composition API</code>是优于<code>Options  API</code></li>
<li>因为<code>Composition API</code>几乎是函数，会有更好的类型推断。</li>
<li><code>Composition API </code>对 <code>tree-shaking</code> 友好，代码也更容易压缩</li>
<li><code>Composition API</code>中见不到<code>this</code>的使用，减少了<code>this</code>指向不明的情况</li>
<li>如果是小型组件，可以继续使用<code>Options API</code>，也是十分友好的</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0的设计目标是什么？做了哪些优化</title>
    <url>/Vue/vue3-goal/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/b93b49c0-5c58-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、设计目标"><a href="#一、设计目标" class="headerlink" title="一、设计目标"></a>一、设计目标</h2><p>不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下<code>Vue3</code>之前我们或许会面临的问题</p>
<ul>
<li><p>随着功能的增长，复杂组件的代码变得越来越难以维护</p>
</li>
<li><p>缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制</p>
</li>
<li><p>类型推断不够友好</p>
</li>
<li><p><code>bundle</code>的时间太久了</p>
</li>
</ul>
<p>而 <code>Vue3</code> 经过长达两三年时间的筹备，做了哪些事情？</p>
<p>我们从结果反推</p>
<ul>
<li>更小</li>
<li>更快</li>
<li>TypeScript支持</li>
<li>API设计一致性</li>
<li>提高自身可维护性</li>
<li>开放更多底层功能</li>
</ul>
<p>一句话概述，就是更小更快更友好了</p>
<h3 id="更小"><a href="#更小" class="headerlink" title="更小"></a>更小</h3><p><code>Vue3</code>移除一些不常用的 <code>API</code></p>
<p>引入<code>tree-shaking</code>，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了</p>
<h3 id="更快"><a href="#更快" class="headerlink" title="更快"></a>更快</h3><p>主要体现在编译方面：</p>
<ul>
<li>diff算法优化</li>
<li>静态提升</li>
<li>事件监听缓存</li>
<li>SSR优化</li>
</ul>
<p>下篇文章我们会进一步介绍</p>
<h3 id="更友好"><a href="#更友好" class="headerlink" title="更友好"></a>更友好</h3><p><code>vue3</code>在兼顾<code>vue2</code>的<code>options API</code>的同时还推出了<code>composition API</code>，大大增加了代码的逻辑组织和代码复用能力</p>
<p>这里代码简单演示下：</p>
<p>存在一个获取鼠标位置的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">update</span> = e=&gt;&#123;</span><br><span class="line">        state.<span class="property">x</span> = e.<span class="property">pageX</span>;</span><br><span class="line">        state.<span class="property">y</span> = e.<span class="property">pageY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toRefs</span>(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只需要调用这个函数，即可获取<code>x</code>、<code>y</code>的坐标，完全不用关注实现过程</p>
<p>试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高</p>
<p>同时，<code>VUE3</code>是基于<code>typescipt</code>编写的，可以享受到自动的类型定义提示</p>
<h2 id="三、优化方案"><a href="#三、优化方案" class="headerlink" title="三、优化方案"></a>三、优化方案</h2><p><code>vue3</code>从很多层面都做了优化，可以分成三个方面：</p>
<ul>
<li>源码</li>
<li>性能</li>
<li>语法 API</li>
</ul>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>源码可以从两个层面展开：</p>
<ul>
<li>源码管理</li>
<li>TypeScript</li>
</ul>
<h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p><code>vue3</code>整个源码是通过 <code>monorepo </code>的方式维护的，根据功能将不同的模块拆分到<code>packages </code>目录下面不同的子目录中</p>
<p> <img src="https://static.vue-js.com/d7c32520-5c58-11eb-ab90-d9ae814b240d.png"></p>
<p>这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性</p>
<p>另外一些 <code>package</code>（比如 <code>reactivity</code> 响应式库）是可以独立于 <code>Vue</code> 使用的，这样用户如果只想使用 <code>Vue3 </code>的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 <code>Vue</code></p>
<h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p><code>Vue3</code>是基于<code>typeScript</code>编写的，提供了更好的类型检查，能支持复杂的类型推导</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><code>vue3</code>是从什么哪些方面对性能进行进一步优化呢？</p>
<ul>
<li>体积优化</li>
<li>编译优化</li>
<li>数据劫持优化</li>
</ul>
<p>这里讲述数据劫持：</p>
<p>在<code>vue2</code>中，数据劫持是通过<code>Object.defineProperty </code>，这个 API 有一些缺陷，并不能检测对象属性的添加和删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// track</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// trigger</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>尽管<code> Vue</code>为了解决这个问题提供了 <code>set </code>和<code>delete </code>实例方法，但是对于用户来说，还是增加了一定的心智负担</p>
<p>同时在面对嵌套层级比较深的情况下，就存在性能问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">      <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">c</span>: &#123;</span><br><span class="line">          <span class="attr">d</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比之下，<code>vue3</code>是通过<code>proxy</code>监听整个对象，那么对于删除还是监听当然也能监听到</p>
<p>同时<code>Proxy </code> 并不能监听到内部深层次的对象变化，而 <code>Vue3</code> 的处理方式是在<code> getter</code> 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归</p>
<h3 id="语法-API"><a href="#语法-API" class="headerlink" title="语法 API"></a>语法 API</h3><p>这里当然说的就是<code>composition API</code>，其两大显著的优化：</p>
<ul>
<li>优化逻辑组织</li>
<li>优化逻辑复用</li>
</ul>
<h4 id="逻辑组织"><a href="#逻辑组织" class="headerlink" title="逻辑组织"></a>逻辑组织</h4><p>一张图，我们可以很直观地感受到 <code>Composition API </code>在逻辑组织方面的优势</p>
<p> <img src="https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png"></p>
<p>相同功能的代码编写在一块，而不像<code>options API</code>那样，各个功能的代码混成一块</p>
<h4 id="逻辑复用"><a href="#逻辑复用" class="headerlink" title="逻辑复用"></a>逻辑复用</h4><p>在<code>vue2</code>中，我们是通过<code>mixin</code>实现功能混合，如果多个<code>mixin</code>混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰</p>
<p>而通过<code>composition</code>这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可</p>
<p>同样是上文的获取鼠标位置的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs, reactive, onUnmounted, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">update</span> = e=&gt;&#123;</span><br><span class="line">        state.<span class="property">x</span> = e.<span class="property">pageX</span>;</span><br><span class="line">        state.<span class="property">y</span> = e.<span class="property">pageY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toRefs</span>(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useMousePosition <span class="keyword">from</span> <span class="string">&#x27;./mouse&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>()</span><br><span class="line">        <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，整个数据来源清晰了，即使去编写更多的<code>hook</code>函数，也不会出现命名冲突的问题</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6850418112878575629#heading-5">https://juejin.cn/post/6850418112878575629#heading-5</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0性能提升主要是通过哪几方面体现的？</title>
    <url>/Vue/vue3-performance/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/2aac1020-5ed0-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、编译阶段"><a href="#一、编译阶段" class="headerlink" title="一、编译阶段"></a>一、编译阶段</h2><p>回顾<code>Vue2</code>，我们知道每个组件实例都对应一个 <code>watcher</code> 实例，它会在组件渲染的过程中把用到的数据<code>property</code>记录为依赖，当依赖发生改变，触发<code>setter</code>，则会通知<code>watcher</code>，从而使关联的组件重新渲染</p>
<p> <img src="https://static.vue-js.com/39066120-5ed0-11eb-85f6-6fac77c0c9b3.png"></p>
<p>试想一下，一个组件结构如下图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 <code>diff</code> 和遍历其实都是不需要的，造成性能浪费</p>
<p>因此，<code>Vue3</code>在编译阶段，做了进一步优化。主要有如下：</p>
<ul>
<li>diff算法优化</li>
<li>静态提升</li>
<li>事件监听缓存</li>
<li>SSR优化</li>
</ul>
<h4 id="diff算法优化"><a href="#diff算法优化" class="headerlink" title="diff算法优化"></a>diff算法优化</h4><p><code>vue3</code>在<code>diff</code>算法中相比<code>vue2</code>增加了静态标记</p>
<p>关于这个静态标记，其作用是为了会发生变化的地方添加一个<code>flag</code>标记，下次发生变化的时候直接找该地方进行比较</p>
<p>下图这里，已经标记静态节点的<code>p</code>标签在<code>diff</code>过程中则不会比较，把性能进一步提高</p>
<p> <img src="https://static.vue-js.com/c732e150-5c58-11eb-ab90-d9ae814b240d.png"></p>
<p>关于静态类型枚举如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">PatchFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">TEXT</span> = <span class="number">1</span>,<span class="comment">// 动态的文本节点</span></span><br><span class="line">  <span class="variable constant_">CLASS</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">// 2 动态的 class</span></span><br><span class="line">  <span class="variable constant_">STYLE</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 4 动态的 style</span></span><br><span class="line">  <span class="variable constant_">PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// 8 动态属性，不包括类名和样式</span></span><br><span class="line">  <span class="variable constant_">FULL_PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// 16 动态 key，当 key 变化时需要完整的 diff 算法做比较</span></span><br><span class="line">  <span class="variable constant_">HYDRATE_EVENTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// 32 表示带有事件监听器的节点</span></span><br><span class="line">  <span class="variable constant_">STABLE_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,   <span class="comment">// 64 一个不会改变子节点顺序的 Fragment</span></span><br><span class="line">  <span class="variable constant_">KEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">// 128 带有 key 属性的 Fragment</span></span><br><span class="line">  <span class="variable constant_">UNKEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">// 256 子节点没有 key 的 Fragment</span></span><br><span class="line">  <span class="variable constant_">NEED_PATCH</span> = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,   <span class="comment">// 512</span></span><br><span class="line">  <span class="variable constant_">DYNAMIC_SLOTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,  <span class="comment">// 动态 solt</span></span><br><span class="line">  <span class="variable constant_">HOISTED</span> = -<span class="number">1</span>,  <span class="comment">// 特殊标志是负整数表示永远不会用作 diff</span></span><br><span class="line">  <span class="variable constant_">BAIL</span> = -<span class="number">2</span> <span class="comment">// 一个特殊的标志，指代差异算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="静态提升"><a href="#静态提升" class="headerlink" title="静态提升"></a>静态提升</h4><p><code>Vue3</code>中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用</p>
<p>这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;你好&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>没有做静态提升之前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(_Fragment, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;span&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;你好&quot;</span>),</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">message</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ], <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做了静态提升之后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span><span class="title function_">_createVNode</span>(<span class="string">&quot;span&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;你好&quot;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(_Fragment, <span class="literal">null</span>, [</span><br><span class="line">    _hoisted_1,</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">message</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ], <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the console for the AST</span></span><br></pre></td></tr></table></figure>

<p>静态内容<code>_hoisted_1</code>被放置在<code>render</code> 函数外，每次渲染的时候只要取 <code>_hoisted_1</code> 即可</p>
<p>同时 <code>_hoisted_1</code> 被打上了 <code>PatchFlag</code> ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff</p>
<h4 id="事件监听缓存"><a href="#事件监听缓存" class="headerlink" title="事件监听缓存"></a>事件监听缓存</h4><p>默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;button @click = &#x27;onClick&#x27;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>没开启事件监听器缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> render = <span class="comment">/*#__PURE__*/</span><span class="title function_">_withId</span>(<span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: _ctx.<span class="property">onClick</span> &#125;, <span class="string">&quot;点我&quot;</span>, <span class="number">8</span> <span class="comment">/* PROPS */</span>, [<span class="string">&quot;onClick&quot;</span>])</span><br><span class="line">                                             <span class="comment">// PROPS=1&lt;&lt;3,// 8 //动态属性，但不包含类名和样式</span></span><br><span class="line">  ]))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>开启事件侦听器缓存后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;button&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">onClick</span>: _cache[<span class="number">1</span>] || (_cache[<span class="number">1</span>] = <span class="function">(<span class="params">...args</span>) =&gt;</span> (_ctx.<span class="title function_">onClick</span>(...args)))</span><br><span class="line">    &#125;, <span class="string">&quot;点我&quot;</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述发现开启了缓存后，没有了静态标记。也就是说下次<code>diff</code>算法的时候直接使用</p>
<h4 id="SSR优化"><a href="#SSR优化" class="headerlink" title="SSR优化"></a>SSR优化</h4><p>当静态内容大到一定量级时候，会用<code>createStaticVNode</code>方法在客户端去生成一个static node，这些静态<code>node</code>，会被直接<code>innerHtml</code>，就不需要创建对象，然后根据对象渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	...  <span class="comment">// 很多个静态属性</span></span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>编译后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mergeProps <span class="keyword">as</span> _mergeProps &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ssrRenderAttrs <span class="keyword">as</span> _ssrRenderAttrs, ssrInterpolate <span class="keyword">as</span> _ssrInterpolate &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/server-renderer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ssrRender</span>(<span class="params">_ctx, _push, _parent, _attrs, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _cssVars = &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: _ctx.<span class="property">color</span> &#125;&#125;</span><br><span class="line">  <span class="title function_">_push</span>(<span class="string">`&lt;div<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    _ssrRenderAttrs(_mergeProps(_attrs, _cssVars))</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&gt;&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;...&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;&lt;div&gt;&lt;span&gt;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    _ssrInterpolate(_ctx.message)</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、源码体积"><a href="#二、源码体积" class="headerlink" title="二、源码体积"></a>二、源码体积</h2><p>相比<code>Vue2</code>，<code>Vue3</code>整体体积变小了，除了移出一些不常用的API，再重要的是<code>Tree shanking</code></p>
<p>任何一个函数，如<code>ref</code>、<code>reavtived</code>、<code>computed</code>等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> readOnlyAge = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> age.<span class="property">value</span>++) <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            age,</span><br><span class="line">            state,</span><br><span class="line">            readOnlyAge</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="三、响应式系统"><a href="#三、响应式系统" class="headerlink" title="三、响应式系统"></a>三、响应式系统</h2><p><code>vue2</code>中采用 <code>defineProperty</code>来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加<code>getter</code>和<code>setter</code>，实现响应式</p>
<p><code>vue3</code>采用<code>proxy</code>重写了响应式系统，因为<code>proxy</code>可以对整个对象进行监听，所以不需要深度遍历</p>
<ul>
<li>可以监听动态属性的添加</li>
<li>可以监听到数组的索引和数组<code>length</code>属性</li>
<li>可以监听删除属性</li>
</ul>
<p>关于这两个 API 具体的不同，我们下篇文章会进行一个更加详细的介绍</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6903171037211557895">https://juejin.cn/post/6903171037211557895</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？</title>
    <url>/Vue/vue3-proxy/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/57aa5c80-5f7f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h2><p>定义：<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p>
<h5 id="为什么能实现响应式"><a href="#为什么能实现响应式" class="headerlink" title="为什么能实现响应式"></a>为什么能实现响应式</h5><p>通过<code>defineProperty</code> 两个属性，<code>get</code>及<code>set</code></p>
<ul>
<li>get</li>
</ul>
<p>属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值</p>
<ul>
<li>set</li>
</ul>
<p>属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined</p>
<p>下面通过代码展示：</p>
<p>定义一个响应式函数<code>defineReactive</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    app.<span class="property">innerText</span> = obj.<span class="property">foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                val = newVal</span><br><span class="line">                <span class="title function_">update</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用<code>defineReactive</code>，数据发生变化触发<code>update</code>方法，实现数据响应式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title function_">defineReactive</span>(obj, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    obj.<span class="property">foo</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>在对象存在多个<code>key</code>情况下，需要进行遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果存在嵌套对象的情况，还需要在<code>defineReactive</code>中进行递归</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title function_">observe</span>(val)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                val = newVal</span><br><span class="line">                <span class="title function_">update</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当给<code>key</code>赋值为对象的时候，还需要在<code>set</code>属性中进行递归</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="title function_">observe</span>(newVal) <span class="comment">// 新值是对象的情况</span></span><br><span class="line">        <span class="title function_">notifyUpdate</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题</p>
<p>现在对一个对象进行删除与添加属性操作，无法劫持到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">observe</span>(obj)</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">foo</span> <span class="comment">// no ok</span></span><br><span class="line">obj.<span class="property">jar</span> = <span class="string">&#x27;xxx&#x27;</span> <span class="comment">// no ok</span></span><br></pre></td></tr></table></figure>

<p>当我们对一个数组进行监听的时候，并不那么好使了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrData = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arrData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">defineProperty</span>(arrData,index,val)</span><br><span class="line">&#125;)</span><br><span class="line">arrData.<span class="title function_">push</span>() <span class="comment">// no ok</span></span><br><span class="line">arrData.<span class="title function_">pop</span>()  <span class="comment">// no ok</span></span><br><span class="line">arrDate[<span class="number">0</span>] = <span class="number">99</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<p>可以看到数据的<code>api</code>无法劫持到，从而无法实现数据响应式，</p>
<p>所以在<code>Vue2</code>中，增加了<code>set</code>、<code>delete</code> API，并且对数组<code>api</code>方法进行一个重写</p>
<p>还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>检测不到对象属性的添加和删除</li>
<li>数组<code>API</code>方法无法监听到</li>
<li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li>
</ul>
<h2 id="二、proxy"><a href="#二、proxy" class="headerlink" title="二、proxy"></a>二、proxy</h2><p><code>Proxy</code>的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了</p>
<p>在<code>ES6</code>系列中，我们详细讲解过<code>Proxy</code>的使用，就不再述说了</p>
<p>下面通过代码进行展示：</p>
<p>定义一个响应式方法<code>reactive</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下简单数据的操作，发现都能劫持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1.获取</span></span><br><span class="line">state.<span class="property">foo</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 2.设置已存在属性</span></span><br><span class="line">state.<span class="property">foo</span> = <span class="string">&#x27;fooooooo&#x27;</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 3.设置不存在属性</span></span><br><span class="line">state.<span class="property">dong</span> = <span class="string">&#x27;dong&#x27;</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 4.删除属性</span></span><br><span class="line"><span class="keyword">delete</span> state.<span class="property">dong</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<p>再测试嵌套对象情况，这时候发现就不那么 OK 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">bar</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置嵌套对象属性</span></span><br><span class="line">state.<span class="property">bar</span>.<span class="property">a</span> = <span class="number">10</span> <span class="comment">// no ok</span></span><br></pre></td></tr></table></figure>

<p>如果要解决，需要在<code>get</code>之上再进行一层代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">isObject</span>(res) ? <span class="title function_">reactive</span>(res) : res</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>Object.defineProperty</code>只能遍历对象属性进行劫持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Proxy</code>直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Proxy</code>可以直接监听数组的变化（<code>push</code>、<code>shift</code>、<code>splice</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> proxtObj = <span class="title function_">reactive</span>(obj)</span><br><span class="line">obj.<span class="title function_">psuh</span>(<span class="number">4</span>) <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>

<p><code>Proxy</code>有多达13种拦截方法,不限于<code>apply</code>、<code>ownKeys</code>、<code>deleteProperty</code>、<code>has</code>等等，这是<code>Object.defineProperty</code>不具备的</p>
<p>正因为<code>defineProperty</code>自身的缺陷，导致<code>Vue2</code>在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外<code>set</code>、<code>delete</code>方法）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组重写</span></span><br><span class="line"><span class="keyword">const</span> originalProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Object</span>.<span class="title function_">create</span>(originalProto)</span><br><span class="line">[<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  arrayProto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    originalProto[method].<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">arguments</span>)</span><br><span class="line">    dep.<span class="title function_">notice</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set、delete</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(obj,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;newbar&#x27;</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">delete</span>(obj),<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>Proxy</code> 不兼容IE，也没有 <code>polyfill</code>, <code>defineProperty</code> 能支持到IE9</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？</title>
    <url>/Vue/vue3-modal-component/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/e294c660-6370-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、组件设计"><a href="#一、组件设计" class="headerlink" title="一、组件设计"></a>一、组件设计</h2><p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式</p>
<p>现在有一个场景，点击新增与编辑都弹框出来进行填写，功能上大同小异，可能只是标题内容或者是显示的主体内容稍微不同</p>
<p>这时候就没必要写两个组件，只需要根据传入的参数不同，组件显示不同内容即可</p>
<p>这样，下次开发相同界面程序时就可以写更少的代码，意义着更高的开发效率，更少的 <code>Bug </code>和更少的程序体积</p>
<h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><p>实现一个<code>Modal</code>组件，首先确定需要完成的内容：</p>
<ul>
<li><p>遮罩层</p>
</li>
<li><p>标题内容</p>
</li>
<li><p>主体内容</p>
</li>
<li><p>确定和取消按钮</p>
</li>
</ul>
<p>主体内容需要灵活，所以可以是字符串，也可以是一段 <code>html</code> 代码</p>
<p>特点是它们在当前<code>vue</code>实例之外独立存在，通常挂载于<code>body</code>之上</p>
<p>除了通过引入<code>import</code>的形式，我们还可通过<code>API</code>的形式进行组件的调用</p>
<p>还可以包括配置全局样式、国际化、与<code>typeScript</code>结合</p>
<h2 id="三、实现流程"><a href="#三、实现流程" class="headerlink" title="三、实现流程"></a>三、实现流程</h2><p>首先看看大致流程：</p>
<ul>
<li><p>目录结构</p>
</li>
<li><p>组件内容</p>
</li>
<li><p>实现 API 形式</p>
</li>
<li><p>事件处理</p>
</li>
<li><p>其他完善</p>
</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><code>Modal</code>组件相关的目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── plugins</span><br><span class="line">│   └── modal</span><br><span class="line">│       ├── Content.tsx // 维护 Modal 的内容，用于 h 函数和 jsx 语法</span><br><span class="line">│       ├── Modal.vue // 基础组件</span><br><span class="line">│       ├── config.ts // 全局默认配置</span><br><span class="line">│       ├── index.ts // 入口</span><br><span class="line">│       ├── locale // 国际化相关</span><br><span class="line">│       │   ├── index.ts</span><br><span class="line">│       │   └── lang</span><br><span class="line">│       │       ├── en-US.ts</span><br><span class="line">│       │       ├── zh-CN.ts</span><br><span class="line">│       │       └── zh-TW.ts</span><br><span class="line">│       └── modal.type.ts // ts类型声明相关</span><br></pre></td></tr></table></figure>

<p>因为 Modal 会被 <code>app.use(Modal)</code> 调用作为一个插件，所以都放在<code>plugins</code>目录下</p>
<h3 id="组件内容"><a href="#组件内容" class="headerlink" title="组件内容"></a>组件内容</h3><p>首先实现<code>modal.vue</code>的主体显示内容大致如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isTeleport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;modelValue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:style</span>=<span class="string">&quot;style&quot;</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">&quot;maskClose &amp;&amp; !loading &amp;&amp; handleCancel()&quot;</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__title line line--b&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title || t(&quot;r.title&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">v-if</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">:title</span>=<span class="string">&quot;t(&#x27;r.close&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">class</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">                      @<span class="attr">click</span>=<span class="string">&quot;!loading &amp;&amp; handleCancel()&quot;</span></span></span><br><span class="line"><span class="tag">                      &gt;</span>✕&lt;/span</span><br><span class="line">                    &gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Content</span> <span class="attr">v-if</span>=<span class="string">&quot;typeof content === &#x27;function&#x27;&quot;</span> <span class="attr">:render</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                    &#123;&#123; content &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__btns line line--t&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;loading&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleConfirm&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span> ❍ <span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; t(&quot;r.confirm&quot;) &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;!loading &amp;&amp; handleCancel()&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123; t(&quot;r.cancel&quot;) &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最外层上通过Vue3 <code>Teleport</code> 内置组件进行包裹，其相当于传送门，将里面的内容传送至<code>body</code>之上</p>
<p>并且从<code>DOM</code>结构上来看，把<code>modal</code>该有的内容（遮罩层、标题、内容、底部按钮）都实现了</p>
<p>关于主体内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span> <span class="attr">v-if</span>=<span class="string">&quot;typeof content===&#x27;function&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:render</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        &#123;&#123;content&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到根据传入<code>content</code>的类型不同，对应显示不同得到内容</p>
<p>最常见的则是通过调用字符串和默认插槽的形式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 默认插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;show&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;演示 slot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;show&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;演示 content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">content</span>=<span class="string">&quot;hello world~&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 API 形式调用<code>Modal</code>组件的时候，<code>content</code>可以使用下面两种</p>
<ul>
<li>h 函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$modal.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;演示 h 函数&#x27;</span>,</span><br><span class="line">  <span class="title function_">content</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;color:red;&#x27;</span>,</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function">(<span class="params">$event: Event</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>, $event.<span class="property">target</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;hello world ~&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>JSX</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$modal.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;演示 jsx 语法&#x27;</span>,</span><br><span class="line">  <span class="title function_">content</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;($event:</span> <span class="attr">Event</span>) =&gt;</span> console.log(&#x27;clicked&#x27;, $event.target)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        hello world ~</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h3 id="实现-API-形式"><a href="#实现-API-形式" class="headerlink" title="实现 API 形式"></a>实现 API 形式</h3><p>那么组件如何实现<code>API</code>形式调用<code>Modal</code>组件呢？</p>
<p>在<code>Vue2</code>中，我们可以借助<code>Vue</code>实例以及<code>Vue.extend</code>的方式获得组件实例，然后挂载到<code>body</code>上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;./Modal.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ComponentClass</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Modal</span>);</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">ComponentClass</span>(&#123; <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>) &#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instance.<span class="property">$el</span>);</span><br></pre></td></tr></table></figure>

<p>虽然<code>Vue3</code>移除了<code>Vue.extend</code>方法，但可以通过<code>createVNode</code>实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;./Modal.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(<span class="title class_">Modal</span>);</span><br><span class="line"><span class="title function_">render</span>(vnode, container);</span><br><span class="line"><span class="keyword">const</span> instance = vnode.<span class="property">component</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container);</span><br></pre></td></tr></table></figure>

<p>在<code>Vue2</code>中，可以通过<code>this</code>的形式调用全局 API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">vue</span>) &#123;</span><br><span class="line">       vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$create</span> = create</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在 Vue3 的 <code>setup</code> 中已经没有 <code>this </code>概念了，需要调用<code>app.config.globalProperties</code>挂载到全局</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$create</span> = create</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>下面再看看看<code>Modal</code>组件内部是如何处理「确定」「取消」事件的，既然是<code>Vue3</code>，当然采用<code>Compositon API</code> 形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Modal.vue</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 获得当前组件实例</span></span><br><span class="line">  <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    instance.<span class="property">_hub</span> = &#123;</span><br><span class="line">      <span class="string">&#x27;on-cancel&#x27;</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">      <span class="string">&#x27;on-confirm&#x27;</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleConfirm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;on-confirm&#x27;</span>);</span><br><span class="line">    instance.<span class="property">_hub</span>[<span class="string">&#x27;on-confirm&#x27;</span>]();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;on-cancel&#x27;</span>);</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">    instance.<span class="property">_hub</span>[<span class="string">&#x27;on-cancel&#x27;</span>]();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    handleConfirm,</span><br><span class="line">    handleCancel</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面代码中，可以看得到除了使用传统<code>emit</code>的形式使父组件监听，还可通过<code>_hub</code>属性中添加 <code>on-cancel</code>，<code>on-confirm</code>方法实现在<code>API</code>中进行监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$modal</span> = &#123;</span><br><span class="line">   <span class="title function_">show</span>(<span class="params">&#123;&#125;</span>) &#123;</span><br><span class="line">     <span class="comment">/* 监听 确定、取消 事件 */</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>下面再来目睹下<code>_hub</code>是如何实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$modal</span> = &#123;</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        /* 其他选项 */</span></span><br><span class="line"><span class="params">        onConfirm,</span></span><br><span class="line"><span class="params">        onCancel</span></span><br><span class="line"><span class="params">    &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; props, _hub &#125; = instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">_closeModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            props.<span class="property">modelValue</span> = <span class="literal">false</span>;</span><br><span class="line">            container.<span class="property">parentNode</span>!.<span class="title function_">removeChild</span>(container);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 往 _hub 新增事件的具体实现</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(_hub, &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="string">&#x27;on-confirm&#x27;</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (onConfirm) &#123;</span><br><span class="line">                <span class="keyword">const</span> fn = <span class="title function_">onConfirm</span>();</span><br><span class="line">                <span class="comment">// 当方法返回为 Promise</span></span><br><span class="line">                <span class="keyword">if</span> (fn &amp;&amp; fn.<span class="property">then</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">await</span> fn;</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">                        <span class="title function_">_closeModal</span>();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        <span class="comment">// 发生错误时，不关闭弹框</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">_closeModal</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">_closeModal</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="string">&#x27;on-cancel&#x27;</span>() &#123;</span><br><span class="line">                onCancel &amp;&amp; <span class="title function_">onCancel</span>();</span><br><span class="line">                <span class="title function_">_closeModal</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="其他完善"><a href="#其他完善" class="headerlink" title="其他完善"></a>其他完善</h3><p>关于组件实现国际化、与<code>typsScript</code>结合，大家可以根据自身情况在此基础上进行更改</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000038928664">https://segmentfault.com/a/1190000038928664</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>说说Vue 3.0中Treeshaking特性？举例说明一下？</title>
    <url>/Vue/vue3-treeshaking/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/5e8bf1d0-6097-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>Tree shaking</code> 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 <code>Dead code elimination</code></p>
<p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p>
<p>如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去</p>
<p>而<code>treeshaking</code>则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕</p>
<p>也就是说 ，<code>tree shaking</code> 其实是找出使用的代码</p>
<p>在<code>Vue2</code>中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是<code>Vue</code>实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>而<code>Vue3</code>源码引入<code>tree shaking</code>特性，将全局 API 进行分块。如果您不使用其某些功能，它们将不会包含在您的基础包中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nextTick, observable &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="二、如何做"><a href="#二、如何做" class="headerlink" title="二、如何做"></a>二、如何做</h2><p><code>Tree shaking</code>是基于<code>ES6</code>模板语法（<code>import</code>与<code>exports</code>），主要是借助<code>ES6</code>模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量</p>
<p><code>Tree shaking</code>无非就是做了两件事：</p>
<ul>
<li>编译阶段利用<code>ES6 Module</code>判断哪些模块已经加载</li>
<li>判断那些模块和变量未被使用或者引用，进而删除对应代码</li>
</ul>
<p>下面就来举个例子：</p>
<p>通过脚手架<code>vue-cli</code>安装<code>Vue2</code>与<code>Vue3</code>项目</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vue create vue-demo</span><br></pre></td></tr></table></figure>

<h3 id="Vue2-项目"><a href="#Vue2-项目" class="headerlink" title="Vue2 项目"></a>Vue2 项目</h3><p>组件中使用<code>data</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data: () =&gt; (&#123;</span><br><span class="line">            count: 1,</span><br><span class="line">        &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>对项目进行打包，体积如下图</p>
<p><img src="https://static.vue-js.com/6bd2aff0-6097-11eb-85f6-6fac77c0c9b3.png"></p>
<p>为组件设置其他属性（<code>compted</code>、<code>watch</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">question</span>:<span class="string">&quot;&quot;</span>, </span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="attr">double</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">question</span>: <span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">answer</span> = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再一次打包，发现打包出来的体积并没有变化</p>
<p><img src="https://static.vue-js.com/7c29e260-6097-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="Vue3-项目"><a href="#Vue3-项目" class="headerlink" title="Vue3 项目"></a>Vue3 项目</h3><p>组件中简单使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将项目进行打包</p>
<p><img src="https://static.vue-js.com/95df0000-6097-11eb-85f6-6fac77c0c9b3.png"></p>
<p>在组件中引入<code>computed</code>和<code>watch</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, defineComponent, computed, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> state.<span class="property">count</span>,</span><br><span class="line">      <span class="function">(<span class="params">count, preCount</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(preCount);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      double,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>再次对项目进行打包，可以看到在引入<code>computer</code>和<code>watch</code>之后，项目整体体积变大了</p>
<p> <img src="https://static.vue-js.com/b36a7a00-6097-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="三、作用"><a href="#三、作用" class="headerlink" title="三、作用"></a>三、作用</h2><p>通过<code>Tree shaking</code>，<code>Vue3</code>给我们带来的好处是：</p>
<ul>
<li>减少程序体积（更小）</li>
<li>减少程序执行时间（更快）</li>
<li>便于将来对程序架构进行优化（更友好）</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000038962700">https://segmentfault.com/a/1190000038962700</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：vue3有了解过吗？能说说跟vue2的区别吗？</title>
    <url>/Vue/vue3-vue3-vue2/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/774b6950-5087-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、Vue3介绍"><a href="#一、Vue3介绍" class="headerlink" title="一、Vue3介绍"></a>一、Vue3介绍</h2><p>关于<code>vue3</code>的重构背景，尤大是这样说的：</p>
<p>「Vue 新版本的理念成型于 2018 年末，当时 Vue 2 的代码库已经有两岁半了。比起通用软件的生命周期来这好像也没那么久，但在这段时期，前端世界已经今昔非比了</p>
<p>在我们更新（和重写）Vue 的主要版本时，主要考虑两点因素：首先是新的 JavaScript 语言特性在主流浏览器中的受支持水平；其次是当前代码库中随时间推移而逐渐暴露出来的一些设计和架构问题」</p>
<p>简要就是：</p>
<ul>
<li>利用新的语言特性(es6)</li>
<li>解决架构问题</li>
</ul>
<h2 id="哪些变化"><a href="#哪些变化" class="headerlink" title="哪些变化"></a>哪些变化</h2><p> <img src="https://static.vue-js.com/9169a900-5087-11eb-85f6-6fac77c0c9b3.png"></p>
<p>从上图中，我们可以概览<code>Vue3</code>的新特性，如下：</p>
<ul>
<li>速度更快</li>
<li>体积减少</li>
<li>更易维护</li>
<li>更接近原生</li>
<li>更易使用</li>
</ul>
<h3 id="速度更快"><a href="#速度更快" class="headerlink" title="速度更快"></a>速度更快</h3><p><code>vue3</code>相比<code>vue2</code></p>
<ul>
<li><p>重写了虚拟<code>Dom</code>实现</p>
</li>
<li><p>编译模板的优化</p>
</li>
<li><p>更高效的组件初始化</p>
</li>
<li><p><code>undate</code>性能提高1.3~2倍</p>
</li>
<li><p><code>SSR</code>速度提高了2~3倍</p>
</li>
</ul>
<p> <img src="https://static.vue-js.com/ac1d23d0-5087-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="体积更小"><a href="#体积更小" class="headerlink" title="体积更小"></a>体积更小</h3><p>通过<code>webpack</code>的<code>tree-shaking</code>功能，可以将无用模块“剪辑”，仅打包需要的</p>
<p>能够<code>tree-shaking</code>，有两大好处：</p>
<ul>
<li><p>对开发人员，能够对<code>vue</code>实现更多其他的功能，而不必担忧整体体积过大</p>
</li>
<li><p>对使用者，打包出来的包体积变小了</p>
</li>
</ul>
<p><code>vue</code>可以开发出更多其他的功能，而不必担忧<code>vue</code>打包出来的整体体积过多</p>
<p> <img src="https://static.vue-js.com/c01af010-5087-11eb-85f6-6fac77c0c9b3.png"> </p>
<h3 id="更易维护"><a href="#更易维护" class="headerlink" title="更易维护"></a>更易维护</h3><h4 id="compositon-Api"><a href="#compositon-Api" class="headerlink" title="compositon Api"></a>compositon Api</h4><ul>
<li>可与现有的<code>Options API</code>一起使用</li>
<li>灵活的逻辑组合与复用</li>
<li><code>Vue3</code>模块可以和其他框架搭配使用</li>
</ul>
<p><img src="https://static.vue-js.com/c5c919b0-5087-11eb-ab90-d9ae814b240d.png"> </p>
<h4 id="更好的Typescript支持"><a href="#更好的Typescript支持" class="headerlink" title="更好的Typescript支持"></a>更好的Typescript支持</h4><p><code>VUE3</code>是基于<code>typescipt</code>编写的，可以享受到自动的类型定义提示</p>
<p><img src="https://static.vue-js.com/cc688120-5087-11eb-ab90-d9ae814b240d.png"></p>
<h4 id="编译器重写"><a href="#编译器重写" class="headerlink" title="编译器重写"></a>编译器重写</h4><p><img src="https://static.vue-js.com/fcd33800-5087-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="更接近原生"><a href="#更接近原生" class="headerlink" title="更接近原生"></a>更接近原生</h3><p>可以自定义渲染 API</p>
<p><img src="https://static.vue-js.com/0c7d88a0-5088-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="更易使用"><a href="#更易使用" class="headerlink" title="更易使用"></a>更易使用</h3><p>响应式 <code>Api</code> 暴露出来</p>
<p><img src="https://static.vue-js.com/26070260-5088-11eb-ab90-d9ae814b240d.png"></p>
<p>轻松识别组件重新渲染原因</p>
<p><img src="https://static.vue-js.com/43b2fcb0-5088-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="二、Vue3新增特性"><a href="#二、Vue3新增特性" class="headerlink" title="二、Vue3新增特性"></a>二、Vue3新增特性</h2><p>Vue 3 中需要关注的一些新功能包括：</p>
<ul>
<li>framents</li>
<li>Teleport</li>
<li>composition Api</li>
<li>createRenderer</li>
</ul>
<h3 id="framents"><a href="#framents" class="headerlink" title="framents"></a>framents</h3><p>在 <code>Vue3.x</code> 中，组件现在支持有多个根节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Layout</span>.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p><code>Teleport</code> 是一种能够将我们的模板移动到 <code>DOM</code> 中 <code>Vue app</code> 之外的其他位置的技术，就有点像哆啦A梦的“任意门”</p>
<p>在<code>vue2</code>中，像 <code>modals</code>,<code>toast</code> 等这样的元素，如果我们嵌套在 <code>Vue</code> 的某个组件内部，那么处理嵌套组件的定位、<code>z-index</code> 和样式就会变得很困难</p>
<p>通过<code>Teleport</code>，我们可以在组件的逻辑位置写模板代码，然后在 <code>Vue</code> 应用范围之外渲染它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showToast&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开 toast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 属性就是目标位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#teleport-target&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toast-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-msg&quot;</span>&gt;</span>我是一个 Toast 文案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="createRenderer"><a href="#createRenderer" class="headerlink" title="createRenderer"></a>createRenderer</h3><p>通过<code>createRenderer</code>，我们能够构建自定义渲染器，我们能够将 <code>vue</code> 的开发模型扩展到其他平台</p>
<p>我们可以将其生成在<code>canvas</code>画布上</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da4437845ec54eb3829313c92fc81afe~tplv-k3u1fbpfcp-watermark.image"></p>
<p>关于<code>createRenderer</code>，我们了解下基本使用，就不展开讲述了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRenderer &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; render, createApp &#125; = <span class="title function_">createRenderer</span>(&#123;</span><br><span class="line">  patchProp,</span><br><span class="line">  insert,</span><br><span class="line">  remove,</span><br><span class="line">  createElement,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; render, createApp &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="composition-Api"><a href="#composition-Api" class="headerlink" title="composition Api"></a>composition Api</h3><p>composition Api，也就是组合式<code>api</code>，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理</p>
<p> <img src="https://static.vue-js.com/5e0bfb70-5088-11eb-ab90-d9ae814b240d.png"></p>
<p>关于<code>compositon api</code>的使用，这里以下图展开</p>
<p><img src="https://static.vue-js.com/6f67a590-5088-11eb-85f6-6fac77c0c9b3.png"></p>
<p>简单使用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">            count.<span class="property">value</span>++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;component mounted!&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count,</span><br><span class="line">            double,</span><br><span class="line">            increment</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、非兼容变更"><a href="#三、非兼容变更" class="headerlink" title="三、非兼容变更"></a>三、非兼容变更</h3><h3 id="Global-API"><a href="#Global-API" class="headerlink" title="Global API"></a>Global API</h3><ul>
<li>全局 <code>Vue API</code> 已更改为使用应用程序实例</li>
<li>全局和内部 <code>API</code> 已经被重构为可 <code>tree-shakable</code></li>
</ul>
<h3 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h3><ul>
<li>组件上 <code>v-model</code> 用法已更改</li>
<li><code>&lt;template v-for&gt;</code>和 非 <code>v-for</code>节点上<code>key</code>用法已更改</li>
<li>在同一元素上使用的 <code>v-if</code> 和 <code>v-for</code> 优先级已更改</li>
<li><code>v-bind=&quot;object&quot;</code> 现在排序敏感</li>
<li><code>v-for</code> 中的 <code>ref</code> 不再注册 <code>ref</code> 数组</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li>只能使用普通函数创建功能组件</li>
<li><code>functional</code> 属性在单文件组件 <code>(SFC) </code></li>
<li>异步组件现在需要 <code>defineAsyncComponent</code> 方法来创建</li>
</ul>
<h3 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h3><ul>
<li>渲染函数<code>API</code>改变</li>
<li><code>$scopedSlots</code> property 已删除，所有插槽都通过 <code>$slots</code> 作为函数暴露</li>
<li>自定义指令 API 已更改为与组件生命周期一致</li>
<li>一些转换 <code>class</code> 被重命名了：<ul>
<li><code>v-enter</code> -&gt; <code>v-enter-from</code></li>
<li><code>v-leave</code> -&gt; <code>v-leave-from</code></li>
</ul>
</li>
<li>组件 <code>watch</code> 选项和实例方法 <code>$watch</code>不再支持点分隔字符串路径，请改用计算函数作为参数</li>
<li>在 <code>Vue 2.x</code> 中，应用根容器的 <code>outerHTML</code> 将替换为根组件模板 (如果根组件没有模板&#x2F;渲染选项，则最终编译为模板)。<code>VUE3.x</code> 现在使用应用程序容器的 <code>innerHTML</code>。</li>
</ul>
<h3 id="其他小改变"><a href="#其他小改变" class="headerlink" title="其他小改变"></a>其他小改变</h3><ul>
<li><code>destroyed</code> 生命周期选项被重命名为 <code>unmounted</code></li>
<li><code>beforeDestroy</code> 生命周期选项被重命名为 <code>beforeUnmount</code></li>
<li><code>[prop default</code>工厂函数不再有权访问 <code>this</code> 是上下文</li>
<li>自定义指令 API 已更改为与组件生命周期一致</li>
<li><code>data</code> 应始终声明为函数</li>
<li>来自 <code>mixin</code> 的 <code>data</code> 选项现在可简单地合并</li>
<li><code>attribute</code> 强制策略已更改</li>
<li>一些过渡 <code>class</code> 被重命名</li>
<li>组建 watch 选项和实例方法 <code>$watch</code>不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。</li>
<li><code>&lt;template&gt;</code> 没有特殊指令的标记 (<code>v-if/else-if/else</code>、<code>v-for</code> 或 <code>v-slot</code>) 现在被视为普通元素，并将生成原生的 <code>&lt;template&gt;</code> 元素，而不是渲染其内部内容。</li>
<li>在<code> Vue 2.x</code> 中，应用根容器的 <code>outerHTML</code> 将替换为根组件模板 (如果根组件没有模板&#x2F;渲染选项，则最终编译为模板)。<code>Vue 3.x</code> 现在使用应用容器的 <code>innerHTML</code>，这意味着容器本身不再被视为模板的一部分。</li>
</ul>
<h3 id="移除-API"><a href="#移除-API" class="headerlink" title="移除 API"></a>移除 API</h3><ul>
<li><code>keyCode</code> 支持作为 <code>v-on</code> 的修饰符</li>
<li><code>$on</code>，<code>$off </code>和<code> $once</code> 实例方法</li>
<li>过滤<code>filter</code></li>
<li>内联模板 <code>attribute</code></li>
<li><code>$destroy</code> 实例方法。用户不应再手动管理单个<code> Vue</code> 组件的生命周期。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://vue3js.cn/docs/zh/guide/migration/introduction.html#%E6%A8%A1%E6%9D%BF%E6%8C%87%E4%BB%A4">https://vue3js.cn/docs/zh/guide/migration/introduction.html#%E6%A8%A1%E6%9D%BF%E6%8C%87%E4%BB%A4</a></li>
<li><a href="https://composition-api.vuejs.org/zh/#api-%E4%BB%8B%E7%BB%8D">https://composition-api.vuejs.org/zh/#api-%E4%BB%8B%E7%BB%8D</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的构建流程</title>
    <url>/webpack/webpack-build-process/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/96cf6840-a658-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、运行流程"><a href="#一、运行流程" class="headerlink" title="一、运行流程"></a>一、运行流程</h2><p><code>webpack</code> 的运行流程是一个串行的过程，它的工作流程就是将各个插件串联起来</p>
<p>在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条<code>webpack</code>机制中，去改变<code>webpack</code>的运作，使得整个系统扩展性良好</p>
<p>从启动到结束会依次执行以下三大步骤：</p>
<ul>
<li>初始化流程：从配置文件和 <code>Shell</code> 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数</li>
<li>编译构建流程：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li>
<li>输出流程：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统</li>
</ul>
<p> <img src="https://static.vue-js.com/b566d400-a658-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p>从配置文件和 <code>Shell</code> 语句中读取与合并参数，得出最终的参数</p>
<p>配置文件默认下为<code>webpack.config.js</code>，也或者通过命令的形式指定配置文件，主要作用是用于激活<code>webpack</code>的加载项和插件</p>
<p>关于文件配置内容分析，如下注释：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;node_modules&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> pathToReact = path.<span class="title function_">resolve</span>(node_modules, <span class="string">&#x27;react/dist/react.min.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口文件，是模块构建的起点，同时每一个入口文件对应最后生成的一个 chunk。</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./path/to/my/entry/file.js&#x27;</span>，</span><br><span class="line">  <span class="comment">// 文件路径指向(可加快打包过程)。</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;react&#x27;</span>: pathToReact</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 生成文件，是模块构建的终点，包括输出文件与输出路径。</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 这里配置了处理各模块的 loader ，包括 css 预处理 loader ，es6 编译 loader，图片处理 loader。</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">loaders</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>, <span class="string">&#x27;react&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">noParse</span>: [pathToReact]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// webpack 各插件对象，在 webpack 的事件流中执行对应的方法。</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>webpack</code> 将 <code>webpack.config.js</code> 中的各个配置项拷贝到 <code>options</code> 对象中，并加载用户配置的 <code> plugins</code></p>
<p>完成上述步骤之后，则开始初始化<code>Compiler</code>编译对象，该对象掌控者<code>webpack</code>声明周期，不执行具体的任务，只是进行一些调度工作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Tapable</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">            <span class="attr">beforeCompile</span>: <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&quot;params&quot;</span>]),</span><br><span class="line">            <span class="attr">compile</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&quot;params&quot;</span>]),</span><br><span class="line">            <span class="attr">afterCompile</span>: <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&quot;compilation&quot;</span>]),</span><br><span class="line">            <span class="attr">make</span>: <span class="keyword">new</span> <span class="title class_">AsyncParallelHook</span>([<span class="string">&quot;compilation&quot;</span>]),</span><br><span class="line">            <span class="attr">entryOption</span>: <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&quot;context&quot;</span>, <span class="string">&quot;entry&quot;</span>])</span><br><span class="line">            <span class="comment">// 定义了很多不同类型的钩子</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">webpack</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> compiler = <span class="keyword">new</span> <span class="title class_">Compiler</span>();</span><br><span class="line">  ...<span class="comment">// 检查options,若watch字段为true,则开启watch线程</span></span><br><span class="line">  <span class="keyword">return</span> compiler;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>Compiler</code> 对象继承自 <code>Tapable</code>，初始化时定义了很多钩子函数</p>
<h3 id="编译构建流程"><a href="#编译构建流程" class="headerlink" title="编译构建流程"></a>编译构建流程</h3><p>根据配置中的 <code>entry</code> 找出所有的入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/file.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化完成后会调用<code>Compiler</code>的<code>run</code>来真正启动<code>webpack</code>编译构建流程，主要流程如下：</p>
<ul>
<li><code>compile</code> 开始编译</li>
<li><code>make</code> 从入口点分析模块及其依赖的模块，创建这些模块对象</li>
<li><code>build-module</code> 构建模块</li>
<li><code>seal</code> 封装构建结果</li>
<li><code>emit</code> 把各个chunk输出到结果文件</li>
</ul>
<h4 id="compile-编译"><a href="#compile-编译" class="headerlink" title="compile 编译"></a>compile 编译</h4><p>执行了<code>run</code>方法后，首先会触发<code>compile</code>，主要是构建一个<code>Compilation</code>对象</p>
<p>该对象是编译阶段的主要执行者，主要会依次下述流程：执行模块创建、依赖收集、分块、打包等主要任务的对象</p>
<h4 id="make-编译模块"><a href="#make-编译模块" class="headerlink" title="make 编译模块"></a>make 编译模块</h4><p>当完成了上述的<code>compilation</code>对象后，就开始从<code>Entry</code>入口文件开始读取，主要执行<code>_addModuleChain()</code>函数，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_addModuleChain</span>(<span class="params">context, dependency, onModule, callback</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 根据依赖查找对应的工厂函数</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title class_">Dep</span> = <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">DepConstructor</span>&#125; */</span> (dependency.<span class="property">constructor</span>);</span><br><span class="line">   <span class="keyword">const</span> moduleFactory = <span class="variable language_">this</span>.<span class="property">dependencyFactories</span>.<span class="title function_">get</span>(<span class="title class_">Dep</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 调用工厂函数NormalModuleFactory的create来生成一个空的NormalModule对象</span></span><br><span class="line">   moduleFactory.<span class="title function_">create</span>(&#123;</span><br><span class="line">       <span class="attr">dependencies</span>: [dependency]</span><br><span class="line">       ...</span><br><span class="line">   &#125;, <span class="function">(<span class="params">err, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">const</span> <span class="title function_">afterBuild</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">processModuleDependencies</span>(<span class="variable language_">module</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err);</span><br><span class="line">         <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="variable language_">module</span>);</span><br><span class="line">           &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">       </span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">buildModule</span>(<span class="variable language_">module</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">           ...</span><br><span class="line">           <span class="title function_">afterBuild</span>();</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<p><code>_addModuleChain</code>中接收参数<code>dependency</code>传入的入口依赖，使用对应的工厂函数<code>NormalModuleFactory.create</code>方法生成一个空的<code>module</code>对象</p>
<p>回调中会把此<code>module</code>存入<code>compilation.modules</code>对象和<code>dependencies.module</code>对象中，由于是入口文件，也会存入<code>compilation.entries</code>中</p>
<p>随后执行<code>buildModule</code>进入真正的构建模块<code>module</code>内容的过程</p>
<h4 id="build-module-完成模块编译"><a href="#build-module-完成模块编译" class="headerlink" title="build module 完成模块编译"></a>build module 完成模块编译</h4><p>这里主要调用配置的<code>loaders</code>，将我们的模块转成标准的<code>JS</code>模块</p>
<p>在用<code> Loader</code> 对一个模块转换完后，使用 <code>acorn</code> 解析转换后的内容，输出对应的抽象语法树（<code>AST</code>），以方便 <code>Webpack </code>后面对代码的分析</p>
<p>从配置的入口模块开始，分析其 <code>AST</code>，当遇到<code>require</code>等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系</p>
<h3 id="输出流程"><a href="#输出流程" class="headerlink" title="输出流程"></a>输出流程</h3><h4 id="seal-输出资源"><a href="#seal-输出资源" class="headerlink" title="seal 输出资源"></a>seal 输出资源</h4><p><code>seal</code>方法主要是要生成<code>chunks</code>，对<code>chunks</code>进行一系列的优化操作，并生成要输出的代码</p>
<p><code>webpack</code> 中的 <code>chunk</code> ，可以理解为配置在 <code>entry</code> 中的模块，或者是动态引入的模块</p>
<p>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表</p>
<h4 id="emit-输出完成"><a href="#emit-输出完成" class="headerlink" title="emit 输出完成"></a>emit 输出完成</h4><p>在确定好输出内容后，根据配置确定输出的路径和文件名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>Compiler</code> 开始生成文件前，钩子 <code>emit</code> 会被执行，这是我们修改最终文件的最后一个机会</p>
<p>从而<code>webpack</code>整个打包过程则结束了</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p> <img src="https://static.vue-js.com/d77fc560-a658-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://github.com/Cosen95/blog/issues/48">https://github.com/Cosen95/blog/issues/48</a></li>
<li><a href="https://developer.aliyun.com/article/61047">https://developer.aliyun.com/article/61047</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的热更新是如何做到的？原理是什么？</title>
    <url>/webpack/webpack-HMR/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/a076da40-acd4-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h3><p><code>HMR </code>全称 <code>Hot Module Replacement</code>，可以理解为模块热替换，指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个应用</p>
<p>例如，我们在应用运行过程中修改了某个模块，通过自动刷新会导致整个应用的整体刷新，那页面中的状态信息都会丢失</p>
<p>如果使用的是 <code>HMR</code>，就可以实现只将修改的模块实时替换至应用中，不必完全刷新整个应用</p>
<p>在<code>webpack</code>中配置开启热模块也非常的简单，如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 开启 HMR 特性</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// hotOnly: true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述这种配置，如果我们修改并保存<code>css</code>文件，确实能够以不刷新的形式更新到页面中</p>
<p>但是，当我们修改并保存<code>js</code>文件之后，页面依旧自动刷新了，这里并没有触发热模块</p>
<p>所以，<code>HMR </code>并不像 <code>Webpack</code> 的其他特性一样可以开箱即用，需要有一些额外的操作</p>
<p>我们需要去指定哪些模块发生更新时进行<code>HRM</code>，如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">module</span>.<span class="property">hot</span>)&#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./util.js&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;util.js更新了&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h2><p>首先来看看一张图，如下：</p>
<p> <img src="https://static.vue-js.com/adc05780-acd4-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li>Webpack Compile：将 JS 源代码编译成 bundle.js</li>
<li>HMR Server：用来将热更新的文件输出给 HMR Runtime</li>
<li>Bundle Server：静态资源文件服务器，提供文件访问路径</li>
<li>HMR Runtime：socket服务器，会被注入到浏览器，更新文件的变化</li>
<li>bundle.js：构建输出的文件</li>
<li>在HMR Runtime 和 HMR Server之间建立 websocket，即图上4号线，用于实时更新文件变化</li>
</ul>
<p>上面图中，可以分成两个阶段：</p>
<ul>
<li>启动阶段为上图 1 - 2 - A - B</li>
</ul>
<p>在编写未经过<code>webpack</code>打包的源代码后，<code>Webpack Compile</code> 将源代码和 <code>HMR Runtime</code> 一起编译成 <code>bundle </code>文件，传输给<code> Bundle Server</code> 静态资源服务器</p>
<ul>
<li>更新阶段为上图 1 - 2 - 3 - 4</li>
</ul>
<p>当某一个文件或者模块发生变化时，<code>webpack </code>监听到文件变化对文件重新编译打包，编译生成唯一的<code>hash</code>值，这个<code>hash </code>值用来作为下一次热更新的标识</p>
<p>根据变化的内容生成两个补丁文件：<code>manifest</code>（包含了 <code>hash</code> 和 <code>chundId </code>，用来说明变化的内容）和<code> chunk.js</code> 模块</p>
<p>由于<code>socket</code>服务器在<code>HMR Runtime</code> 和 <code>HMR Server</code>之间建立 <code>websocket</code>链接，当文件发生改动的时候，服务端会向浏览器推送一条消息，消息包含文件改动后生成的<code>hash</code>值，如下图的<code>h</code>属性，作为下一次热更细的标识</p>
<p> <img src="https://static.vue-js.com/05a0edf0-ad4a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>在浏览器接受到这条消息之前，浏览器已经在上一次<code> socket</code> 消息中已经记住了此时的<code> hash</code> 标识，这时候我们会创建一个 <code>ajax</code> 去服务端请求获取到变化内容的 <code>manifest</code> 文件</p>
<p><code>mainfest</code>文件包含重新<code>build</code>生成的<code>hash</code>值，以及变化的模块，对应上图的<code>c</code>属性</p>
<p>浏览器根据 <code>manifest</code> 文件获取模块变化的内容，从而触发<code>render</code>流程，实现局部模块更新</p>
<p> <img src="https://static.vue-js.com/0e7b7850-ad4a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>关于<code>webpack</code>热模块更新的总结如下：</p>
<ul>
<li>通过<code>webpack-dev-server</code>创建两个服务器：提供静态资源的服务（express）和Socket服务</li>
<li>express server 负责直接提供静态资源的服务（打包后的资源直接被浏览器请求和解析）</li>
<li>socket server 是一个 websocket 的长连接，双方可以通信</li>
<li>当 socket server 监听到对应的模块发生变化时，会生成两个文件.json（manifest文件）和.js文件（update chunk）</li>
<li>通过长连接，socket server 可以直接将这两个文件主动发送给客户端（浏览器）</li>
<li>浏览器拿到两个新的文件后，通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/138446061">https://zhuanlan.zhihu.com/p/138446061</a></li>
<li><a href="https://github.com/Jocs/jocs.github.io/issues/15">https://github.com/Jocs/jocs.github.io/issues/15</a></li>
<li><a href="https://juejin.cn/post/6844904134697549832">https://juejin.cn/post/6844904134697549832</a></li>
<li><a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的生命周期</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-lifecycle/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/1df64890-30e0-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>跟<code>vue</code>、<code>react</code>框架一样，微信小程序框架也存在生命周期，实质也是一堆会在特定时期执行的函数</p>
<p>小程序中，生命周期主要分成了三部分：</p>
<ul>
<li>应用的生命周期</li>
<li>页面的生命周期</li>
<li>组件的生命周期</li>
</ul>
<h3 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h3><p>小程序的生命周期函数是在<code>app.js</code>里面调用的，通过<code>App(Object)</code>函数用来注册一个小程序，指定其小程序的生命周期回调</p>
<h3 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h3><p>页面生命周期函数就是当你每进入&#x2F;切换到一个新的页面的时候，就会调用的生命周期函数，同样通过<code>App(Object)</code>函数用来注册一个页面</p>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发，通过<code>Component(Object)</code>进行注册组件</p>
<h2 id="二、有哪些"><a href="#二、有哪些" class="headerlink" title="二、有哪些"></a>二、有哪些</h2><h3 id="应用的生命周期-1"><a href="#应用的生命周期-1" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h3><table>
<thead>
<tr>
<th>生命周期</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onLaunch</td>
<td>小程序初始化完成时触发，全局只触发一次</td>
</tr>
<tr>
<td>onShow</td>
<td>小程序启动，或从后台进入前台显示时触发</td>
</tr>
<tr>
<td>onHide</td>
<td>小程序从前台进入后台时触发</td>
</tr>
<tr>
<td>onError</td>
<td>小程序发生脚本错误或 API 调用报错时触发</td>
</tr>
<tr>
<td>onPageNotFound</td>
<td>小程序要打开的页面不存在时触发</td>
</tr>
<tr>
<td>onUnhandledRejection()</td>
<td>小程序有未处理的 Promise 拒绝时触发</td>
</tr>
<tr>
<td>onThemeChange</td>
<td>系统切换主题时触发</td>
</tr>
</tbody></table>
<h3 id="页面的生命周期-1"><a href="#页面的生命周期-1" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h3><table>
<thead>
<tr>
<th>生命周期</th>
<th>说明</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>onLoad</td>
<td>生命周期回调—监听页面加载</td>
<td>发送请求获取数据</td>
</tr>
<tr>
<td>onShow</td>
<td>生命周期回调—监听页面显示</td>
<td>请求数据</td>
</tr>
<tr>
<td>onReady</td>
<td>生命周期回调—监听页面初次渲染完成</td>
<td>获取页面元素（少用）</td>
</tr>
<tr>
<td>onHide</td>
<td>生命周期回调—监听页面隐藏</td>
<td>终止任务，如定时器或者播放音乐</td>
</tr>
<tr>
<td>onUnload</td>
<td>生命周期回调—监听页面卸载</td>
<td>终止任务</td>
</tr>
</tbody></table>
<h3 id="组件的生命周期-1"><a href="#组件的生命周期-1" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><table>
<thead>
<tr>
<th>生命周期</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>created</td>
<td>生命周期回调—监听页面加载</td>
</tr>
<tr>
<td>attached</td>
<td>生命周期回调—监听页面显示</td>
</tr>
<tr>
<td>ready</td>
<td>生命周期回调—监听页面初次渲染完成</td>
</tr>
<tr>
<td>moved</td>
<td>生命周期回调—监听页面隐藏</td>
</tr>
<tr>
<td>detached</td>
<td>生命周期回调—监听页面卸载</td>
</tr>
<tr>
<td>error</td>
<td>每当组件方法抛出错误时执行</td>
</tr>
</tbody></table>
<p>注意的是：</p>
<ul>
<li>组件实例刚刚被创建好时， created 生命周期被触发，此时，组件数据 this.data 就是在 Component  构造器中定义的数据 data ， 此时不能调用 setData</li>
<li>在组件完全初始化完毕、进入页面节点树后， attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行</li>
<li>在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则  detached 会被触发</li>
</ul>
<p>还有一些特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，以便组件内部处理，这样的生命周期称为“组件所在页面的生命周期”，在 <code>pageLifetimes</code> 定义段中定义，如下：</p>
<table>
<thead>
<tr>
<th>生命周期</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>show</td>
<td>组件所在的页面被展示时执行</td>
</tr>
<tr>
<td>hide</td>
<td>组件所在的页面被隐藏时执行</td>
</tr>
</tbody></table>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">pageLifetimes</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 页面被展示</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 页面被隐藏</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>






<h2 id="三、执行过程"><a href="#三、执行过程" class="headerlink" title="三、执行过程"></a>三、执行过程</h2><h3 id="应⽤的⽣命周期执行过程："><a href="#应⽤的⽣命周期执行过程：" class="headerlink" title="应⽤的⽣命周期执行过程："></a>应⽤的⽣命周期执行过程：</h3><ul>
<li><p>⽤户⾸次打开⼩程序，触发 onLaunch（全局只触发⼀次）</p>
</li>
<li><p>⼩程序初始化完成后，触发onShow⽅法，监听⼩程序显示</p>
</li>
<li><p>⼩程序从前台进⼊后台，触发 onHide⽅法</p>
</li>
<li><p>⼩程序从后台进⼊前台显示，触发 onShow⽅法</p>
</li>
<li><p>⼩程序后台运⾏⼀定时间，或系统资源占⽤过⾼，会被销毁</p>
</li>
</ul>
<h3 id="⻚⾯⽣命周期的执行过程："><a href="#⻚⾯⽣命周期的执行过程：" class="headerlink" title="⻚⾯⽣命周期的执行过程："></a>⻚⾯⽣命周期的执行过程：</h3><ul>
<li>⼩程序注册完成后，加载⻚⾯，触发onLoad⽅法</li>
<li>⻚⾯载⼊后触发onShow⽅法，显示⻚⾯</li>
<li>⾸次显示⻚⾯，会触发onReady⽅法，渲染⻚⾯元素和样式，⼀个⻚⾯只会调⽤⼀次</li>
<li>当⼩程序后台运⾏或跳转到其他⻚⾯时，触发onHide⽅法</li>
<li>当⼩程序有后台进⼊到前台运⾏或重新进⼊⻚⾯时，触发onShow⽅法</li>
<li>当使⽤重定向⽅法 wx.redirectTo() 或关闭当前⻚返回上⼀⻚wx.navigateBack()，触发onUnload</li>
</ul>
<p>当存在也应用生命周期和页面周期的时候，相关的执行顺序如下：</p>
<ul>
<li><p>打开小程序：(App)onLaunch –&gt; (App)onShow –&gt; (Pages)onLoad –&gt; (Pages)onShow –&gt; (pages)onRead</p>
</li>
<li><p>进入下一个页面：(Pages)onHide –&gt; (Next)onLoad –&gt; (Next)onShow –&gt; (Next)onReady</p>
</li>
<li><p>返回上一个页面：(curr)onUnload –&gt; (pre)onShow</p>
</li>
<li><p>离开小程序：(App)onHide</p>
</li>
<li><p>再次进入：小程序未销毁 –&gt; (App)onShow(执行上面的顺序），小程序被销毁，（App)onLaunch重新开始执行.</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提高webpack的构建速度？</title>
    <url>/webpack/webpack-improve-build/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/3a1b8620-b01b-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>随着我们的项目涉及到页面越来越多，功能和业务代码也会随着越多，相应的 <code>webpack</code> 的构建时间也会越来越久</p>
<p>构建时间与我们日常开发效率密切相关，当我们本地开发启动 <code>devServer</code> 或者 <code>build</code> 的时候，如果时间过长，会大大降低我们的工作效率</p>
<p>所以，优化<code>webpack</code> 构建速度是十分重要的环节</p>
<h2 id="二、如何优化"><a href="#二、如何优化" class="headerlink" title="二、如何优化"></a>二、如何优化</h2><p>常见的提升构建速度的手段有如下：</p>
<ul>
<li>优化 loader 配置</li>
<li>合理使用 resolve.extensions</li>
<li>优化 resolve.modules</li>
<li>优化 resolve.alias</li>
<li>使用 DLLPlugin 插件</li>
<li>使用 cache-loader</li>
<li>terser 启动多线程</li>
<li>合理使用 sourceMap</li>
</ul>
<h3 id="优化loader配置"><a href="#优化loader配置" class="headerlink" title="优化loader配置"></a>优化loader配置</h3><p>在使用<code>loader</code>时，可以通过配置<code>include</code>、<code>exclude</code>、<code>test</code>属性来匹配文件，接触<code>include</code>、<code>exclude</code>规定哪些匹配应用<code>loader</code></p>
<p>如采用 ES6 的项目为例，在配置 <code>babel-loader </code>时，可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 如果项目源码中只有 js 文件就不要写成 /\.jsx?$/，提升正则表达式性能</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class="line">        <span class="comment">// 只对项目根目录下的 src 目录中的文件采用 babel-loader</span></span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="合理使用-resolve-extensions"><a href="#合理使用-resolve-extensions" class="headerlink" title="合理使用 resolve.extensions"></a>合理使用 resolve.extensions</h3><p>在开发中我们会有各种各样的模块依赖，这些模块可能来自于自己编写的代码，也可能来自第三方库， <code>resolve</code>可以帮助<code>webpack</code>从每个 <code>require/import</code> 语句中，找到需要引入到合适的模块代码</p>
<p>通过<code>resolve.extensions</code>是解析到文件时自动添加拓展名，默认情况如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">extensions</span>:[<span class="string">&quot;.warm&quot;</span>,<span class="string">&quot;.mjs&quot;</span>,<span class="string">&quot;.js&quot;</span>,<span class="string">&quot;.json&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们引入文件的时候，若没有文件后缀名，则会根据数组内的值依次查找</p>
<p>当我们配置的时候，则不要随便把所有后缀都写在里面，这会调用多次文件的查找，这样就会减慢打包速度</p>
<h3 id="优化-resolve-modules"><a href="#优化-resolve-modules" class="headerlink" title="优化 resolve.modules"></a>优化 resolve.modules</h3><p><code>resolve.modules</code> 用于配置 <code>webpack</code> 去哪些目录下寻找第三方模块。默认值为<code>[&#39;node_modules&#39;]</code>，所以默认会从<code>node_modules</code>中查找文件<br>当安装的第三方模块都放在项目根目录下的 <code>./node_modules </code>目录下时，所以可以指明存放第三方模块的绝对路径，以减少寻找，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span><br><span class="line">    // 其中 __dirname 表示当前工作目录，也就是项目根目录</span><br><span class="line">    modules: [path.resolve(__dirname, &#x27;node_modules&#x27;)]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="优化-resolve-alias"><a href="#优化-resolve-alias" class="headerlink" title="优化 resolve.alias"></a>优化 resolve.alias</h3><p><code>alias</code>给一些常用的路径起一个别名，特别当我们的项目目录结构比较深的时候，一个文件的路径可能是<code>./../../</code>的形式</p>
<p>通过配置<code>alias</code>以减少查找过程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@&quot;</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="使用-DLLPlugin-插件"><a href="#使用-DLLPlugin-插件" class="headerlink" title="使用 DLLPlugin 插件"></a>使用 DLLPlugin 插件</h3><p><code>DLL</code>全称是 动态链接库，是为软件在winodw种实现共享函数库的一种实现方式，而Webpack也内置了DLL的功能，为的就是可以共享，不经常改变的代码，抽成一个共享的库。这个库在之后的编译过程中，会被引入到其他项目的代码中</p>
<p>使用步骤分成两部分：</p>
<ul>
<li>打包一个 DLL 库</li>
<li>引入 DLL 库</li>
</ul>
<h4 id="打包一个-DLL-库"><a href="#打包一个-DLL-库" class="headerlink" title="打包一个 DLL 库"></a>打包一个 DLL 库</h4><p><code>webpack</code>内置了一个<code>DllPlugin</code>可以帮助我们打包一个DLL的库文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;dll_[name]&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dll/[name].mainfest.json&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="引入-DLL-库"><a href="#引入-DLL-库" class="headerlink" title="引入 DLL 库"></a>引入 DLL 库</h4><p>使用 <code>webpack</code> 自带的 <code>DllReferencePlugin</code> 插件对 <code>mainfest.json</code> 映射文件进行分析，获取要使用的<code>DLL</code>库</p>
<p>然后再通过<code>AddAssetHtmlPlugin</code>插件，将我们打包的<code>DLL</code>库引入到<code>Html</code>模块中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">context</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dll/dll_react.js&quot;</span>),</span><br><span class="line">        <span class="attr">mainfest</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dll/react.mainfest.json&quot;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AddAssetHtmlPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">outputPath</span>:<span class="string">&quot;./auto&quot;</span>,</span><br><span class="line">        <span class="attr">filepath</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./dll/dll_react.js&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="使用-cache-loader"><a href="#使用-cache-loader" class="headerlink" title="使用 cache-loader"></a>使用 cache-loader</h3><p>在一些性能开销较大的 <code>loader </code>之前添加 <code>cache-loader</code>，以将结果缓存到磁盘里，显著提升二次构建速度</p>
<p>保存和读取这些缓存文件会有一些时间开销，所以请只对性能开销较大的 <code>loader</code> 使用此<code> loader</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ext$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;cache-loader&#x27;</span>, ...loaders],</span><br><span class="line">                <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="terser-启动多线程"><a href="#terser-启动多线程" class="headerlink" title="terser 启动多线程"></a>terser 启动多线程</h3><p>使用多进程并行运行来提高构建速度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="合理使用-sourceMap"><a href="#合理使用-sourceMap" class="headerlink" title="合理使用 sourceMap"></a>合理使用 sourceMap</h3><p>打包生成  <code>sourceMap</code> 的时候，如果信息越详细，打包速度就会越慢。对应属性取值如下所示：</p>
<p><img src="https://static.vue-js.com/11647af0-b01d-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>可以看到，优化<code>webpack</code>构建的方式有很多，主要可以从优化搜索时间、缩小文件搜索范围、减少不必要的编译等方面入手</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://github.com/ly2011/blog/issues/44">https://github.com/ly2011/blog/issues/44</a></li>
<li><a href="https://xie.infoq.cn/article/541418eb82a674741a0ad8865">https://xie.infoq.cn/article/541418eb82a674741a0ad8865</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/139498741">https://zhuanlan.zhihu.com/p/139498741</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的登录流程</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-login/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/aa3ccbd0-3428-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>传统的<code>web</code>开发实现登陆功能，一般的做法是输入账号密码、或者输入手机号及短信验证码进行登录</p>
<p>服务端校验用户信息通过之后，下发一个代表登录态的 <code>token</code> 给客户端，以便进行后续的交互,每当<code>token</code>过期，用户都需要重新登录</p>
<p>而在微信小程序中，可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标识，快速建立小程序内的用户体系，从而实现登陆功能</p>
<p>实现小程序用户体系主要涉及到<code>openid</code>和<code>code</code>的概念：</p>
<ul>
<li>调用<code>wx.login()</code>方法会生成<code>code</code>，将<code>code</code>作为参数传递给微信服务器指定接口，就可以获取用户的<code>openid</code></li>
</ul>
<p>对于每个小程序，微信都会将用户的微信<code>ID</code>映射出一个小程序 <code>openid</code>，作为这个用户在这个小程序的唯一标识</p>
<h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>微信小程序登陆具体实现的逻辑如下图所示：</p>
<p> <img src="https://static.vue-js.com/b60638c0-3428-11ec-a752-75723a64e8f5.png"></p>
<ul>
<li>通过  wx.login()  获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo 读取用户数据</li>
<li>由于小程序后台授权域名无法授权微信的域名，所以需要自身后端调用微信服务器获取用户信息</li>
<li>通过 wx.request() 方法请求业务方服务器，后端把 appid , appsecret  和 code 一起发送到微信服务器。 appid 和 appsecret 都是微信提供的，可以在管理员后台找到</li>
<li>微信服务器返回了 openid 及本次登录的会话密钥 session_key</li>
<li>后端从数据库中查找 openid ，如果没有查到记录，说明该用户没有注册，如果有记录，则继续往下走</li>
<li>session_key 是对用户数据进行加密签名的密钥。为了自身应用安全，session_key 不应该在网络上传输</li>
<li>然后生成 session并返回给小程序</li>
<li>小程序把 session 存到  storage 里面</li>
<li>下次请求时，先从 storage 里面读取，然后带给服务端</li>
<li>服务端对比 session 对应的记录，然后校验有效期</li>
</ul>
<p>更加详细的功能图如下所示：</p>
<p> <img src="https://static.vue-js.com/c3cfbb70-3428-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h2><p>实际业务中，我们还需要登录态是否过期，通常的做法是在登录态（临时令牌）中保存有效期数据，该有效期数据应该在服务端校验登录态时和约定的时间（如服务端本地的系统时间或时间服务器上的标准时间）做对比</p>
<p>这种方法需要将本地存储的登录态发送到小程序的服务端，服务端判断为无效登录态时再返回需重新执行登录过程的消息给小程</p>
<p>另一种方式可以通过调用<code>wx.checkSession</code>检查微信登陆态是否过期：</p>
<ul>
<li>如果过期，则发起完整的登录流程</li>
<li>如果不过期，则继续使用本地保存的自定义登录态</li>
</ul>
<p>这种方式的好处是不需要小程序服务端来参与校验，而是在小程序端调用AP，流程如下所示：</p>
<p> <img src="https://static.vue-js.com/8b446d30-349d-11ec-a752-75723a64e8f5.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000016750340">https://segmentfault.com/a/1190000016750340</a></li>
<li><a href="https://juejin.cn/post/6955754095860776973">https://juejin.cn/post/6955754095860776973</a></li>
<li><a href="https://www.cnblogs.com/zwh0910/p/13977278.html">https://www.cnblogs.com/zwh0910/p/13977278.html</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的理解</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-applet/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/be367c80-300e-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>2017年，微信正式推出了小程序，允许外部开发者在微信内部运行自己的代码，开展业务</p>
<p>截至目前，小程序已经成为国内前端的一个重要业务，跟 <code>Web</code> 和手机 <code>App</code> 有着同等的重要性</p>
<p> <img src="https://static.vue-js.com/ce751de0-300e-11ec-8e64-91fdec0f05a1.png"></p>
<p>小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用</p>
<p>也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载</p>
<p>注意的是，除了微信小程序，还有百度小程序、微信小程序、支付宝小程序、抖音小程序，都是每个平台自己开发的，都是有针对性平台的应用程序</p>
<h2 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h2><p>⼩程序并⾮凭空冒出来的⼀个概念，当微信中的 <code>WebView</code> 逐渐成为移动 <code>Web</code>的⼀个重要⼊⼝时，微信就有相关的 <code>JS-SDK</code></p>
<p><code>JS-SDK</code> 解决了移动⽹⻚能⼒不⾜的问题，通过暴露微信的接⼝使得 <code>Web</code> 开发者能够拥有更多的能⼒，然⽽在更多的能⼒之外，<code>JS-SDK</code>的模式并没有解决使⽤移动⽹⻚遇到的体验不良的问题</p>
<p>因此需要设计⼀个⽐较好的系统，使得所有开发者在微信中都能获得⽐较好的体验：</p>
<ul>
<li>快速的加载</li>
<li>更强⼤的能⼒</li>
<li>原⽣的体验</li>
<li>易⽤且安全的微信数据开放</li>
<li>⾼效和简单的开发</li>
</ul>
<p>这些是<code>JS-SDK</code>做不到的，需要设计一个全新的小程序系统</p>
<p>对于小程序的开发，提供一个简单、高效的应用开发框架和丰富的组件及<code>API</code>，帮助开发者开发出具有原生体验的服务</p>
<p>其中相比<code>H5</code>，小程序与其的区别有如下：</p>
<ul>
<li>运⾏环境：⼩程序基于浏览器内核重构的内置解析器</li>
<li>系统权限：⼩程序能获得更多的系统权限，如⽹络通信状态、数据缓存能⼒等</li>
<li>渲染机制：⼩程序的逻辑层和渲染层是分开的</li>
</ul>
<p>小程序可以视为只能用微信打开和浏览的<code>H5</code>，小程序和网页的技术模型是一样的，用到的 <code>JavaScript</code> 语言和 <code>CSS</code> 样式也是一样的，只是网页的 <code>HTML</code> 标签被稍微修改成了 <code>WXML</code> 标签</p>
<p>因此可以说，小程序页面本质上就是网页</p>
<p>其中关于微信小程序的实现原理，我们在后面的文章讲到</p>
<h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><p>优点：</p>
<ul>
<li>随搜随用，用完即走：使得小程序可以代替许多APP，或是做APP的整体嫁接，或是作为阉割版功能的承载体</li>
<li>流量大，易接受：小程序借助自身平台更加容易引入更多的流量</li>
<li>安全</li>
<li>开发门槛低</li>
<li>降低兼容性限制</li>
</ul>
<p>缺点：</p>
<ul>
<li>用户留存：及相关数据显示，小程序的平均次日留存在13%左右，但是双周留存骤降到仅有1%</li>
<li>体积限制：微信小程序只有2M的大小，这样导致无法开发大型一些的小程序</li>
<li>受控微信：比起APP，尤其是安卓版的高自由度，小程序要面对很多来自微信的限制，从功能接口，甚至到类别内容，都要接受微信的管控</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></li>
<li><a href="https://www.zhihu.com/question/263816362">https://www.zhihu.com/question/263816362</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序中路由跳转的方式有哪些？区别</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-navigate/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/52bd3820-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>微信小程序拥有<code>web</code>网页和<code>Application</code>共同的特征，我们的页面都不是孤立存在的，而是通过和其他页面进行交互，来共同完成系统的功能</p>
<p>在微信小程序中，每个页面可以看成是一个<code> pageModel</code>，<code>pageModel </code>全部以栈的形式进行管理</p>
<h2 id="二、有哪些"><a href="#二、有哪些" class="headerlink" title="二、有哪些"></a>二、有哪些</h2><p>常见的微信小程序页面跳转方式有如下：</p>
<ul>
<li>wx.navigateTo(Object)</li>
<li>wx.redirectTo(Object)</li>
<li>wx.switchTab(Object)</li>
<li>wx.navigateBack(Object)</li>
<li>wx.reLaunch(Object)</li>
</ul>
<h3 id="wx-navigateTo-Object"><a href="#wx-navigateTo-Object" class="headerlink" title="wx.navigateTo(Object)"></a>wx.navigateTo(Object)</h3><p><code>wx.navigateTo()</code>用于保留当前页面、跳转到应用内的某个页面，使用 <code>wx.navigateBack</code>可以返回到原页面</p>
<p>对于页面不是特别多的小程序，通常推荐使用 <code>wx.navigateTo</code>进行跳转， 以便返回原页面，以提高加载速度。当页面特别多时，则不推荐使用</p>
<p>参数表如下所示：</p>
<p> <img src="https://static.vue-js.com/5e524ea0-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<p>流程图如下：</p>
<p> <img src="https://static.vue-js.com/68f033e0-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<h3 id="wx-redirectTo-Object"><a href="#wx-redirectTo-Object" class="headerlink" title="wx.redirectTo(Object)"></a>wx.redirectTo(Object)</h3><p>重定向，当页面过多时，被保留页面会挤占微信分配给小程序的内存，或是达到微信所限制的 10 层页面栈的情况下，我们应该考虑选择 <code>wx.redirectTo</code></p>
<p><code>wx.redirectTo()</code>用于关闭当前页面，跳转到应用内的某个页面</p>
<p>这样的跳转，可以避免跳转前页面占据运行内存，但返回时页面需要重新加载，增加了返回页面的显示时间</p>
<p>参数表如下所示：</p>
<p> <img src="https://static.vue-js.com/76066c20-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<p>流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/828c4b40-31a5-11ec-a752-75723a64e8f5.png"></p>
<h3 id="wx-switchTab-Object"><a href="#wx-switchTab-Object" class="headerlink" title="wx.switchTab(Object)"></a>wx.switchTab(Object)</h3><p>跳转到 <code>tabBar </code>页面，并关闭其他所有非 <code>tabBar</code> 页面</p>
<p>参数表如下所示：</p>
<p> <img src="https://static.vue-js.com/968869d0-31a5-11ec-a752-75723a64e8f5.png"></p>
<h3 id="wx-navigateBack-Object"><a href="#wx-navigateBack-Object" class="headerlink" title="wx.navigateBack(Object)"></a>wx.navigateBack(Object)</h3><p><code>wx.navigateBack()</code> 用于关闭当前页面，并返回上一页面或多级页面，开发者可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层则设置对象的<code>delta</code>属性即可</p>
<p>参数表如下：</p>
<p> <img src="https://static.vue-js.com/a28d8030-31a5-11ec-a752-75723a64e8f5.png"></p>
<h3 id="wx-reLaunch-Object"><a href="#wx-reLaunch-Object" class="headerlink" title="wx.reLaunch(Object)"></a>wx.reLaunch(Object)</h3><p>关闭所有页面，打开到应用内的某个页面，返回的时候跳到首页</p>
<p>流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/accca3a0-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<p>参数表如下所示：</p>
<p> <img src="https://static.vue-js.com/b98c7e80-31a5-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>关于上述五种跳转方式，做下总结：</p>
<ul>
<li>navigateTo 保留当前页面，跳转到应用内的某个页面，使用 wx.navigateBack 可以返回到原页</li>
<li>redirectTo 关闭当前页面，跳转到应用内的某个页面</li>
<li>switchTab 跳转到 tabBar 页面，同时关闭其他非 tabBar 页面</li>
<li>navigateBack 返回上一页面</li>
<li>reLanch 关闭所有页面，打开到应用内的某个页面</li>
</ul>
<p>其中关于它们的页面栈的关系如下：</p>
<ul>
<li><p>avigateTo 新页面入栈</p>
</li>
<li><p>redirectTo 当前页面出栈，新页面入栈</p>
</li>
<li><p>navigateBack 页面不断出栈，直到目标返回页，新页面入栈</p>
</li>
<li><p>switchTab 页面全部出栈，只留下新的 Tab 页面</p>
</li>
<li><p>reLanch 页面全部出栈，只留下新的页面</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的实现原理</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-WebView-jscore/</url>
    <content><![CDATA[<p>   <img src="https://static.vue-js.com/4407cb60-3722-11ec-a752-75723a64e8f5.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>  网页开发，渲染线程和脚本是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应的原因，本质就是我们常说的 <code>JS</code> 是单线程的</p>
<p>  而在小程序中，选择了 <code>Hybrid</code> 的渲染方式，将视图层和逻辑层是分开的，双线程同时运行，视图层的界面使用 <code>WebView</code> 进行渲染，逻辑层运行在 <code>JSCore</code> 中</p>
<p>   <img src="https://static.vue-js.com/4e322e50-3722-11ec-8e64-91fdec0f05a1.png"></p>
<ul>
<li>渲染层：界面渲染相关的任务全都在 WebView 线程里执行。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程</li>
<li>逻辑层：采用 JsCore 线程运行 JS 脚本，在这个环境下执行的都是有关小程序业务逻辑的代码</li>
</ul>
<h2 id="二、通信"><a href="#二、通信" class="headerlink" title="二、通信"></a>二、通信</h2><p>  小程序在渲染层，宿主环境会把<code>wxml</code>转化成对应的<code>JS</code>对象</p>
<p>  在逻辑层发生数据变更的时候，通过宿主环境提供的<code>setData</code>方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的<code>Dom</code>树上，渲染出正确的视图</p>
<p>   <img src="https://static.vue-js.com/5948ed10-3722-11ec-a752-75723a64e8f5.png"></p>
<p>  当视图存在交互的时候，例如用户点击你界面上某个按钮，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户</p>
<p>  对于事件的分发处理，微信进行了特殊的处理，将所有的事件拦截后，丢到逻辑层交给<code>JavaScript</code>进行处理</p>
<p>   <img src="https://static.vue-js.com/61f9f670-3722-11ec-a752-75723a64e8f5.png"></p>
<p>  由于小程序是基于双线程的，也就是任何在视图层和逻辑层之间的数据传递都是线程间的通信，会有一定的延时，因此在小程序中，页面更新成了异步操作</p>
<p>  异步会使得各部分的运行时序变得复杂一些，比如在渲染首屏的时候，逻辑层与渲染层会同时开始初始化工作，但是渲染层需要有逻辑层的数据才能把界面渲染出来</p>
<p>  如果渲染层初始化工作较快完成，就要等逻辑层的指令才能进行下一步工作</p>
<p>  因此逻辑层与渲染层需要有一定的机制保证时序正确，在每个小程序页面的生命周期中，存在着若干次页面数据通信</p>
<p>   <img src="https://static.vue-js.com/6cb798b0-3722-11ec-a752-75723a64e8f5.png"></p>
<h2 id="三、运行机制"><a href="#三、运行机制" class="headerlink" title="三、运行机制"></a>三、运行机制</h2><p>  小程序启动运行两种情况：</p>
<ul>
<li>冷启动（重新开始）：用户首次打开或者小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即为冷启动</li>
<li>热启动：用户已经打开过小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需要将后台态的小程序切换到前台，这个过程就是热启动</li>
</ul>
<h4 id="需要注意："><a href="#需要注意：" class="headerlink" title="需要注意："></a>需要注意：</h4><blockquote>
<p> 1.小程序没有重启的概念<br> 2.当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后会被微信主动销毁<br> 3.短时间内收到系统两次以上内存警告，也会对小程序进行销毁，这也就为什么一旦页面内存溢出，页面会奔溃的本质原因了</p>
</blockquote>
<p>   <img src="https://static.vue-js.com/968c8510-3722-11ec-a752-75723a64e8f5.png"></p>
<p>  开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户</p>
<p>  每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developers.weixin.qq.com/community/develop/article/doc/0008a4c4f28f30fe3eb863b2750813">https://developers.weixin.qq.com/community/develop/article/doc/0008a4c4f28f30fe3eb863b2750813</a></li>
<li><a href="https://juejin.cn/post/6976805521407868958#heading-5">https://juejin.cn/post/6976805521407868958#heading-5</a></li>
<li><a href="https://juejin.cn/post/6844903805675388942">https://juejin.cn/post/6844903805675388942</a></li>
<li><a href="https://juejin.cn/post/6844903999863259144#heading-1">https://juejin.cn/post/6844903999863259144#heading-1</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>提高微信小程序的应用速度的手段有哪些？</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-optimization/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/f606d530-3278-11ec-a752-75723a64e8f5.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>小程序启动会常常遇到如下图场景：</p>
<p> <img src="https://static.vue-js.com/03941230-3279-11ec-8e64-91fdec0f05a1.png"></p>
<p>这是因为，小程序首次启动前，微信会在小程序启动前为小程序准备好通用的运行环境，如运行中的线程和一些基础库的初始化</p>
<p>然后才开始进入启动状态，展示一个固定的启动界面，界面内包含小程序的图标、名称和加载提示图标。此时，微信会在背后完成几项工作：</p>
<ul>
<li>下载小程序代码包</li>
<li>加载小程序代码包</li>
<li>初始化小程序首页</li>
</ul>
<p>下载到的小程序代码包不是小程序的源代码，而是编译、压缩、打包之后的代码包</p>
<p>整体流程如下图：</p>
<p> <img src="https://static.vue-js.com/11c0ea90-3279-11ec-a752-75723a64e8f5.png"></p>
<h2 id="二、手段"><a href="#二、手段" class="headerlink" title="二、手段"></a>二、手段</h2><p>围绕上图小程序的启动流程， 我们可以从加载、渲染两个纬度进行切入：</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>提升体验最直接的方法是控制小程序包的大小，常见手段有如下：</p>
<ul>
<li><p>代码包的体积压缩可以通过勾选开发者工具中“上传代码时，压缩代码”选项</p>
</li>
<li><p>及时清理无用的代码和资源文件</p>
</li>
<li><p>减少资源包中的图片等资源的数量和大小（理论上除了小icon，其他图片资源从网络下载），图片资源压缩率有限</p>
</li>
</ul>
<p>并且可以采取分包加载的操作，将用户访问率高的页面放在主包里，将访问率低的页面放入子包里，按需加载</p>
<p>当用户点击到子包的目录时，还是有一个代码包下载的过程，这会感觉到明显的卡顿，所以子包也不建议拆的太大，当然我们可以采用子包预加载技术，并不需要等到用户点击到子包页面后在下载子包</p>
<p> <img src="https://static.vue-js.com/2034de10-3279-11ec-8e64-91fdec0f05a1.png"></p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>关于微信小程序首屏渲染优化的手段如下：</p>
<ul>
<li>请求可以在页面onLoad就加载，不需要等页面ready后在异步请求数据</li>
<li>尽量减少不必要的https请求，可使用 getStorageSync() 及 setStorageSync() 方法将数据存储在本地</li>
<li>可以在前置页面将一些有用的字段带到当前页，进行首次渲染（列表页的某些数据–&gt; 详情页），没有数据的模块可以进行骨架屏的占位</li>
</ul>
<p>在微信小程序中，提高页面的多次渲染效率主要在于正确使用<code>setData</code>：</p>
<ul>
<li>不要过于频繁调用setData，应考虑将多次setData合并成一次setData调用</li>
<li>数据通信的性能与数据量正相关，因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串，则不应使用<code>setData</code>来设置这些数据</li>
<li>与界面渲染无关的数据最好不要设置在data中，可以考虑设置在page对象的其他字段下</li>
</ul>
<p>除此之外，对于一些独立的模块我们尽可能抽离出来，这是因为自定义组件的更新并不会影响页面上其他元素的更新</p>
<p>各个组件也将具有各自独立的逻辑空间。每个组件都分别拥有自己的独立的数据、<code>setData</code>调用</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><strong>小程序启动加载性能</strong>：</p>
<ul>
<li>控制代码包的大小</li>
<li>分包加载</li>
<li>首屏体验（预请求，利用缓存，避免白屏，及时反馈</li>
</ul>
<p><strong>小程序渲染性能</strong>：</p>
<ul>
<li>避免不当的使用setData</li>
<li>使用自定义组件</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://juejin.cn/post/6969779451177484296">https://juejin.cn/post/6969779451177484296</a></li>
<li><a href="https://segmentfault.com/a/1190000008925450">https://segmentfault.com/a/1190000008925450</a></li>
<li><a href="https://juejin.cn/post/6844903638226173965">https://juejin.cn/post/6844903638226173965</a></li>
<li><a href="https://juejin.cn/post/6844903726939897869">https://juejin.cn/post/6844903726939897869</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的发布流程？</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-publish/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/d5cccdf0-3652-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在中大型的公司里，人员的分工非常仔细，一般会有不同岗位角色的员工同时参与同一个小程序项目。为此，小程序平台设计了不同的权限管理使得项目管理者可以更加高效管理整个团队的协同工作</p>
<p> <img src="https://static.vue-js.com/e76aff50-3652-11ec-8e64-91fdec0f05a1.png"></p>
<p>以往我们在开发完网页之后，需要把网页的代码和资源放在服务器上，让用户通过互联网来访问</p>
<p>在小程序的平台里，开发者完成开发之后，需要在开发者工具提交小程序的代码包，然后在小程序后台发布小程序</p>
<p> <img src="https://static.vue-js.com/fe5da190-3652-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>关于发布的流程，主要分成了三个部分：</p>
<ul>
<li>上传代码</li>
<li>提交审核</li>
<li>发布版本</li>
</ul>
<h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>在开发者工具中，可以点击代码上传功能：</p>
<p> <img src="https://static.vue-js.com/08f19bc0-3653-11ec-a752-75723a64e8f5.png"></p>
<p>然后就可以填写版本信息：</p>
<p> <img src="https://static.vue-js.com/1d02c8f0-3653-11ec-a752-75723a64e8f5.png"></p>
<p>然后点击上传，编译器则会提示上传代码成功</p>
<h3 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a>提交审核</h3><p>代码上传完毕，就可以登陆微信公众号的官网首页，点击【开发管理】，查看应用详情：</p>
<p> <img src="https://static.vue-js.com/281038e0-3653-11ec-8e64-91fdec0f05a1.png"></p>
<p>提交审核过程需要填写审核信息，如下图：</p>
<p> <img src="https://static.vue-js.com/33d97ec0-3653-11ec-a752-75723a64e8f5.png"></p>
<p>提交审核成功之后如下图：</p>
<p> <img src="https://static.vue-js.com/3e4c3550-3653-11ec-a752-75723a64e8f5.png"></p>
<h3 id="发布版本"><a href="#发布版本" class="headerlink" title="发布版本"></a>发布版本</h3><p>当审核通过之后，即可提交发布</p>
<p> <img src="https://static.vue-js.com/495140d0-3653-11ec-8e64-91fdec0f05a1.png"></p>
<p>发布成功之后则如下：</p>
<p> <img src="https://static.vue-js.com/5293b4c0-3653-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="三、扩展"><a href="#三、扩展" class="headerlink" title="三、扩展"></a>三、扩展</h2><p>上述是最简单的小程序代码发布的流程，通常的流程如下：</p>
<ul>
<li>代码管理服务器上新建分支</li>
<li>开发测试新需求</li>
<li>测试完成后，将本地分支合并到 master 分支</li>
<li>拉取 master 分支最新代码，执行 build 命令生成小程序可执行文件</li>
<li>开发者工具点击“上传”</li>
<li>提审</li>
<li>发布</li>
</ul>
<p>但是面对多人协调开发的时候，有可能出现已经上线的代码还没合并到<code>master</code>的情况</p>
<p>因此可以考虑自动化构建部署，就是将从开发到部署的一系列流程变成自动化，衔接连贯，在构建失败时能够告知开发者，构建成功后能够告知测试和实施人员，可参考如下流程图：</p>
<p> <img src="https://static.vue-js.com/602d9bf0-3653-11ec-a752-75723a64e8f5.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6994414162700927012">https://juejin.cn/post/6994414162700927012</a></li>
<li><a href="https://www.leapcloud.cn/website/docs/doc_config/xiaochengxu/xiaochengxu.html">https://www.leapcloud.cn/website/docs/doc_config/xiaochengxu/xiaochengxu.html</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的支付流程？</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/applet-requestPayment/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/2266fff0-34a0-11ec-8e64-91fdec0f05a1.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>微信小程序为电商类小程序，提供了非常完善、优秀、安全的支付功能</p>
<p>在小程序内可调用微信的<code>API</code>完成支付功能，方便、快捷</p>
<p>场景如下图所示：</p>
<p> <img src="https://static.vue-js.com/6e0cff40-34a0-11ec-a752-75723a64e8f5.png"></p>
<p> <img src="https://static.vue-js.com/34864830-34a0-11ec-8e64-91fdec0f05a1.png"></p>
<ul>
<li>用户通过分享或扫描二维码进入商户小程序，用户选择购买，完成选购流程</li>
<li>调起微信支付控件，用户开始输入支付密码</li>
<li>密码验证通过，支付成功。商户后台得到支付成功的通知</li>
<li>返回商户小程序，显示购买成功</li>
<li>微信支付公众号下发支付凭证</li>
</ul>
<h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>以电商小程序为例</p>
<p>支付流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/76b66780-34a0-11ec-8e64-91fdec0f05a1.png"></p>
<p>具体的做法：</p>
<ul>
<li>打开某小程序，点击直接下单</li>
<li>wx.login获取用户临时登录凭证code，发送到后端服务器换取openId</li>
<li>在下单时，小程序需要将购买的商品Id，商品数量，以及用户的openId传送到服务器</li>
<li>服务器在接收到商品Id、商品数量、openId后，生成服务期订单数据，同时经过一定的签名算法，向微信支付发送请求，获取预付单信息(prepay_id)，同时将获取的数据再次进行相应规则的签名，向小程序端响应必要的信息</li>
<li>小程序端在获取对应的参数后，调用wx.requestPayment()发起微信支付，唤醒支付工作台，进行支付</li>
<li>接下来的一些列操作都是由用户来操作的包括了微信支付密码，指纹等验证，确认支付之后执行鉴权调起支付</li>
<li>鉴权调起支付：在微信后台进行鉴权，微信后台直接返回给前端支付的结果，前端收到返回数据后对支付结果进行展示</li>
<li>推送支付结果：微信后台在给前端返回支付的结果后，也会向后台也返回一个支付结果，后台通过这个支付结果来更新订单的状态</li>
</ul>
<p>其中后端响应数据必要的信息则是<code>wx.requestPayment</code>方法所需要的参数，大致如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">requestPayment</span>(&#123;</span><br><span class="line">  <span class="comment">// 时间戳</span></span><br><span class="line">  <span class="attr">timeStamp</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 随机字符串</span></span><br><span class="line">  <span class="attr">nonceStr</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 统一下单接口返回的 prepay_id 参数值</span></span><br><span class="line">  <span class="attr">package</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 签名类型</span></span><br><span class="line">  <span class="attr">signType</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 签名</span></span><br><span class="line">  <span class="attr">paySign</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 调用成功回调</span></span><br><span class="line">  <span class="title function_">success</span> () &#123;&#125;,</span><br><span class="line">  <span class="comment">// 失败回调</span></span><br><span class="line">  <span class="title function_">fail</span> () &#123;&#125;,</span><br><span class="line">  <span class="comment">// 接口调用结束回调</span></span><br><span class="line">  <span class="title function_">complete</span> () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>参数表如下所示：</p>
<p><img src="https://files.mdnice.com/user/155/48efed1f-d67f-45a7-ab2c-89a6424fafa0.png"></p>
<h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2><p>小程序支付和以往的网页、APP微信支付大同小异，可以说小程序的支付变得更加简洁，不需要设置支付目录、域名授权等操作</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_8_0.shtml</a></li>
<li><a href="https://juejin.cn/post/6844903895970349064">https://juejin.cn/post/6844903895970349064</a></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目本地开发完成后部署到服务器后报404是什么原因呢？</title>
    <url>/Vue/vue-404/</url>
    <content><![CDATA[<h1 id="vue项目本地开发完成后部署到服务器后报404是什么原因呢？"><a href="#vue项目本地开发完成后部署到服务器后报404是什么原因呢？" class="headerlink" title="vue项目本地开发完成后部署到服务器后报404是什么原因呢？"></a>vue项目本地开发完成后部署到服务器后报404是什么原因呢？</h1><p><img src="https://static.vue-js.com/002c9320-4f3e-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<h2 id="一、如何部署"><a href="#一、如何部署" class="headerlink" title="一、如何部署"></a>一、如何部署</h2><p>前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的<code>web</code>容器指定的静态目录下即可</p>
<p>我们知道<code>vue</code>项目在构建后，是生成一系列的静态文件</p>
<p><img src="https://imgkr2.cn-bj.ufileos.com/b9d13e56-f859-4b4b-a9da-a703a34c2f5d.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=m1qDXRSFHrfXlnAtAlVhjoLKP70%253D&Expires=1609927181"></p>
<p>常规布署我们只需要将这个目录上传至目标服务器即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// scp 上传 user为主机登录用户，host为主机外网ip, xx为web容器静态资源路径</span><br><span class="line">scp dist.zip user@host:/xx/xx/xx</span><br></pre></td></tr></table></figure>

<p>让<code>web</code>容器跑起来，以<code>nginx</code>为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80;</span><br><span class="line">  server_name  www.xxx.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index  /data/dist/index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成记得重启<code>nginx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 检查配置是否正确</span><br><span class="line">nginx -t </span><br><span class="line"></span><br><span class="line">// 平滑重启</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>操作完后就可以在浏览器输入域名进行访问了</p>
<p>当然上面只是提到最简单也是最直接的一种布署方式</p>
<p>什么自动化，镜像，容器，流水线布署，本质也是将这套逻辑抽象，隔离，用程序来代替重复性的劳动，本文不展开</p>
<h2 id="二、404问题"><a href="#二、404问题" class="headerlink" title="二、404问题"></a>二、404问题</h2><p>这是一个经典的问题，相信很多同学都有遇到过，那么你知道其真正的原因吗？</p>
<p>我们先还原一下场景：</p>
<ul>
<li><code>vue</code>项目在本地时运行正常，但部署到服务器中，刷新页面，出现了404错误</li>
</ul>
<p>先定位一下，HTTP 404 错误意味着链接指向的资源不存在</p>
<p>问题在于为什么不存在？且为什么只有<code>history</code>模式下会出现这个问题？</p>
<h3 id="为什么history模式下有问题"><a href="#为什么history模式下有问题" class="headerlink" title="为什么history模式下有问题"></a>为什么history模式下有问题</h3><p><code>Vue</code>是属于单页应用（single-page application）</p>
<p>而<code>SPA</code>是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，前面我们也看到了，不管我们应用有多少页面，构建物都只会产出一个<code>index.html</code></p>
<p>现在，我们回头来看一下我们的<code>nginx</code>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  <span class="number">80</span>;</span><br><span class="line">  server_name  www.<span class="property">xxx</span>.<span class="property">com</span>;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index  /data/dist/index.<span class="property">html</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以根据 <code>nginx</code> 配置得出，当我们在地址栏输入 <code>www.xxx.com</code> 时，这时会打开我们 <code>dist</code> 目录下的 <code>index.html</code> 文件，然后我们在跳转路由进入到 <code>www.xxx.com/login</code></p>
<p>关键在这里，当我们在 <code>website.com/login</code> 页执行刷新操作，<code>nginx location</code> 是没有相关配置的，所以就会出现 404 的情况</p>
<h3 id="为什么hash模式下没有问题"><a href="#为什么hash模式下没有问题" class="headerlink" title="为什么hash模式下没有问题"></a>为什么hash模式下没有问题</h3><p><code>router hash</code> 模式我们都知道是用符号#表示的，如  <code>website.com/#/login</code>, <code>hash</code> 的值为 <code>#/login</code></p>
<p>它的特点在于：<code>hash</code> 虽然出现在 <code>URL</code> 中，但不会被包括在 <code>HTTP</code> 请求中，对服务端完全没有影响，因此改变 <code>hash</code> 不会重新加载页面</p>
<p><code>hash</code> 模式下，仅 <code>hash</code> 符号之前的内容会被包含在请求中，如 <code>website.com/#/login</code> 只有 <code>website.com</code> 会被包含在请求中 ，因此对于服务端来说，即使没有配置<code>location</code>，也不会返回404错误</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>看到这里我相信大部分同学都能想到怎么解决问题了，</p>
<p>产生问题的本质是因为我们的路由是通过JS来执行视图切换的，</p>
<p>当我们进入到子路由时刷新页面，<code>web</code>容器没有相对应的页面此时会出现404</p>
<p>所以我们只需要配置将任意页面都重定向到 <code>index.html</code>，把路由交由前端处理</p>
<p>对<code>nginx</code>配置文件<code>.conf</code>修改，添加<code>try_files $uri $uri/ /index.html;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80;</span><br><span class="line">  server_name  www.xxx.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index  /data/dist/index.html;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改完配置文件后记得配置的更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件</p>
<p>为了避免这种情况，你应该在 <code>Vue</code> 应用里面覆盖所有的路由情况，然后在给出一个 404 页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFoundComponent</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于后端配置方案还有：<code>Apache</code>、<code>nodejs</code>等，思想是一致的，这里就不展开述说了</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844903872637632525">https://juejin.cn/post/6844903872637632525</a></li>
<li><a href="https://vue-js.com/topic/5f8cf91d96b2cb0032c385c0">https://vue-js.com/topic/5f8cf91d96b2cb0032c385c0</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中有封装过axios吗？主要是封装哪方面的？</title>
    <url>/Vue/vue-axios/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/2bf1e460-45a7-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、axios是什么"><a href="#一、axios是什么" class="headerlink" title="一、axios是什么"></a>一、axios是什么</h2><p><code>axios</code> 是一个轻量的 <code>HTTP</code>客户端</p>
<p>基于 <code>XMLHttpRequest</code> 服务来执行 <code>HTTP</code> 请求，支持丰富的配置，支持 <code>Promise</code>，支持浏览器端和 <code>Node.js</code> 端。自<code>Vue</code>2.0起，尤大宣布取消对 <code>vue-resource</code> 的官方推荐，转而推荐 <code>axios</code>。现在 <code>axios</code> 已经成为大部分 <code>Vue</code> 开发者的首选</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 <code>node.js</code> 创建 <code>http</code>请求</li>
<li>支持 <code>Promise</code> API</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换<code> JSON</code> 数据</li>
<li>客户端支持防御<code>XSRF</code></li>
</ul>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目中安装</span></span><br><span class="line">npm install axios --S</span><br><span class="line"><span class="comment">// cdn 引入</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>

<p>发送请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;        </span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,    <span class="comment">// 设置请求的地址</span></span><br><span class="line">  <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>, <span class="comment">// 设置请求方法</span></span><br><span class="line">  <span class="attr">params</span>:&#123;      <span class="comment">// get请求使用params进行参数凭借,如果是post请求用data</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// res为后端返回的数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>并发请求<code>axios.all([])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">    .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">res1, res2</span>) &#123; </span><br><span class="line">    <span class="comment">// res1第一个请求的返回的内容，res2第二个请求返回的内容</span></span><br><span class="line">    <span class="comment">// 两个请求都执行完成才会执行</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>



<h2 id="二、为什么要封装"><a href="#二、为什么要封装" class="headerlink" title="二、为什么要封装"></a>二、为什么要封装</h2><p><code>axios</code> 的 API 很友好，你完全可以很轻松地在项目中直接使用。</p>
<p>不过随着项目规模增大，如果每发起一次<code>HTTP</code>请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍</p>
<p>这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 <code>axios</code> 再使用</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;http://localhost:3000/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 配置代码</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 其他请求配置...</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// todo: 真正业务逻辑代码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误处理代码  </span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">  <span class="comment">// handle authorization error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">  <span class="comment">// handle server forbidden error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他错误处理.....</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了</p>
<p>这时候我们就需要对<code>axios</code>进行二次封装，让使用更为便利</p>
<h2 id="三、如何封装"><a href="#三、如何封装" class="headerlink" title="三、如何封装"></a>三、如何封装</h2><p>封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间…….</p>
<p>设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分</p>
<p>请求头 :  来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务)</p>
<p>状态码:   根据接口返回的不同<code>status</code> ， 来执行不同的业务，这块需要和后端约定好</p>
<p>请求方法：根据<code>get</code>、<code>post</code>等方法进行一个再次封装，使用起来更为方便</p>
<p>请求拦截器:  根据请求的请求头设定，来决定哪些请求可以访问</p>
<p>响应拦截器： 这块就是根据 后端&#96;返回来的状态码判定执行不同业务</p>
<h3 id="设置接口请求前缀"><a href="#设置接口请求前缀" class="headerlink" title="设置接口请求前缀"></a>设置接口请求前缀</h3><p>利用<code>node</code>环境变量来作判断，用来区分开发、测试、生产环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://dev.xxx.com&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://prod.xxx.com&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在本地调试的时候，还需要在<code>vue.config.js</code>文件中配置<code>devServer</code>实现代理转发，从而实现跨域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://dev.xxx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;/proxyApi&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="设置请求头与超时时间"><a href="#设置请求头与超时时间" class="headerlink" title="设置请求头与超时时间"></a>设置请求头与超时时间</h3><p>大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30000</span>,  <span class="comment">// 请求 30s 超时</span></span><br><span class="line">	  <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">post</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="封装请求方法"><a href="#封装请求方法" class="headerlink" title="封装请求方法"></a>封装请求方法</h3><p>先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">httpGet</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  params = &#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">      params</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post</span></span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">httpPost</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  data = &#123;&#125;,</span></span><br><span class="line"><span class="params">  params = &#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">          ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="comment">// 发送的数据</span></span><br><span class="line">      data,</span><br><span class="line">      <span class="comment">// url参数</span></span><br><span class="line">      params</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把封装的方法放在一个<code>api.js</code>文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; httpGet, httpPost &#125; <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getorglist</span> = (<span class="params">params = &#123;&#125;</span>) =&gt; <span class="title function_">httpGet</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;apps/api/org/list&#x27;</span>, params &#125;)</span><br></pre></td></tr></table></figure>

<p>页面中就能直接调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; getorglist &#125; <span class="keyword">from</span> <span class="string">&#x27;@/assets/js/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getorglist</span>(&#123; <span class="attr">id</span>: <span class="number">200</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样可以把<code>api</code>统一管理起来，以后维护修改只需要在<code>api.js</code>文件操作即可</p>
<h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><p>请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的</span></span><br><span class="line">    token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><p>响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">  <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">511</span>) &#123;</span><br><span class="line">      <span class="comment">// 未授权调取授权接口</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">510</span>) &#123;</span><br><span class="line">      <span class="comment">// 未登录跳转登录页</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 我们可以在这里对异常状态作统一处理</span></span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理请求失败的情况</span></span><br><span class="line">    <span class="comment">// 对不同返回码对相应处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>封装是编程中很有意义的手段，简单的<code>axios</code>封装，就可以让我们可以领略到它的魅力</li>
<li>封装 <code>axios</code> 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.html.cn/qa/vue-js/20544.html">https://www.html.cn/qa/vue-js/20544.html</a></li>
<li><a href="https://juejin.cn/post/6844904033782611976">https://juejin.cn/post/6844904033782611976</a></li>
<li><a href="https://juejin.cn/post/6844903801451708429">https://juejin.cn/post/6844903801451708429</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>双向数据绑定是什么</title>
    <url>/Vue/vue-bind/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/cef7dcc0-3ac9-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><p>双向绑定主要包含两个方向的数据同步：</p>
<ul>
<li>数据层（Model）到视图层（View）的绑定</li>
<li>视图层（View）到数据层（Model）的绑定</li>
</ul>
<h2 id="2-实现机制"><a href="#2-实现机制" class="headerlink" title="2. 实现机制"></a>2. 实现机制</h2><p>主要通过三个重要部分实现：</p>
<ol>
<li><strong>数据劫持（Observer）</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.defineProperty 实现数据劫持</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">addDep</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>依赖收集器（Dep）</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []; <span class="comment">// 存储所有的依赖</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addDep</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通知所有依赖更新</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> sub.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>观察者（Watcher）</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="comment">// 触发 getter，进行依赖收集</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>];</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 更新视图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3. 工作流程"></a>3. 工作流程</h2><ol>
<li><p><strong>初始化阶段</strong>：</p>
<ul>
<li>对数据进行劫持，设置 getter&#x2F;setter</li>
<li>编译模板，找到动态绑定的数据</li>
<li>创建 Watcher 实例</li>
</ul>
</li>
<li><p><strong>数据更新阶段</strong>：</p>
<ul>
<li>Model 更新：触发 setter → 通知依赖 → 更新 View</li>
<li>View 更新：触发事件 → 更新 Model → 触发 setter → 更新相关视图</li>
</ul>
</li>
</ol>
<h2 id="4-简单示例"><a href="#4-简单示例" class="headerlink" title="4. 简单示例"></a>4. 简单示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中：</p>
<ol>
<li>当输入框的值改变时，会触发 setter，更新数据并通知相关依赖更新视图</li>
<li>当 message 数据改变时，会通过依赖通知机制更新显示的文本</li>
</ol>
<h2 id="5-Vue-3-的改进"><a href="#5-Vue-3-的改进" class="headerlink" title="5. Vue 3 的改进"></a>5. Vue 3 的改进</h2><p>Vue 3 使用 Proxy 替代了 Object.defineProperty，提供了更好的性能和功能：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 3 的响应式实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      <span class="title function_">track</span>(target, key);</span><br><span class="line">      <span class="keyword">return</span> target[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">      <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要优势：</p>
<ul>
<li>可以监听数组变化</li>
<li>可以监听对象属性的添加和删除</li>
<li>支持 Map、Set 等数据结构</li>
<li>性能更好，不需要递归遍历对象</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>性能考虑：</p>
<ul>
<li>不要在大型数组或对象上使用双向绑定</li>
<li>使用 v-once 处理静态内容</li>
<li>合理使用计算属性和侦听器</li>
</ul>
</li>
<li><p>可能的问题：</p>
<ul>
<li>数据量大时可能会有性能问题</li>
<li>复杂的双向绑定可能导致数据流向难以追踪</li>
<li>需要考虑内存泄漏问题</li>
</ul>
</li>
</ol>
<p>理解双向绑定的原理对于更好地使用框架和优化应用性能非常重要。在实际开发中，我们通常不需要自己实现双向绑定，但了解其原理有助于我们更好地使用和调试应用。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中组件和插件有什么区别？</title>
    <url>/Vue/vue-components-plugin/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/683475e0-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<h2 id="一、组件是什么"><a href="#一、组件是什么" class="headerlink" title="一、组件是什么"></a>一、组件是什么</h2><p>回顾以前对组件的定义：</p>
<p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</p>
<p>组件的优势</p>
<ul>
<li><p>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</p>
</li>
<li><p>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</p>
</li>
<li><p>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</p>
</li>
</ul>
<h2 id="二、插件是什么"><a href="#二、插件是什么" class="headerlink" title="二、插件是什么"></a>二、插件是什么</h2><p>插件通常用来为 <code>Vue</code> 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p>
<ul>
<li>添加全局方法或者属性。如: <code>vue-custom-element</code></li>
<li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 <code>vue-touch</code></li>
<li>通过全局混入来添加一些组件选项。如<code> vue-router</code></li>
<li>添加 <code>Vue</code> 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li>
<li>一个库，提供自己的 <code>API</code>，同时提供上面提到的一个或多个功能。如<code> vue-router</code></li>
</ul>
<h2 id="三、两者的区别"><a href="#三、两者的区别" class="headerlink" title="三、两者的区别"></a>三、两者的区别</h2><p>两者的区别主要表现在以下几个方面：</p>
<ul>
<li>编写形式</li>
<li>注册形式</li>
<li>使用场景</li>
</ul>
<h3 id="编写形式"><a href="#编写形式" class="headerlink" title="编写形式"></a>编写形式</h3><h4 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h4><p>编写一个组件，可以有很多方式，我们最常见的就是<code>vue</code>单文件的这种格式，每一个<code>.vue</code>文件我们都可以看成是一个组件</p>
<p><code>vue</code>文件标准格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>我们还可以通过<code>template</code>属性来编写一个组件，如果组件内容多，我们可以在外部定义<code>template</code>组件内容，如果组件内容并不多，我们可直接写在<code>template</code>属性上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;testComponent&quot;</span>&gt;     <span class="comment">// 组件显示的内容</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>   </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;componentA&#x27;</span>,&#123; </span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#testComponent&#x27;</span>  </span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;component&lt;/div&gt;`</span>  <span class="comment">// 组件内容少可以通过这种形式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h4><p><code>vue</code>插件的实现应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">bind</span> (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="注册形式"><a href="#注册形式" class="headerlink" title="注册形式"></a>注册形式</h3><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><p><code>vue</code>组件注册主要分为全局注册与局部注册</p>
<p>全局注册通过<code>Vue.component</code>方法，第一个参数为组件的名称，第二个参数为传入的配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>局部注册只需在用到的地方通过<code>components</code>属性注册一个组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> component1 = &#123;...&#125; <span class="comment">// 定义一个组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">components</span>:&#123;</span><br><span class="line">		component1   <span class="comment">// 局部注册</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="插件注册"><a href="#插件注册" class="headerlink" title="插件注册"></a>插件注册</h4><p>插件的注册通过<code>Vue.use()</code>的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(插件名字,&#123; <span class="comment">/* ... */</span>&#125; )</span><br></pre></td></tr></table></figure>

<p>注意的是：</p>
<p>注册插件的时候，需要在调用 <code>new Vue()</code> 启动应用之前完成</p>
<p><code>Vue.use</code>会自动阻止多次注册相同插件，只会注册一次</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>具体的其实在插件是什么章节已经表述了，这里在总结一下</p>
<p>组件 <code>(Component)</code> 是用来构成你的 <code>App</code> 的业务模块，它的目标是 <code>App.vue</code></p>
<p>插件 <code>(Plugin)</code> 是用来增强你的技术栈的功能模块，它的目标是 <code>Vue</code> 本身</p>
<p>简单来说，插件就是指对<code>Vue</code>的功能的增强或补充</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件之间的通信方式都有哪些？</title>
    <url>/Vue/vue-communication/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/7de50d20-3aca-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、组件间通信的概念"><a href="#一、组件间通信的概念" class="headerlink" title="一、组件间通信的概念"></a>一、组件间通信的概念</h2><p>开始之前，我们把<strong>组件间通信</strong>这个词进行拆分</p>
<ul>
<li>组件</li>
<li>通信</li>
</ul>
<p>都知道组件是<code>vue</code>最强大的功能之一，<code>vue</code>中每一个<code>.vue</code>我们都可以视之为一个组件通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信<strong>组件间通信</strong>即指组件(<code>.vue</code>)通过某种方式来传递信息以达到某个目的举个栗子我们在使用<code>UI</code>框架中的<code>table</code>组件，可能会往<code>table</code>组件中传入某些数据，这个本质就形成了组件之间的通信</p>
<h2 id="二、组件间通信解决了什么"><a href="#二、组件间通信解决了什么" class="headerlink" title="二、组件间通信解决了什么"></a>二、组件间通信解决了什么</h2><p>在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式从上面这段话，我们可以看到通信的本质是信息同步，共享回到<code>vue</code>中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统</p>
<h2 id="二、组件间通信的分类"><a href="#二、组件间通信的分类" class="headerlink" title="二、组件间通信的分类"></a>二、组件间通信的分类</h2><p>组件间通信的分类可以分成以下</p>
<ul>
<li>父子组件之间的通信</li>
<li>兄弟组件之间的通信</li>
<li>祖孙与后代组件之间的通信</li>
<li>非关系组件间之间的通信</li>
</ul>
<p>关系图:</p>
<p> <img src="https://static.vue-js.com/85b92400-3aca-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="三、组件间通信的方案"><a href="#三、组件间通信的方案" class="headerlink" title="三、组件间通信的方案"></a>三、组件间通信的方案</h2><p>整理<code>vue</code>中8种常规的通信方案</p>
<ol>
<li>通过 props 传递</li>
<li>通过 $emit 触发自定义事件</li>
<li>使用 ref</li>
<li>EventBus</li>
<li>$parent 或$root</li>
<li>attrs 与 listeners</li>
<li>Provide 与 Inject</li>
<li>Vuex</li>
</ol>
<h3 id="props传递数据"><a href="#props传递数据" class="headerlink" title="props传递数据"></a>props传递数据</h3><p> <img src="https://static.vue-js.com/8f80a670-3aca-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li>适用场景：父组件传递数据给子组件</li>
<li>子组件设置<code>props</code>属性，定义接收父组件传递过来的参数</li>
<li>父组件在使用子组件标签中通过字面量来传递值</li>
</ul>
<p><code>Children.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;  </span><br><span class="line">    <span class="comment">// 字符串形式  </span></span><br><span class="line"> <span class="attr">name</span>:<span class="title class_">String</span> <span class="comment">// 接收的类型参数  </span></span><br><span class="line">    <span class="comment">// 对象形式  </span></span><br><span class="line">    <span class="attr">age</span>:&#123;    </span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">// 接收的类型为数值  </span></span><br><span class="line">        <span class="attr">defaule</span>:<span class="number">18</span>,  <span class="comment">// 默认值为18  </span></span><br><span class="line">       <span class="attr">require</span>:<span class="literal">true</span> <span class="comment">// age属性必须传递  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><code>Father.vue</code>组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> name=<span class="string">&quot;jack&quot;</span> age=<span class="number">18</span> /&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="emit-触发自定义事件"><a href="#emit-触发自定义事件" class="headerlink" title="$emit 触发自定义事件"></a>$emit 触发自定义事件</h3><ul>
<li>适用场景：子组件传递数据给父组件</li>
<li>子组件通过<code>$emit触发</code>自定义事件，<code>$emit</code>第二个参数为传递的数值</li>
<li>父组件绑定监听器获取到子组件传递过来的参数</li>
</ul>
<p><code>Chilfen.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>, good)  </span><br></pre></td></tr></table></figure>

<p><code>Father.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> @add=<span class="string">&quot;cartAdd($event)&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>父组件在使用子组件的时候设置<code>ref</code></li>
<li>父组件通过设置子组件<code>ref</code>来获取数据</li>
</ul>
<p>父组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> ref=<span class="string">&quot;foo&quot;</span> /&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">foo</span>  <span class="comment">// 获取子组件实例，通过子组件实例我们就能拿到对应的数据  </span></span><br></pre></td></tr></table></figure>

<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><ul>
<li>使用场景：兄弟组件传值</li>
<li>创建一个中央事件总线<code>EventBus</code></li>
<li>兄弟组件通过<code>$emit</code>触发自定义事件，<code>$emit</code>第二个参数为传递的数值</li>
<li>另一个兄弟组件通过<code>$on</code>监听自定义事件</li>
</ul>
<p><code>Bus.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个中央时间总线类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = &#123;&#125;;   <span class="comment">// 存放事件的名字  </span></span><br><span class="line">  &#125;  </span><br><span class="line">  $on(name, fn) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] = <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] || [];  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">push</span>(fn);  </span><br><span class="line">  &#125;  </span><br><span class="line">  $emit(name, args) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">callbacks</span>[name]) &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(args));  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// main.js  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Bus</span>() <span class="comment">// 将$bus挂载到vue实例的原型上  </span></span><br><span class="line"><span class="comment">// 另一种方式  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>() <span class="comment">// Vue已经实现了Bus的功能  </span></span><br></pre></td></tr></table></figure>

<p><code>Children1.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;foo&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<p><code>Children2.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handle</span>)  </span><br></pre></td></tr></table></figure>

<h3 id="parent-或-root"><a href="#parent-或-root" class="headerlink" title="$parent 或$ root"></a>$parent 或$ root</h3><ul>
<li>通过共同祖辈<code>$parent</code>或者<code>$root</code>搭建通信桥连</li>
</ul>
<p>兄弟组件</p>
<p><code>this.$parent.on(&#39;add&#39;,this.add)   </code></p>
<p>另一个兄弟组件</p>
<p><code>this.$parent.emit(&#39;add&#39;)   </code></p>
<h3 id="attrs-与-listeners"><a href="#attrs-与-listeners" class="headerlink" title="$attrs  与$ listeners"></a>$attrs  与$ listeners</h3><ul>
<li>适用场景：祖先传递数据给子孙</li>
<li>设置批量向下传属性<code>$attrs</code>和 <code>$listeners</code></li>
<li>包含了父级作用域中不作为 <code>prop</code> 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。</li>
<li>可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传⼊内部组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child：并未在props中声明foo  </span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.<span class="property">foo</span>&#125;&#125;&lt;/p&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// parent  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">foo</span>=<span class="string">&quot;foo&quot;</span>/&gt;</span></span>  </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给Grandson隔代传值，communication/index.vue  </span></span><br><span class="line">&lt;<span class="title class_">Child2</span> msg=<span class="string">&quot;lalala&quot;</span> @some-event=<span class="string">&quot;onSomeEvent&quot;</span>&gt;&lt;/<span class="title class_">Child2</span>&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Child2做展开  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson</span>&gt;</span></span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Grandson使⽤  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;some-event&#x27;, &#x27;msg from grandson&#x27;)&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">&#123;&#123;msg&#125;&#125;  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure>

<h3 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h3><ul>
<li>在祖先组件定义<code>provide</code>属性，返回传递的值</li>
<li>在后代组件通过<code>inject</code>接收组件传递过来的值</li>
</ul>
<p>祖先组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">provide</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&#x27;foo&#x27;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>后代组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;foo&#x27;</span>] <span class="comment">// 获取到祖先组件传递过来的值  </span></span><br></pre></td></tr></table></figure>

<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a><code>vuex</code></h3><ul>
<li><p>适用场景: 复杂关系的组件数据传递</p>
</li>
<li><p><code>Vuex</code>作用相当于一个用来存储共享变量的容器<br> <img src="https://static.vue-js.com/fa207cd0-3aca-11eb-ab90-d9ae814b240d.png"></p>
</li>
<li><p><code>state</code>用来存放共享变量的地方</p>
</li>
<li><p><code>getter</code>，可以增加一个<code>getter</code>派生状态，(相当于<code>store</code>中的计算属性），用来获得共享变量的值</p>
</li>
<li><p><code>mutations</code>用来存放修改<code>state</code>的方法。</p>
</li>
<li><p><code>actions</code>也是用来存放修改state的方法，不过<code>action</code>是在<code>mutations</code>的基础上进行。常用来做一些异步操作</p>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>父子关系的组件数据传递选择 <code>props</code>  与 <code>$emit</code>进行传递，也可选择<code>ref</code></li>
<li>兄弟关系的组件数据传递可选择<code>$bus</code>，其次可以选择<code>$parent</code>进行传递</li>
<li>祖先与后代组件数据传递可选择<code>attrs</code>与<code>listeners</code>或者 <code>Provide</code>与 <code>Inject</code></li>
<li>复杂关系的组件数据传递可以通过<code>vuex</code>存放共享的变量</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844903990052782094#heading-0">https://juejin.cn/post/6844903990052782094#heading-0</a></li>
<li><a href="https://zh.wikipedia.org/wiki//%E9/%80/%9A/%E4/%BF/%A1">https://zh.wikipedia.org/wiki/\%E9\%80\%9A\%E4\%BF\%A1</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
<p>面试官VUE系列总进度：5／33</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484101&idx=1&sn=83b0983f0fca7d7c556e4cb0bff8c9b8&chksm=fc10c093cb674985ef3bd2966f66fc28c5eb70b0037e4be1af4bf54fb6fa9571985abd31d52f&scene=21#wechat_redirect">面试官：说说你对vue的理解?</a>  </p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484119&idx=1&sn=d171b28a00d42549d279498944a98519&chksm=fc10c081cb6749976814aaeda6a6433db418223cec57edda7e15b9e5a0ca69ad549655639c61&scene=21#wechat_redirect">面试官：说说你对SPA（单页应用）的理解?</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484167&idx=1&sn=7b00b4333ab2722f25f12586b70667ca&chksm=fc10c151cb6748476008dab2f4e6c6264f5d19678305955c85cec1b619e56e8f7457b7357fb9&scene=21#wechat_redirect">面试官：说说你对双向绑定的理解?</a>  </p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484176&idx=1&sn=5623421ed2678046ed9e438aadf6e26f&chksm=fc10c146cb67485015f24f7e9f5862c4c685fc33485fe30e1b375a534b4031978439c554e0c0&scene=21#wechat_redirect">面试官：说说你对Vue生命周期的理解?</a>  </p>
<p> <img src="https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中你是如何解决跨域的呢？</title>
    <url>/Vue/vue-cors/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/db3045b0-4e31-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、跨域是什么"><a href="#一、跨域是什么" class="headerlink" title="一、跨域是什么"></a>一、跨域是什么</h2><p>跨域本质是浏览器基于<strong>同源策略</strong>的一种安全手段</p>
<p>同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能</p>
<p>所谓同源（即指在同一个域）具有以下三个相同点</p>
<ul>
<li>协议相同（protocol）</li>
<li>主机相同（host）</li>
<li>端口相同（port）</li>
</ul>
<p>反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域</p>
<blockquote>
<p>一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。</p>
</blockquote>
<h2 id="二、如何解决"><a href="#二、如何解决" class="headerlink" title="二、如何解决"></a>二、如何解决</h2><p>解决跨域的方法有很多，下面列举了三种：</p>
<ul>
<li>JSONP</li>
<li>CORS</li>
<li>Proxy</li>
</ul>
<p>而在<code>vue</code>项目中，我们主要针对<code>CORS</code>或<code>Proxy</code>这两种方案进行展开</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS （Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应</p>
<p><code>CORS</code> 实现起来非常方便，只需要增加一些 <code>HTTP</code> 头，让服务器能声明允许的访问来源</p>
<p>只要后端实现了 <code>CORS</code>，就实现了跨域</p>
<p> <img src="https://static.vue-js.com/140deb80-4e32-11eb-ab90-d9ae814b240d.png"></p>
<p>以<code> koa</code>框架举例</p>
<p>添加中间件，直接设置<code>Access-Control-Allow-Origin</code>响应头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next)=&gt; &#123;</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>);</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">method</span> == <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="number">200</span>; </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ps: <code>Access-Control-Allow-Origin</code> 设置为*其实意义不大，可以说是形同虚设，实际应用中，上线前我们会将<code>Access-Control-Allow-Origin</code> 值设为我们目标<code>host</code></p>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击</p>
<p><strong>方案一</strong></p>
<p>如果是通过<code>vue-cli</code>脚手架工具搭建项目，我们可以通过<code>webpack</code>为我们起一个本地服务器作为请求的代理对象</p>
<p>通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果web应用和接口服务器不在一起仍会跨域</p>
<p>在<code>vue.config.js</code>文件，新增以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">amodule.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8084</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">// vue项目启动时自动打开浏览器</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123; <span class="comment">// &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;http://xxx.xxx.xx.xx:8080&quot;</span>, <span class="comment">//目标地址，一般是指后台服务器地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123; <span class="comment">// pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替</span></span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&quot;&quot;</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>axios</code>发送请求中，配置请求的根路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure>



<p><strong>方案二</strong></p>
<p>此外，还可通过服务端实现代理请求转发</p>
<p>以<code>express</code>框架为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname + <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="title function_">proxy</span>(&#123; <span class="attr">target</span>: <span class="string">&#x27;http://localhost:4000&#x27;</span>, <span class="attr">changeOrigin</span>: <span class="literal">false</span></span><br><span class="line">                      &#125;));</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app</span><br></pre></td></tr></table></figure>



<p><strong>方案三</strong></p>
<p>通过配置<code>nginx</code>实现代理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen    <span class="number">80</span>;</span><br><span class="line">    # server_name www.<span class="property">josephxia</span>.<span class="property">com</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root  /<span class="keyword">var</span>/www/html;</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">        try_files $uri $uri/ /index.<span class="property">html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass  <span class="attr">http</span>:<span class="comment">//127.0.0.1:3000;</span></span><br><span class="line">        proxy_redirect   off;</span><br><span class="line">        proxy_set_header  <span class="title class_">Host</span>       $host;</span><br><span class="line">        proxy_set_header  X-<span class="title class_">Real</span>-<span class="variable constant_">IP</span>     $remote_addr;</span><br><span class="line">        proxy_set_header  X-<span class="title class_">Forwarded</span>-<span class="title class_">For</span>  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么data属性是一个函数而不是一个对象？</title>
    <url>/Vue/vue-data/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/83e51560-3acc-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、实例和组件定义data的区别"><a href="#一、实例和组件定义data的区别" class="headerlink" title="一、实例和组件定义data的区别"></a>一、实例和组件定义data的区别</h2><p><code>vue</code>实例的时候定义<code>data</code>属性既可以是一个对象，也可以是一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="comment">// 对象格式</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 函数格式</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">             <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件中定义<code>data</code>属性，只能是一个函数</p>
<p>如果为组件<code>data</code>直接定义为一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component1&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;组件&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>则会得到警告信息</p>
<p> <img src="https://static.vue-js.com/8e6fc0c0-3acc-11eb-ab90-d9ae814b240d.png"></p>
<p>警告说明：返回的<code>data</code>应该是一个函数在每一个组件实例中</p>
<h2 id="二、组件data定义函数与对象的区别"><a href="#二、组件data定义函数与对象的区别" class="headerlink" title="二、组件data定义函数与对象的区别"></a>二、组件data定义函数与对象的区别</h2><p>上面讲到组件<code>data</code>必须是一个函数，不知道大家有没有思考过这是为什么呢？</p>
<p>在我们定义好一个组件的时候，<code>vue</code>最终都会通过<code>Vue.extend()</code>构成组件实例</p>
<p>这里我们模仿组件构造函数，定义<code>data</code>属性，采用对象的形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>)&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">data</span> = &#123;</span><br><span class="line">	count : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建两个组件实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const componentA = new Component()</span><br><span class="line">const componentB = new Component()</span><br></pre></td></tr></table></figure>

<p>修改<code>componentA</code>组件<code>data</code>属性的值，<code>componentB</code>中的值也发生了改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(componentB.<span class="property">data</span>.<span class="property">count</span>)  <span class="comment">// 0</span></span><br><span class="line">componentA.<span class="property">data</span>.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(componentB.<span class="property">data</span>.<span class="property">count</span>)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>产生这样的原因这是两者共用了同一个内存地址，<code>componentA</code>修改的内容，同样对<code>componentB</code>产生了影响</p>
<p>如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">data</span> = <span class="variable language_">this</span>.<span class="title function_">data</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">data</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">   		count : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>componentA</code>组件<code>data</code>属性的值，<code>componentB</code>中的值不受影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(componentB.<span class="property">data</span>.<span class="property">count</span>)  <span class="comment">// 0</span></span><br><span class="line">componentA.<span class="property">data</span>.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(componentB.<span class="property">data</span>.<span class="property">count</span>)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p><code>vue</code>组件可能会有很多个实例，采用函数返回一个全新<code>data</code>形式，使每个实例对象的数据不会受到其他实例对象数据的污染</p>
<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p>首先可以看看<code>vue</code>初始化<code>data</code>的代码，<code>data</code>的定义可以是函数也可以是对象</p>
<p>源码位置：<code>/vue-dev/src/core/instance/state.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span> (<span class="params">vm: Component</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span></span><br><span class="line">  data = vm.<span class="property">_data</span> = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    ? <span class="title function_">getData</span>(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>data</code>既能是<code>object</code>也能是<code>function</code>，那为什么还会出现上文警告呢？</p>
<p>别急，继续看下文</p>
<p>组件在创建的时候，会进行选项的合并</p>
<p>源码位置：<code>/vue-dev/src/core/util/options.js</code></p>
<p>自定义组件会进入<code>mergeOptions</code>进行选项合并</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options?: <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// merge options</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options.<span class="property">_isComponent</span>) &#123;</span><br><span class="line">      <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">      <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">      <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">      <span class="title function_">initInternalComponent</span>(vm, options)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.<span class="property">$options</span> = <span class="title function_">mergeOptions</span>(</span><br><span class="line">        <span class="title function_">resolveConstructorOptions</span>(vm.<span class="property">constructor</span>),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>定义<code>data</code>会进行数据校验</p>
<p>源码位置：<code>/vue-dev/src/core/instance/init.js</code></p>
<p>这时候<code>vm</code>实例为<code>undefined</code>，进入<code>if</code>判断，若<code>data</code>类型不是<code>function</code>，则出现警告提示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.<span class="property">data</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parentVal: any,</span></span><br><span class="line"><span class="params">  childVal: any,</span></span><br><span class="line"><span class="params">  vm?: Component</span></span><br><span class="line"><span class="params"></span>): ?<span class="title class_">Function</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childVal &amp;&amp; <span class="keyword">typeof</span> childVal !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">&#x27;The &quot;data&quot; option should be a function &#x27;</span> +</span><br><span class="line">            <span class="string">&quot;that returns a per-instance value in component &quot;</span> +</span><br><span class="line">            <span class="string">&quot;definitions.&quot;</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> parentVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeDataOrFn</span>(parentVal, childVal);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">mergeDataOrFn</span>(parentVal, childVal, vm);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h3><ul>
<li>根实例对象<code>data</code>可以是对象也可以是函数（根实例是单例），不会产生数据污染情况</li>
<li>组件实例对象<code>data</code>必须为函数，目的是为了防止多个组件实例对象之间共用一个<code>data</code>，产生数据污染。采用函数的形式，<code>initData</code>时会将其作为工厂函数都会返回全新<code>data</code>对象</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>动态给vue的data添加一个新的属性时会发生什么？怎样解决？</title>
    <url>/Vue/vue-data-object-add-attrs/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/a502dde0-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<h2 id="一、直接添加属性的问题"><a href="#一、直接添加属性的问题" class="headerlink" title="一、直接添加属性的问题"></a>一、直接添加属性的问题</h2><p>我们从一个例子开始</p>
<p>定义一个<code>p</code>标签，通过<code>v-for</code>指令进行遍历</p>
<p>然后给<code>botton</code>标签绑定点击事件，我们预期点击按钮时，数据新增一个属性，界面也 新增一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addProperty&quot;</span>&gt;</span>动态添加新属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实例化一个<code>vue</code>实例，定义<code>data</code>属性和<code>methods</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">   	<span class="attr">data</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       	<span class="attr">item</span>:&#123;</span><br><span class="line">            <span class="attr">oldProperty</span>:<span class="string">&quot;旧属性&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">addProperty</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">newProperty</span> = <span class="string">&quot;新属性&quot;</span>  <span class="comment">// 为items添加新属性</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">items</span>)  <span class="comment">// 输出带有newProperty的items</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>点击按钮，发现结果不及预期，数据虽然更新了（<code>console</code>打印出了新属性），但页面并没有更新</p>
<h2 id="二、原理分析"><a href="#二、原理分析" class="headerlink" title="二、原理分析"></a>二、原理分析</h2><p>为什么产生上面的情况呢？</p>
<p>下面来分析一下</p>
<p><code>vue2</code>是用过<code>Object.defineProperty</code>实现数据响应式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;foo&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get foo:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set foo:<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">                val = newVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们访问<code>foo</code>属性或者设置<code>foo</code>值的时候都能够触发<code>setter</code>与<code>getter</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">foo</span>   </span><br><span class="line">obj.<span class="property">foo</span> = <span class="string">&#x27;new&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但是我们为<code>obj</code>添加新属性的时候，却无法触发事件属性的拦截</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">bar</span>  = <span class="string">&#x27;新属性&#x27;</span></span><br></pre></td></tr></table></figure>

<p>原因是一开始<code>obj</code>的<code>foo</code>属性被设成了响应式数据，而<code>bar</code>是后面新增的属性，并没有通过<code>Object.defineProperty</code>设置成响应式数据</p>
<h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p><code>Vue</code> 不允许在已经创建的实例上动态添加新的响应式属性</p>
<p>若想实现数据与视图同步更新，可采取下面三种解决方案：</p>
<ul>
<li>Vue.set()</li>
<li>Object.assign()</li>
<li>$forcecUpdated()</li>
</ul>
<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set()"></a>Vue.set()</h3><p>Vue.set( target, propertyName&#x2F;index, value )</p>
<p>参数</p>
<ul>
<li><code>&#123;Object | Array&#125; target</code></li>
<li><code>&#123;string | number&#125; propertyName/index</code></li>
<li><code>&#123;any&#125; value</code></li>
</ul>
<p>返回值：设置的值</p>
<p>通过<code>Vue.set</code>向响应式对象中添加一个<code>property</code>，并确保这个新 <code>property </code>同样是响应式的，且触发视图更新</p>
<p>关于<code>Vue.set</code>源码（省略了很多与本节不相关的代码）</p>
<p>源码位置：<code>src\core\observer\index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">set</span> (<span class="params">target: <span class="built_in">Array</span>&lt;any&gt; | <span class="built_in">Object</span>, key: any, val: any</span>): any &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">defineReactive</span>(ob.<span class="property">value</span>, key, val)</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里无非再次调用<code>defineReactive</code>方法，实现新增属性的响应式</p>
<p>关于<code>defineReactive</code>方法，内部还是通过<code>Object.defineProperty</code>实现属性拦截</p>
<p>大致代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">                val = newVal</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>直接使用<code>Object.assign()</code>添加到对象的新属性不会触发更新</p>
<p>应创建一个新的对象，合并原对象和混入对象的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">someObject</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,<span class="variable language_">this</span>.<span class="property">someObject</span>,&#123;<span class="attr">newProperty1</span>:<span class="number">1</span>,<span class="attr">newProperty2</span>:<span class="number">2</span> ...&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="$forceUpdate"></a>$forceUpdate</h3><p>如果你发现你自己需要在 <code>Vue </code>中做一次强制更新，99.9% 的情况，是你在某个地方做错了事</p>
<p><code>$forceUpdate</code>迫使<code> Vue</code> 实例重新渲染</p>
<p>PS：仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><p>如果为对象添加少量的新属性，可以直接采用<code>Vue.set()</code></p>
</li>
<li><p>如果需要为新对象添加大量的新属性，则通过<code>Object.assign()</code>创建新对象</p>
</li>
<li><p>如果你实在不知道怎么操作时，可采取<code>$forceUpdate()</code>进行强制刷新 (不建议)</p>
</li>
</ul>
<p>PS：<code>vue3</code>是用过<code>proxy</code>实现数据响应式的，直接动态添加新属性仍可以实现数据响应式</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://cn.vuejs.org/v2/api/#Vue-set">https://cn.vuejs.org/v2/api/#Vue-set</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>你有写过自定义指令吗？自定义指令的应用场景有哪些？</title>
    <url>/Vue/vue-directive/</url>
    <content><![CDATA[<p>  <img src="https://static.vue-js.com/bd85a970-4345-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、什么是指令"><a href="#一、什么是指令" class="headerlink" title="一、什么是指令"></a>一、什么是指令</h2><p>开始之前我们先学习一下指令系统这个词</p>
<p><strong>指令系统</strong>是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力</p>
<p>在<code>vue</code>中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统</p>
<p>我们看到的<code>v- </code>开头的行内属性，都是指令，不同的指令可以完成或实现不同的功能</p>
<p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，<code>Vue</code> 也允许注册自定义指令</p>
<p>指令使用的几种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会实例化一个指令，但这个指令没有参数 </span></span><br><span class="line"><span class="string">`v-xxx`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 将值传到指令中</span></span><br><span class="line"><span class="string">`v-xxx=&quot;value&quot;`</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 将字符串传入到指令中，如`v-html=&quot;&#x27;&lt;p&gt;内容&lt;/p&gt;&#x27;&quot;`</span></span><br><span class="line"><span class="string">`v-xxx=&quot;&#x27;string&#x27;&quot;`</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 传参数（`arg`），如`v-bind:class=&quot;className&quot;`</span></span><br><span class="line"><span class="string">`v-xxx:arg=&quot;value&quot;`</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 使用修饰符（`modifier`）</span></span><br><span class="line"><span class="string">`v-xxx:arg.modifier=&quot;value&quot;`</span> </span><br></pre></td></tr></table></figure>

<h3 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h3><p>注册一个自定义指令有全局注册与局部注册</p>
<p>全局注册主要是通过<code>Vue.directive</code>方法进行注册</p>
<p><code>Vue.directive</code>第一个参数是指令的名字（不需要写上<code>v-</code>前缀），第二个参数可以是对象数据，也可以是一个指令函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.<span class="title function_">focus</span>()  <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>局部注册通过在组件<code>options</code>选项中设置<code>directive</code>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">      el.<span class="title function_">focus</span>() <span class="comment">// 页面加载完成之后自动让输入框获取到焦点的小功能</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后你可以在模板中任何元素上使用新的 <code>v-focus</code> property，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input v-focus /&gt;</span><br></pre></td></tr></table></figure>

<p>自定义指令也像组件那样存在钩子函数：</p>
<ul>
<li><p><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</p>
</li>
<li><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</p>
</li>
<li><p><code>update</code>：所在组件的 <code>VNode</code> 更新时调用，但是可能发生在其子 <code>VNode</code> 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新</p>
</li>
<li><p><code>componentUpdated</code>：指令所在组件的 <code>VNode</code> 及其子 <code>VNode</code> 全部更新后调用</p>
</li>
<li><p><code>unbind</code>：只调用一次，指令与元素解绑时调用</p>
</li>
</ul>
<p>所有的钩子函数的参数都有以下：</p>
<ul>
<li><code>el</code>：指令所绑定的元素，可以用来直接操作 <code>DOM</code></li>
<li><code>binding</code>：一个对象，包含以下 <code>property</code>：<ul>
<li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li>
<li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li>
<li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li>
<li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code></li>
</ul>
</li>
<li><code>vnode</code>：<code>Vue</code> 编译生成的虚拟节点</li>
<li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用</li>
</ul>
<blockquote>
<p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;demo&#x27;</span>, <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">color</span>) <span class="comment">// &quot;white&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>.<span class="property">text</span>)  <span class="comment">// &quot;hello!&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>使用自定义指令可以满足我们日常一些场景，这里给出几个自定义指令的案例：</p>
<ul>
<li>表单防止重复提交</li>
<li>图片懒加载</li>
<li>一键 Copy的功能</li>
</ul>
<h3 id="表单防止重复提交"><a href="#表单防止重复提交" class="headerlink" title="表单防止重复提交"></a>表单防止重复提交</h3><p>表单防止重复提交这种情况设置一个<code>v-throttle</code>自定义指令来实现</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.设置v-throttle自定义指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;throttle&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> throttleTime = binding.<span class="property">value</span>; <span class="comment">// 节流时间</span></span><br><span class="line">    <span class="keyword">if</span> (!throttleTime) &#123; <span class="comment">// 用户若不设置节流时间，则默认2s</span></span><br><span class="line">      throttleTime = <span class="number">2000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> cbFun;</span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!cbFun) &#123; <span class="comment">// 第一次执行</span></span><br><span class="line">        cbFun = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          cbFun = <span class="literal">null</span>;</span><br><span class="line">        &#125;, throttleTime);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        event &amp;&amp; event.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2.为button标签设置v-throttle自定义指令</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span> <span class="attr">v-throttle</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>设置一个<code>v-lazy</code>自定义指令完成图片懒加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazyLoad</span> = &#123;</span><br><span class="line">    <span class="comment">// install方法</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue,options</span>)&#123;</span><br><span class="line">    	  <span class="comment">// 代替图片的loading图</span></span><br><span class="line">        <span class="keyword">let</span> defaultSrc = options.<span class="property">default</span>;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;lazy&#x27;</span>,&#123;</span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">                <span class="title class_">LazyLoad</span>.<span class="title function_">init</span>(el,binding.<span class="property">value</span>,defaultSrc);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;</span><br><span class="line">                <span class="comment">// 兼容处理</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&#x27;IntersectionObserver&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)&#123;</span><br><span class="line">                    <span class="title class_">LazyLoad</span>.<span class="title function_">observe</span>(el);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title class_">LazyLoad</span>.<span class="title function_">listenerScroll</span>(el);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params">el,val,def</span>)&#123;</span><br><span class="line">        <span class="comment">// data-src 储存真实src</span></span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>,val);</span><br><span class="line">        <span class="comment">// 设置src为loading图</span></span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>,def);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 利用IntersectionObserver监听el</span></span><br><span class="line">    <span class="title function_">observe</span>(<span class="params">el</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> io = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> realSrc = el.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">            <span class="keyword">if</span>(entries[<span class="number">0</span>].<span class="property">isIntersecting</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(realSrc)&#123;</span><br><span class="line">                    el.<span class="property">src</span> = realSrc;</span><br><span class="line">                    el.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        io.<span class="title function_">observe</span>(el);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听scroll事件</span></span><br><span class="line">    <span class="title function_">listenerScroll</span>(<span class="params">el</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> handler = <span class="title class_">LazyLoad</span>.<span class="title function_">throttle</span>(<span class="title class_">LazyLoad</span>.<span class="property">load</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="title class_">LazyLoad</span>.<span class="title function_">load</span>(el);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handler</span>(el);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载真实图片</span></span><br><span class="line">    <span class="title function_">load</span>(<span class="params">el</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> windowHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">        <span class="keyword">let</span> elTop = el.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line">        <span class="keyword">let</span> elBtm = el.<span class="title function_">getBoundingClientRect</span>().<span class="property">bottom</span>;</span><br><span class="line">        <span class="keyword">let</span> realSrc = el.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">        <span class="keyword">if</span>(elTop - windowHeight&lt;<span class="number">0</span>&amp;&amp;elBtm &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(realSrc)&#123;</span><br><span class="line">                el.<span class="property">src</span> = realSrc;</span><br><span class="line">                el.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 节流</span></span><br><span class="line">    <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> timer; </span><br><span class="line">        <span class="keyword">let</span> prevTime;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> currTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">if</span>(!prevTime) prevTime = currTime;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(currTime - prevTime &gt; delay)&#123;</span><br><span class="line">                prevTime = currTime;</span><br><span class="line">                fn.<span class="title function_">apply</span>(context,args);</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                prevTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">                fn.<span class="title function_">apply</span>(context,args);</span><br><span class="line">            &#125;,delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LazyLoad</span>;</span><br></pre></td></tr></table></figure>



<h3 id="一键-Copy的功能"><a href="#一键-Copy的功能" class="headerlink" title="一键 Copy的功能"></a>一键 Copy的功能</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ant-design-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vCopy = &#123; <span class="comment">//</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    bind 钩子函数，第一次绑定时调用，可以在这里做初始化设置</span></span><br><span class="line"><span class="comment">    el: 作用的 dom 对象</span></span><br><span class="line"><span class="comment">    value: 传给指令的值，也就是我们要 copy 的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    el.<span class="property">$value</span> = value; <span class="comment">// 用一个全局属性来存传进来的值，因为这个值在别的钩子函数里还会用到</span></span><br><span class="line">    el.<span class="property">handler</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el.<span class="property">$value</span>) &#123;</span><br><span class="line">      <span class="comment">// 值为空的时候，给出提示，我这里的提示是用的 ant-design-vue 的提示，你们随意</span></span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;无复制内容&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 动态创建 textarea 标签</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line">      <span class="comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span></span><br><span class="line">      textarea.<span class="property">readOnly</span> = <span class="string">&#x27;readonly&#x27;</span>;</span><br><span class="line">      textarea.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">      textarea.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;-9999px&#x27;</span>;</span><br><span class="line">      <span class="comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span></span><br><span class="line">      textarea.<span class="property">value</span> = el.<span class="property">$value</span>;</span><br><span class="line">      <span class="comment">// 将 textarea 插入到 body 中</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textarea);</span><br><span class="line">      <span class="comment">// 选中值并复制</span></span><br><span class="line">      textarea.<span class="title function_">select</span>();</span><br><span class="line">      <span class="comment">// textarea.setSelectionRange(0, textarea.value.length);</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;Copy&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">success</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textarea);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 绑定点击事件，就是所谓的一键 copy 啦</span></span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, el.<span class="property">handler</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传进来的值更新的时候触发</span></span><br><span class="line">  <span class="title function_">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    el.<span class="property">$value</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指令与元素解绑的时候，移除事件绑定</span></span><br><span class="line">  <span class="title function_">unbind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    el.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, el.<span class="property">handler</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vCopy;</span><br></pre></td></tr></table></figure>

<p>关于自定义指令还有很多应用场景，如：拖拽指令、页面水印、权限校验等等应用场景</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
<li><a href="https://juejin.cn/post/6844904197448531975#heading-5">https://juejin.cn/post/6844904197448531975#heading-5</a></li>
<li><a href="https://www.cnblogs.com/chenwenhao/p/11924161.html#_label2">https://www.cnblogs.com/chenwenhao/p/11924161.html#_label2</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>你是怎么处理vue项目中的错误的？</title>
    <url>/Vue/vue-error/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/3cafe4f0-4fd9-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、错误类型"><a href="#一、错误类型" class="headerlink" title="一、错误类型"></a>一、错误类型</h2><p>任何一个框架，对于错误的处理都是一种必备的能力</p>
<p>在<code>Vue</code> 中，则是定义了一套对应的错误处理规则给到使用者，且在源代码级别，对部分必要的过程做了一定的错误处理。</p>
<p>主要的错误来源包括：</p>
<ul>
<li>后端接口错误</li>
<li>代码中本身逻辑错误</li>
</ul>
<h2 id="二、如何处理"><a href="#二、如何处理" class="headerlink" title="二、如何处理"></a>二、如何处理</h2><h3 id="后端接口错误"><a href="#后端接口错误" class="headerlink" title="后端接口错误"></a>后端接口错误</h3><p>通过<code>axios</code>的<code>interceptor</code>实现网络请求的<code>response</code>先进行一层拦截</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apiClient.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> == <span class="number">401</span>) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h3 id="代码逻辑问题"><a href="#代码逻辑问题" class="headerlink" title="代码逻辑问题"></a>代码逻辑问题</h3><h4 id="全局设置错误处理"><a href="#全局设置错误处理" class="headerlink" title="全局设置错误处理"></a>全局设置错误处理</h4><p>设置全局错误处理函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="keyword">function</span> (<span class="params">err, vm, info</span>) &#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">  <span class="comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>errorHandler</code>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 <code>Vue</code> 实例</p>
<p>不过值得注意的是，在不同<code> Vue</code> 版本中，该全局 <code>API</code> 作用的范围会有所不同：</p>
<blockquote>
<p>从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 <code>undefined</code> 时，被捕获的错误会通过 <code>console.error</code> 输出而避免应用崩</p>
</blockquote>
<blockquote>
<p>从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了</p>
</blockquote>
<blockquote>
<p>从 2.6.0 起，这个钩子也会捕获 <code>v-on</code> DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理</p>
</blockquote>
<h4 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h4><p><code>errorCaptured</code>是 2.5.0 新增的一个生命钩子函数，当捕获到一个来自子孙组件的错误时被调用</p>
<p>基本类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="attr">err</span>: <span class="title class_">Error</span>, <span class="attr">vm</span>: <span class="title class_">Component</span>, <span class="attr">info</span>: string) =&gt; ?boolean</span><br></pre></td></tr></table></figure>

<p>此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播</p>
<p>参考官网，错误传播规则如下：</p>
<ul>
<li>默认情况下，如果全局的 <code>config.errorHandler</code> 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报</li>
<li>如果一个组件的继承或父级从属链路中存在多个 <code>errorCaptured</code> 钩子，则它们将会被相同的错误逐个唤起。</li>
<li>如果此 <code>errorCaptured</code> 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 <code>config.errorHandler</code></li>
<li>一个 <code>errorCaptured</code> 钩子能够返回 <code>false</code> 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 <code>errorCaptured</code> 钩子和全局的 <code>config.errorHandler</code></li>
</ul>
<p>下面来看个例子</p>
<p>定义一个父组件<code>cat</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cat&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">			&lt;h1&gt;Cat: &lt;/h1&gt;</span></span><br><span class="line"><span class="string">        	&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:&#123;</span><br><span class="line">            <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">errorCaptured</span>(<span class="params">err,vm,info</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`cat EC: <span class="subst">$&#123;err.toString()&#125;</span>\ninfo: <span class="subst">$&#123;info&#125;</span>`</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>定义一个子组件<code>kitten</code>，其中<code>dontexist()</code>并没有定义，存在错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;kitten&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&lt;h1&gt;Kitten: &#123;&#123; dontexist() &#125;&#125;&lt;/h1&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:&#123;</span><br><span class="line">            <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>页面中使用组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cat</span> <span class="attr">name</span>=<span class="string">&quot;my cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kitten</span>&gt;</span><span class="tag">&lt;/<span class="name">kitten</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件的<code>errorCaptured</code>则能够捕获到信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat <span class="attr">EC</span>: <span class="title class_">TypeError</span>: dontexist is not a <span class="keyword">function</span></span><br><span class="line"><span class="attr">info</span>: render</span><br></pre></td></tr></table></figure>



<h3 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h3><p>异常处理源码</p>
<p>源码位置：&#x2F;src&#x2F;core&#x2F;util&#x2F;error.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 全局配置,也就是上面的Vue.config</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">&#x27;./debug&#x27;</span></span><br><span class="line"><span class="comment">// 判断环境</span></span><br><span class="line"><span class="keyword">import</span> &#123; inBrowser, inWeex &#125; <span class="keyword">from</span> <span class="string">&#x27;./env&#x27;</span></span><br><span class="line"><span class="comment">// 判断是否是Promise，通过val.then === &#x27;function&#x27; &amp;&amp; val.catch === &#x27;function&#x27;, val ！=== null &amp;&amp; val !== undefined</span></span><br><span class="line"><span class="keyword">import</span> &#123; isPromise &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/util&#x27;</span></span><br><span class="line"><span class="comment">// 当错误函数处理错误时，停用deps跟踪以避免可能出现的infinite rendering</span></span><br><span class="line"><span class="comment">// 解决以下出现的问题https://github.com/vuejs/vuex/issues/1505的问题</span></span><br><span class="line"><span class="keyword">import</span> &#123; pushTarget, popTarget &#125; <span class="keyword">from</span> <span class="string">&#x27;../observer/dep&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleError</span> (<span class="params">err: <span class="built_in">Error</span>, vm: any, info: string</span>) &#123;</span><br><span class="line">    <span class="comment">// Deactivate deps tracking while processing error handler to avoid possible infinite rendering.</span></span><br><span class="line">    <span class="title function_">pushTarget</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// vm指当前报错的组件实例</span></span><br><span class="line">        <span class="keyword">if</span> (vm) &#123;</span><br><span class="line">            <span class="keyword">let</span> cur = vm</span><br><span class="line">            <span class="comment">// 首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用errorCaptured 方法。</span></span><br><span class="line">            <span class="comment">// 在遍历调用完所有 errorCaptured 方法、或 errorCaptured 方法有报错时，调用 globalHandleError 方法</span></span><br><span class="line">            <span class="keyword">while</span> ((cur = cur.<span class="property">$parent</span>)) &#123;</span><br><span class="line">                <span class="keyword">const</span> hooks = cur.<span class="property">$options</span>.<span class="property">errorCaptured</span></span><br><span class="line">                <span class="comment">// 判断是否存在errorCaptured钩子函数</span></span><br><span class="line">                <span class="keyword">if</span> (hooks) &#123;</span><br><span class="line">                    <span class="comment">// 选项合并的策略，钩子函数会被保存在一个数组中</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hooks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                        <span class="comment">// 如果errorCaptured 钩子执行自身抛出了错误，</span></span><br><span class="line">                        <span class="comment">// 则用try&#123;&#125;catch&#123;&#125;捕获错误，将这个新错误和原本被捕获的错误都会发送给全局的config.errorHandler</span></span><br><span class="line">                        <span class="comment">// 调用globalHandleError方法</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 当前errorCaptured执行，根据返回是否是false值</span></span><br><span class="line">                            <span class="comment">// 是false，capture = true，阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler</span></span><br><span class="line">                            <span class="comment">// 是true capture = fale，组件的继承或父级从属链路中存在的多个 errorCaptured 钩子，会被相同的错误逐个唤起</span></span><br><span class="line">                            <span class="comment">// 调用对应的钩子函数，处理错误</span></span><br><span class="line">                            <span class="keyword">const</span> capture = hooks[i].<span class="title function_">call</span>(cur, err, vm, info) === <span class="literal">false</span></span><br><span class="line">                            <span class="keyword">if</span> (capture) <span class="keyword">return</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            <span class="title function_">globalHandleError</span>(e, cur, <span class="string">&#x27;errorCaptured hook&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 除非禁止错误向上传播，否则都会调用全局的错误处理函数</span></span><br><span class="line">        <span class="title function_">globalHandleError</span>(err, vm, info)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">popTarget</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异步错误处理函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">invokeWithErrorHandling</span> (<span class="params"></span></span><br><span class="line"><span class="params">handler: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params"> context: any,</span></span><br><span class="line"><span class="params"> args: <span class="literal">null</span> | any[],</span></span><br><span class="line"><span class="params">    vm: any,</span></span><br><span class="line"><span class="params">        info: string</span></span><br><span class="line"><span class="params">        </span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 根据参数选择不同的handle执行方式</span></span><br><span class="line">                res = args ? handler.<span class="title function_">apply</span>(context, args) : handler.<span class="title function_">call</span>(context)</span><br><span class="line">                <span class="comment">// handle返回结果存在</span></span><br><span class="line">                <span class="comment">// res._isVue an flag to avoid this being observed，如果传入值的_isVue为ture时(即传入的值是Vue实例本身)不会新建observer实例</span></span><br><span class="line">                <span class="comment">// isPromise(res) 判断val.then === &#x27;function&#x27; &amp;&amp; val.catch === &#x27;function&#x27;, val ！=== null &amp;&amp; val !== undefined</span></span><br><span class="line">                <span class="comment">// !res._handled  _handle是Promise 实例的内部变量之一，默认是false，代表onFulfilled,onRejected是否被处理</span></span><br><span class="line">                <span class="keyword">if</span> (res &amp;&amp; !res.<span class="property">_isVue</span> &amp;&amp; <span class="title function_">isPromise</span>(res) &amp;&amp; !res.<span class="property">_handled</span>) &#123;</span><br><span class="line">                    res.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">handleError</span>(e, vm, info + <span class="string">` (Promise/async)`</span>))</span><br><span class="line">                    <span class="comment">// avoid catch triggering multiple times when nested calls</span></span><br><span class="line">                    <span class="comment">// 避免嵌套调用时catch多次的触发</span></span><br><span class="line">                    res.<span class="property">_handled</span> = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="comment">// 处理执行错误</span></span><br><span class="line">                <span class="title function_">handleError</span>(e, vm, info)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局错误处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalHandleError</span> (<span class="params">err, vm, info</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取全局配置，判断是否设置处理函数，默认undefined</span></span><br><span class="line">    <span class="comment">// 已配置</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">errorHandler</span>) &#123;</span><br><span class="line">        <span class="comment">// try&#123;&#125;catch&#123;&#125; 住全局错误处理函数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行设置的全局错误处理函数，handle error 想干啥就干啥💗</span></span><br><span class="line">            <span class="keyword">return</span> config.<span class="property">errorHandler</span>.<span class="title function_">call</span>(<span class="literal">null</span>, err, vm, info)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 如果开发者在errorHandler函数中手动抛出同样错误信息throw err</span></span><br><span class="line">            <span class="comment">// 判断err信息是否相等，避免log两次</span></span><br><span class="line">            <span class="comment">// 如果抛出新的错误信息throw err Error(&#x27;你好毒&#x27;)，将会一起log输出</span></span><br><span class="line">            <span class="keyword">if</span> (e !== err) &#123;</span><br><span class="line">                <span class="title function_">logError</span>(e, <span class="literal">null</span>, <span class="string">&#x27;config.errorHandler&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未配置常规log输出</span></span><br><span class="line">    <span class="title function_">logError</span>(err, vm, info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误输出函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logError</span> (<span class="params">err, vm, info</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(<span class="string">`Error in <span class="subst">$&#123;info&#125;</span>: &quot;<span class="subst">$&#123;err.toString()&#125;</span>&quot;`</span>, vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> ((inBrowser || inWeex) &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">console</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><code>handleError</code>在需要捕获异常的地方调用，首先获取到报错的组件，之后递归查找当前组件的父组件，依次调用<code>errorCaptured</code> 方法，在遍历调用完所有 <code>errorCaptured</code> 方法或 <code>errorCaptured</code> 方法有报错时，调用 <code>globalHandleError</code> 方法</li>
<li><code>globalHandleError </code>调用全局的 <code>errorHandler</code> 方法，再通过<code>logError</code>判断环境输出错误信息</li>
<li><code>invokeWithErrorHandling</code>更好的处理异步错误信息</li>
<li><code>logError</code>判断环境，选择不同的抛错方式。非生产环境下，调用<code>warn</code>方法处理错误</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><p><a href="https://juejin.cn/post/6844904096936230925">https://juejin.cn/post/6844904096936230925</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000018606181">https://segmentfault.com/a/1190000018606181</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的过滤器了解吗？过滤器的应用场景有哪些？</title>
    <url>/Vue/vue-filter/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/fe68eea0-440f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>过滤器（<code>filter</code>）是输送介质管道上不可缺少的一种装置</p>
<p>大白话，就是把一些不必要的东西过滤掉</p>
<p>过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数</p>
<p><code>Vue</code> 允许你自定义过滤器，可被用于一些常见的文本格式化</p>
<p>ps: <code>Vue3</code>中已废弃<code>filter</code></p>
<h2 id="二、如何用"><a href="#二、如何用" class="headerlink" title="二、如何用"></a>二、如何用</h2><p><code>vue</code>中的过滤器可以用在两个地方：双花括号插值和 <code>v-bind</code> 表达式，过滤器应该被添加在 <code>JavaScript </code>表达式的尾部，由“管道”符号指示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在 <span class="string">`v-bind`</span> 中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="定义filter"><a href="#定义filter" class="headerlink" title="定义filter"></a>定义filter</h3><p>在组件的选项中定义本地的过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">  <span class="attr">capitalize</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    value = value.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义全局过滤器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capitalize&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value = value.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注意：当全局过滤器和局部过滤器重名时，会采用局部过滤器</p>
<p>过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，<code>capitalize</code> 过滤器函数将会收到 <code>message</code> 的值作为第一个参数</p>
<p>过滤器可以串联：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。</p>
<p>过滤器是 <code>JavaScript </code>函数，因此可以接收参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>filterA</code> 被定义为接收三个参数的过滤器函数。</p>
<p>其中 <code>message</code> 的值作为第一个参数，普通字符串 <code>&#39;arg1&#39;</code> 作为第二个参数，表达式 <code>arg2</code> 的值作为第三个参数</p>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg | msgFormat(&#x27;疯狂&#x27;,&#x27;--&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义一个 Vue 全局的过滤器，名字叫做  msgFormat</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;msgFormat&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg, arg, arg2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串的  replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> msg.<span class="title function_">replace</span>(<span class="regexp">/单纯/g</span>, arg+arg2)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>部过滤器优先于全局过滤器被调用</li>
<li>一个表达式可以使用多个过滤器。过滤器之间需要用管道符“|”隔开。其执行顺序从左往右</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>平时开发中，需要用到过滤器的地方有很多，比如单位转换、数字打点、文本格式化、时间格式化之类的等</p>
<p>比如我们要实现将30000 &#x3D;&gt; 30,000，这时候我们就需要使用过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;toThousandFilter&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">     value = value.<span class="title function_">toString</span>()</span><br><span class="line">     <span class="keyword">return</span> .<span class="title function_">replace</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) &gt; -<span class="number">1</span> ? <span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span> : <span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;$1,&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="四、原理分析"><a href="#四、原理分析" class="headerlink" title="四、原理分析"></a>四、原理分析</h2><p>使用过滤器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在模板编译阶段过滤器表达式将会被编译为过滤器函数，主要是用过<code>parseFilters</code>，我们放到最后讲</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_s</span>(<span class="title function_">_f</span>(<span class="string">&#x27;filterFormat&#x27;</span>)(message))</span><br></pre></td></tr></table></figure>

<p>首先分析一下<code>_f</code>：</p>
<p>_f 函数全名是：<code>resolveFilter</code>，这个函数的作用是从<code>this.$options.filters</code>中找出注册的过滤器并返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变为</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">filters</span>[<span class="string">&#x27;filterFormat&#x27;</span>](message) <span class="comment">// message为参数</span></span><br></pre></td></tr></table></figure>

<p>关于<code>resolveFilter</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; indentity,resolveAsset &#125; <span class="keyword">from</span> <span class="string">&#x27;core/util/index&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveFilter</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resolveAsset</span>(<span class="variable language_">this</span>.<span class="property">$options</span>,<span class="string">&#x27;filters&#x27;</span>,id,<span class="literal">true</span>) || identity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部直接调用<code>resolveAsset</code>，将<code>option</code>对象，类型，过滤器<code>id</code>，以及一个触发警告的标志作为参数传递，如果找到，则返回过滤器；</p>
<p><code>resolveAsset</code>的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params">options,type,id,warnMissing</span>)&#123; <span class="comment">// 因为我们找的是过滤器，所以在 resolveFilter函数中调用时 type 的值直接给的 &#x27;filters&#x27;,实际这个函数还可以拿到其他很多东西</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> id !== <span class="string">&#x27;string&#x27;</span>)&#123; <span class="comment">// 判断传递的过滤器id 是不是字符串，不是则直接返回</span></span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> assets = options[type]  <span class="comment">// 将我们注册的所有过滤器保存在变量中</span></span><br><span class="line">    <span class="comment">// 接下来的逻辑便是判断id是否在assets中存在，即进行匹配</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasOwn</span>(assets,id)) <span class="keyword">return</span> assets[id] <span class="comment">// 如找到，直接返回过滤器</span></span><br><span class="line">    <span class="comment">// 没有找到，代码继续执行</span></span><br><span class="line">    <span class="keyword">const</span> camelizedId  = <span class="title function_">camelize</span>(id) <span class="comment">// 万一你是驼峰的呢</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasOwn</span>(assets,camelizedId)) <span class="keyword">return</span> assets[camelizedId]</span><br><span class="line">    <span class="comment">// 没找到，继续执行</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">PascalCaseId</span> = <span class="title function_">capitalize</span>(camelizedId) <span class="comment">// 万一你是首字母大写的驼峰呢</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hasOwn</span>(assets,<span class="title class_">PascalCaseId</span>)) <span class="keyword">return</span> assets[<span class="title class_">PascalCaseId</span>]</span><br><span class="line">    <span class="comment">// 如果还是没找到，则检查原型链(即访问属性)</span></span><br><span class="line">    <span class="keyword">const</span> result = assets[id] || assets[camelizedId] || assets[<span class="title class_">PascalCaseId</span>]</span><br><span class="line">    <span class="comment">// 如果依然没找到，则在非生产环境的控制台打印警告</span></span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warnMissing &amp;&amp; !result)&#123;</span><br><span class="line">        <span class="title function_">warn</span>(<span class="string">&#x27;Failed to resolve &#x27;</span> + type.<span class="title function_">slice</span>(<span class="number">0</span>,-<span class="number">1</span>) + <span class="string">&#x27;: &#x27;</span> + id, options)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无论是否找到，都返回查找结果</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面再来分析一下<code>_s</code>：</p>
<p> <code>_s</code> 函数的全称是 <code>toString</code>,过滤器处理后的结果会当作参数传递给 <code>toString</code>函数，最终 <code>toString</code>函数执行后的结果会保存到<code>Vnode</code>中的text属性中，渲染到视图中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toString</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="literal">null</span></span><br><span class="line">    ? <span class="string">&#x27;&#x27;</span></span><br><span class="line">    : <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">      ? <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value,<span class="literal">null</span>,<span class="number">2</span>)<span class="comment">// JSON.stringify()第三个参数可用来控制字符串里面的间距</span></span><br><span class="line">      : <span class="title class_">String</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在分析下<code>parseFilters</code>，在模板编译阶段使用该函数阶段将模板过滤器解析为过滤器函数调用表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseFilters</span> (<span class="params">filter</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> filters = filter.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> expression = filters.<span class="title function_">shift</span>().<span class="title function_">trim</span>() <span class="comment">// shift()删除数组第一个元素并将其返回，该方法会更改原数组</span></span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">if</span> (filters) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; filters.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            experssion = <span class="title function_">warpFilter</span>(expression,filters[i].<span class="title function_">trim</span>()) <span class="comment">// 这里传进去的expression实际上是管道符号前面的字符串，即过滤器的第一个参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> expression</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// warpFilter函数实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warpFilter</span>(<span class="params">exp,filter</span>)&#123;</span><br><span class="line">    <span class="comment">// 首先判断过滤器是否有其他参数</span></span><br><span class="line">    <span class="keyword">const</span> i = filter.<span class="title function_">indexof</span>(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123; <span class="comment">// 不含其他参数，直接进行过滤器表达式字符串的拼接</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`_f(&quot;<span class="subst">$&#123;filter&#125;</span>&quot;)(<span class="subst">$&#123;exp&#125;</span>)`</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> name = filter.<span class="title function_">slice</span>(<span class="number">0</span>,i) <span class="comment">// 过滤器名称</span></span><br><span class="line">        <span class="keyword">const</span> args = filter.<span class="title function_">slice</span>(i+<span class="number">1</span>) <span class="comment">// 参数，但还多了 ‘)’</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`_f(&#x27;<span class="subst">$&#123;name&#125;</span>&#x27;)(<span class="subst">$&#123;exp&#125;</span>,<span class="subst">$&#123;args&#125;</span>`</span> <span class="comment">// 注意这一步少给了一个 &#x27;)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>在编译阶段通过<code>parseFilters</code>将过滤器编译成函数调用（串联过滤器则是一个嵌套的函数调用，前一个过滤器执行的结果是后一个过滤器函数的参数）</li>
<li>编译后通过调用<code>resolveFilter</code>函数找到对应过滤器并返回结果</li>
<li>执行结果作为参数传递给<code>toString</code>函数，而<code>toString</code>执行后，其结果会保存在<code>Vnode</code>的<code>text</code>属性中，渲染到视图</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://cn.vuejs.org/v2/guide/filters.html#ad">https://cn.vuejs.org/v2/guide/filters.html#ad</a></li>
<li><a href="https://blog.csdn.net/weixin_42724176/article/details/105546684">https://blog.csdn.net/weixin_42724176/article/details/105546684</a></li>
<li><a href="https://vue3js.cn/">https://vue3js.cn</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SPA首屏加载速度慢的怎么解决？</title>
    <url>/Vue/vue-first-page-time/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/24617c00-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<h2 id="一、什么是首屏加载"><a href="#一、什么是首屏加载" class="headerlink" title="一、什么是首屏加载"></a>一、什么是首屏加载</h2><p>首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容</p>
<p>首屏加载可以说是用户体验中<strong>最重要</strong>的环节</p>
<h3 id="关于计算首屏时间"><a href="#关于计算首屏时间" class="headerlink" title="关于计算首屏时间"></a>关于计算首屏时间</h3><p>利用<code>performance.timing</code>提供的数据：</p>
<p><img src="https://static.vue-js.com/2e2491a0-3acc-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p>
<p>通过<code>DOMContentLoad</code>或者<code>performance</code>来计算出首屏时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案一：</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first contentful painting&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 方案二：</span></span><br><span class="line">performance.<span class="title function_">getEntriesByName</span>(<span class="string">&quot;first-contentful-paint&quot;</span>)[<span class="number">0</span>].<span class="property">startTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// performance.getEntriesByName(&quot;first-contentful-paint&quot;)[0]</span></span><br><span class="line"><span class="comment">// 会返回一个 PerformancePaintTiming的实例，结构如下：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;first-contentful-paint&quot;</span>,</span><br><span class="line">  <span class="attr">entryType</span>: <span class="string">&quot;paint&quot;</span>,</span><br><span class="line">  <span class="attr">startTime</span>: <span class="number">507.80000002123415</span>,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="二、加载慢的原因"><a href="#二、加载慢的原因" class="headerlink" title="二、加载慢的原因"></a>二、加载慢的原因</h2><p>在页面渲染的过程，导致加载速度慢的因素可能如下：</p>
<ul>
<li>网络延时问题</li>
<li>资源文件体积是否过大</li>
<li>资源是否重复发送请求去加载了</li>
<li>加载脚本的时候，渲染内容堵塞了</li>
</ul>
<h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>常见的几种 SPA 首屏优化方式</p>
<ul>
<li>减小入口文件积</li>
<li>静态资源本地缓存</li>
<li>UI 框架按需加载</li>
<li>图片资源的压缩</li>
<li>组件重复打包</li>
<li>开启 GZip 压缩</li>
<li>使用 SSR</li>
</ul>
<h3 id="减小入口文件体积"><a href="#减小入口文件体积" class="headerlink" title="减小入口文件体积"></a>减小入口文件体积</h3><p>常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加</p>
<p><img src="https://static.vue-js.com/486cee90-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<p>在<code>vue-router</code>配置路由的时候，采用动态加载路由的形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;Blogs&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ShowBlogs&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./components/ShowBlogs.vue&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件</p>
<h3 id="静态资源本地缓存"><a href="#静态资源本地缓存" class="headerlink" title="静态资源本地缓存"></a>静态资源本地缓存</h3><p>后端返回资源问题：</p>
<ul>
<li><p>采用<code>HTTP</code>缓存，设置<code>Cache-Control</code>，<code>Last-Modified</code>，<code>Etag</code>等响应头</p>
</li>
<li><p>采用<code>Service Worker</code>离线缓存</p>
</li>
</ul>
<p>前端合理利用<code>localStorage</code></p>
<h3 id="UI-框架按需加载"><a href="#UI-框架按需加载" class="headerlink" title="UI 框架按需加载"></a>UI 框架按需加载</h3><p>在日常使用<code>UI</code>框架，例如<code>element-UI</code>、或者<code>antd</code>，我们经常性直接引用整个<code>UI</code>库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure>

<p>但实际上我用到的组件只有按钮，分页，表格，输入与警告 所以我们要按需引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Button</span>,</span><br><span class="line">  <span class="title class_">Input</span>,</span><br><span class="line">  <span class="title class_">Pagination</span>,</span><br><span class="line">  <span class="title class_">Table</span>,</span><br><span class="line">  <span class="title class_">TableColumn</span>,</span><br><span class="line">  <span class="title class_">MessageBox</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Input</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Pagination</span>);</span><br></pre></td></tr></table></figure>

<h3 id="组件重复打包"><a href="#组件重复打包" class="headerlink" title="组件重复打包"></a>组件重复打包</h3><p>假设<code>A.js</code>文件是一个常用的库，现在有多个路由使用了<code>A.js</code>文件，这就造成了重复下载</p>
<p>解决方案：在<code>webpack</code>的<code>config</code>文件中，修改<code>CommonsChunkPlugin</code>的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">minChunks</span>: <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p><code>minChunks</code>为 3 表示会把使用 3 次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件</p>
<h3 id="图片资源的压缩"><a href="#图片资源的压缩" class="headerlink" title="图片资源的压缩"></a>图片资源的压缩</h3><p>图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素</p>
<p>对于所有的图片资源，我们可以进行适当的压缩</p>
<p>对页面上使用到的<code>icon</code>，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻<code>http</code>请求压力。</p>
<h3 id="开启-GZip-压缩"><a href="#开启-GZip-压缩" class="headerlink" title="开启 GZip 压缩"></a>开启 GZip 压缩</h3><p>拆完包之后，我们再用<code>gzip</code>做一下压缩 安装<code>compression-webpack-plugin</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnmp i compression-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>在<code>vue.congig.js</code>中引入并修改<code>webpack</code>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">            config.<span class="property">mode</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/\.js$|\.html$|\.css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">                    <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">//对超过10k的数据进行压缩</span></span><br><span class="line">                    <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span> <span class="comment">//是否删除原文件</span></span><br><span class="line">                &#125;)]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在服务器我们也要做相应的配置 如果发送请求的浏览器支持<code>gzip</code>，就发送给它<code>gzip</code>格式的文件 我的服务器是用<code>express</code>框架搭建的 只要安装一下<code>compression</code>就能使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const compression = require(&#x27;compression&#x27;)</span><br><span class="line">app.use(compression())  // 在其他中间件使用之前调用</span><br></pre></td></tr></table></figure>

<h3 id="使用-SSR"><a href="#使用-SSR" class="headerlink" title="使用 SSR"></a>使用 SSR</h3><p>SSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成 html 字符串，再发送到浏览器</p>
<p>从头搭建一个服务端渲染是很复杂的，<code>vue</code>应用建议使用<code>Nuxt.js</code>实现服务端渲染</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化</p>
<p>下图是更为全面的首屏优化的方案</p>
<p><img src="https://static.vue-js.com/4fafe900-3acc-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p>
<p>大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/88639980?utm_source=wechat_session">https://zhuanlan.zhihu.com/p/88639980?utm_source=wechat_session</a></li>
<li><a href="https://www.chengrang.com/how-browsers-work.html">https://www.chengrang.com/how-browsers-work.html</a></li>
<li><a href="https://juejin.cn/post/6844904185264095246">https://juejin.cn/post/6844904185264095246</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>v-if和v-for的优先级是什么？</title>
    <url>/Vue/vue-if-for/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/e8764810-3acb-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、作用"><a href="#一、作用" class="headerlink" title="一、作用"></a>一、作用</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 <code>true</code>值的时候被渲染</p>
<p><code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组或者对象，而 <code>item</code> 则是被迭代的数组元素的别名</p>
<p>在 <code>v-for</code> 的时候，建议设置<code>key</code>值，并且保证每个<code>key</code>值是独一无二的，这便于<code>diff</code>算法进行优化</p>
<p>两者在用法上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Modal</span> v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; item.label &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="二、优先级"><a href="#二、优先级" class="headerlink" title="二、优先级"></a>二、优先级</h2><p><code>v-if</code>与<code>v-for</code>都是<code>vue</code>模板系统中的指令</p>
<p>在<code>vue</code>模板编译的时候，会将指令系统转化成可执行的<code>render</code>函数</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>编写一个<code>p</code>标签，同时使用<code>v-if</code>与 <code>v-for</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建<code>vue</code>实例，存放<code>isShow</code>与<code>items</code>数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">items</span>: [</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">&quot;foo&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">&quot;baz&quot;</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">isShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>模板指令的代码都会生成在<code>render</code>函数中，通过<code>app.$options.render</code>就能得到渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="title function_">anonymous</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">with</span> (<span class="variable language_">this</span>) &#123; <span class="keyword">return</span> </span><br><span class="line">    <span class="title function_">_c</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;app&quot;</span> &#125; &#125;, </span><br><span class="line">    <span class="title function_">_l</span>((items), <span class="keyword">function</span> (<span class="params">item</span>) </span><br><span class="line">    &#123; <span class="keyword">return</span> (isShow) ? <span class="title function_">_c</span>(<span class="string">&#x27;p&#x27;</span>, [<span class="title function_">_v</span>(<span class="string">&quot;\n&quot;</span> + <span class="title function_">_s</span>(item.<span class="property">title</span>) + <span class="string">&quot;\n&quot;</span>)]) : <span class="title function_">_e</span>() &#125;), <span class="number">0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>_l</code>是<code>vue</code>的列表渲染函数，函数内部都会进行一次<code>if</code>判断</p>
<p>初步得到结论：<code>v-for</code>优先级是比<code>v-if</code>高</p>
<p>再将<code>v-for</code>与<code>v-if</code>置于不同标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再输出下<code>render</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="title function_">anonymous</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">with</span>(<span class="params"><span class="variable language_">this</span></span>)&#123;<span class="keyword">return</span> </span><br><span class="line">    <span class="title function_">_c</span>(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;&#125;,</span><br><span class="line">    [(isShow)?[<span class="title function_">_v</span>(<span class="string">&quot;\n&quot;</span>),</span><br><span class="line">    <span class="title function_">_l</span>((items),<span class="keyword">function</span>(<span class="params">item</span>)&#123;<span class="keyword">return</span> <span class="title function_">_c</span>(<span class="string">&#x27;p&#x27;</span>,[<span class="title function_">_v</span>(<span class="title function_">_s</span>(item.<span class="property">title</span>))])&#125;)]:<span class="title function_">_e</span>()],<span class="number">2</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们可以看到，<code>v-for</code>与<code>v-if</code>作用在不同标签时候，是先进行判断，再进行列表的渲染</p>
<p>我们再在查看下<code>vue</code>源码</p>
<p>源码位置：<code> \vue-dev\src\compiler\codegen\index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genElement</span> (<span class="params">el: ASTElement, state: CodegenState</span>): string &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">parent</span>) &#123;</span><br><span class="line">    el.<span class="property">pre</span> = el.<span class="property">pre</span> || el.<span class="property">parent</span>.<span class="property">pre</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">staticRoot</span> &amp;&amp; !el.<span class="property">staticProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genStatic</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">once</span> &amp;&amp; !el.<span class="property">onceProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genOnce</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">for</span> &amp;&amp; !el.<span class="property">forProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genFor</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">if</span> &amp;&amp; !el.<span class="property">ifProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genIf</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;template&#x27;</span> &amp;&amp; !el.<span class="property">slotTarget</span> &amp;&amp; !state.<span class="property">pre</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genChildren</span>(el, state) || <span class="string">&#x27;void 0&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;slot&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genSlot</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// component or element</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在进行<code>if</code>判断的时候，<code>v-for</code>是比<code>v-if</code>先进行判断</p>
<p>最终结论：<code>v-for</code>优先级比<code>v-if</code>高</p>
<h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><ol>
<li>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）</li>
<li>如果避免出现这种情况，则在外层嵌套<code>template</code>（页面渲染不生成<code>dom</code>节点），在这一层进行v-if判断，然后在内部进行v-for循环</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果条件出现在循环内部，可通过计算属性<code>computed</code>提前过滤掉那些不需要显示的项</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">isShow</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>说说你对keep-alive的理解是什么？</title>
    <url>/Vue/vue-keepalive/</url>
    <content><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9nSDMxdUY5VklpYlRaSXdpY3ZmUkR3STRiamRBVGlhVEpFZDNzamRoeTd3MDlVM0k5ZERjNUVVSUNFVk1WSVE2aDFYMjVpY1NRT3lraWFwWEpEUFM0VGJST0l3LzY0MA?x-oss-process=image/format,png"></p>
<h2 id="一、Keep-alive-是什么"><a href="#一、Keep-alive-是什么" class="headerlink" title="一、Keep-alive 是什么"></a>一、Keep-alive 是什么</h2><p><code>keep-alive</code>是<code>vue</code>中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染<code>DOM</code></p>
<p><code>keep-alive</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p>
<p><code>keep-alive</code>可以设置以下<code>props</code>属性：</p>
<ul>
<li><p><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存</p>
</li>
<li><p><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存</p>
</li>
<li><p><code>max</code> - 数字。最多可以缓存多少组件实例</p>
</li>
</ul>
<p>关于<code>keep-alive</code>的基本用法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component :is=<span class="string">&quot;view&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>使用<code>includes</code>和<code>exclude</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;a,b&quot;</span>&gt;</span><br><span class="line">  &lt;component :is=<span class="string">&quot;view&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 正则表达式 (使用 <span class="string">`v-bind`</span>) --&gt;</span><br><span class="line">&lt;keep-alive :include=<span class="string">&quot;/a|b/&quot;</span>&gt;</span><br><span class="line">  &lt;component :is=<span class="string">&quot;view&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数组 (使用 <span class="string">`v-bind`</span>) --&gt;</span><br><span class="line">&lt;keep-alive :include=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span><br><span class="line">  &lt;component :is=<span class="string">&quot;view&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)，匿名组件不能被匹配</p>
<p>设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（<code>activated</code>与<code>deactivated</code>）：</p>
<ul>
<li><p>首次进入组件时：<code>beforeRouteEnter</code> &gt; <code>beforeCreate</code> &gt; <code>created</code>&gt; <code>mounted</code> &gt; <code>activated</code> &gt; … … &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></p>
</li>
<li><p>再次进入组件时：<code>beforeRouteEnter</code> &gt;<code>activated</code> &gt; … … &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></p>
</li>
</ul>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用<code>keepalive</code></p>
<p>举个栗子:</p>
<p>当我们从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>再返回</code>，这时候列表页应该是需要<code>keep-alive</code></p>
<p>从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>返回到列表页(需要缓存)</code>–&gt;<code>返回到首页(需要缓存)</code>–&gt;<code>再次进入列表页(不需要缓存)</code>，这时候可以按需来控制页面的<code>keep-alive</code></p>
<p>在路由中设置<code>keepAlive</code>属性判断是否需要缓存</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;itemList&#x27;</span>, <span class="comment">// 列表页</span></span><br><span class="line">  component (resolve) &#123;</span><br><span class="line">    require([<span class="string">&#x27;@/pages/item/list&#x27;</span>], resolve)</span><br><span class="line"> &#125;,</span><br><span class="line"> meta: &#123;</span><br><span class="line">  keepAlive: <span class="literal">true</span>,</span><br><span class="line">  title: <span class="string">&#x27;列表页&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>&lt;keep-alive&gt;</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> class=<span class="string">&#x27;wrapper&#x27;</span>&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;!-- 需要缓存的视图组件 --&gt; </span><br><span class="line">        &lt;router-view v-<span class="keyword">if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">     &lt;/keep-alive&gt;</span><br><span class="line">      &lt;!-- 不需要缓存的视图组件 --&gt;</span><br><span class="line">     &lt;router-view v-<span class="keyword">if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p><code>keep-alive</code>是<code>vue</code>中内置的一个组件</p>
<p>源码位置：src&#x2F;core&#x2F;components&#x2F;keep-alive.js</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">  abstract: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    include: [String, RegExp, Array],</span><br><span class="line">    exclude: [String, RegExp, Array],</span><br><span class="line">    max: [String, Number]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    this.cache = Object.create(null)</span><br><span class="line">    this.keys = []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key in this.cache) &#123;</span><br><span class="line">      pruneCacheEntry(this.cache, key, this.keys)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.$watch(<span class="string">&#x27;include&#x27;</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(this, name =&gt; matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">    this.$watch(<span class="string">&#x27;exclude&#x27;</span>, val =&gt; &#123;</span><br><span class="line">      pruneCache(this, name =&gt; !matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">/* 获取默认插槽中的第一个组件节点 */</span></span><br><span class="line">    <span class="keyword">const</span> slot = this.$slots.<span class="keyword">default</span></span><br><span class="line">    <span class="keyword">const</span> vnode = getFirstComponentChild(slot)</span><br><span class="line">    <span class="comment">/* 获取该组件节点的componentOptions */</span></span><br><span class="line">    <span class="keyword">const</span> componentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">/* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span><br><span class="line">      <span class="keyword">const</span> name = getComponentName(componentOptions)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude &#125; = this</span><br><span class="line">      <span class="comment">/* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class="line">        <span class="comment">// excluded</span></span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; cache, keys &#125; = this</span><br><span class="line">      <span class="comment">/* 获取组件的key值 */</span></span><br><span class="line">      <span class="keyword">const</span> key = vnode.key == null</span><br><span class="line">        <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">        <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::$&#123;componentOptions.tag&#125;`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        : vnode.key</span><br><span class="line">     <span class="comment">/*  拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */</span></span><br><span class="line">      <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">        vnode.componentInstance = cache[key].componentInstance</span><br><span class="line">        <span class="comment">// make current key freshest</span></span><br><span class="line">        remove(keys, key)</span><br><span class="line">        keys.push(key)</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">/* 如果没有命中缓存，则将其设置进缓存 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        cache[key] = vnode</span><br><span class="line">        keys.push(key)</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="comment">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span><br><span class="line">        <span class="keyword">if</span> (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) &#123;</span><br><span class="line">          pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, this._vnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      vnode.data.keepAlive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到该组件没有<code>template</code>，而是用了<code>render</code>，在组件渲染的时候会自动执行<code>render</code>函数</p>
<p><code>this.cache</code>是一个对象，用来存储需要缓存的组件，它将以如下形式存储：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">this.cache = &#123;</span><br><span class="line">    <span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;组件1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;组件2&#x27;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在组件销毁的时候执行<code>pruneCacheEntry</code>函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">function pruneCacheEntry (</span><br><span class="line">  cache: VNodeCache,</span><br><span class="line">  key: <span class="type">string</span>,</span><br><span class="line">  keys: Array&lt;<span class="type">string</span>&gt;,</span><br><span class="line">  current?: VNode</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">const</span> cached = cache[key]</span><br><span class="line">  <span class="comment">/* 判断当前没有处于被渲染状态的组件，将其销毁*/</span></span><br><span class="line">  <span class="keyword">if</span> (cached &amp;&amp; (!current || cached.tag !== current.tag)) &#123;</span><br><span class="line">    cached.componentInstance.$destroy()</span><br><span class="line">  &#125;</span><br><span class="line">  cache[key] = null</span><br><span class="line">  remove(keys, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>mounted</code>钩子函数中观测 <code>include</code> 和 <code>exclude</code> 的变化，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    this.$watch(<span class="string">&#x27;include&#x27;</span>, val =&gt; &#123;</span><br><span class="line">        pruneCache(this, name =&gt; matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">    this.$watch(<span class="string">&#x27;exclude&#x27;</span>, val =&gt; &#123;</span><br><span class="line">        pruneCache(this, name =&gt; !matches(val, name))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>include</code> 或<code>exclude</code> 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行<code>pruneCache</code>函数，函数如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">function pruneCache (keepAliveInstance, filter) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key in cache) &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedNode = cache[key]</span><br><span class="line">    <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">      <span class="keyword">const</span> name = getComponentName(cachedNode.componentOptions)</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">        pruneCacheEntry(cache, key, keys, _vnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该函数内对<code>this.cache</code>对象进行遍历，取出每一项的<code>name</code>值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用<code>pruneCacheEntry</code>函数将其从<code>this.cache</code>对象剔除即可</p>
<p>关于<code>keep-alive</code>的最强大缓存功能是在<code>render</code>函数中实现</p>
<p>首先获取组件的<code>key</code>值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key = vnode.key == null? </span><br><span class="line">componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::$&#123;componentOptions.tag&#125;`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">: vnode.key</span><br></pre></td></tr></table></figure>

<p>拿到<code>key</code>值后去<code>this.cache</code>对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */</span></span><br><span class="line"><span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">    vnode.componentInstance = cache[key].componentInstance</span><br><span class="line">    <span class="comment">/* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */</span></span><br><span class="line">    remove(keys, key)</span><br><span class="line">    keys.push(key)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>直接从缓存中拿 <code>vnode</code> 的组件实例，此时重新调整该组件<code>key</code>的顺序，将其从原来的地方删掉并重新放在<code>this.keys</code>中最后一个</p>
<p><code>this.cache</code>对象中没有该<code>key</code>值的情况，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果没有命中缓存，则将其设置进缓存 */</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    cache[key] = vnode</span><br><span class="line">    keys.push(key)</span><br><span class="line">    <span class="comment">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span><br><span class="line">    <span class="keyword">if</span> (this.max &amp;&amp; keys.length &gt; parseInt(this.max)) &#123;</span><br><span class="line">        pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, this._vnode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表明该组件还没有被缓存过，则以该组件的<code>key</code>为键，组件<code>vnode</code>为值，将其存入<code>this.cache</code>中，并且把<code>key</code>存入<code>this.keys</code>中</p>
<p>此时再判断<code>this.keys</code>中缓存组件的数量是否超过了设置的最大缓存数量值<code>this.max</code>，如果超过了，则把第一个缓存组件删掉</p>
<h2 id="四、思考题：缓存后如何获取数据"><a href="#四、思考题：缓存后如何获取数据" class="headerlink" title="四、思考题：缓存后如何获取数据"></a>四、思考题：缓存后如何获取数据</h2><p>解决方案可以有以下两种：</p>
<ul>
<li><p>beforeRouteEnter</p>
</li>
<li><p>actived</p>
</li>
</ul>
<h3 id="beforeRouteEnter"><a href="#beforeRouteEnter" class="headerlink" title="beforeRouteEnter"></a>beforeRouteEnter</h3><p>每次组件渲染的时候，都会执行<code>beforeRouteEnter</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter(to, from, next)&#123;</span><br><span class="line">    next(vm=&gt;&#123;</span><br><span class="line">        console.log(vm)</span><br><span class="line">        <span class="comment">// 每次进入路由执行</span></span><br><span class="line">        vm.getData()  <span class="comment">// 获取数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="actived"><a href="#actived" class="headerlink" title="actived"></a>actived</h3><p>在<code>keep-alive</code>缓存的组件被激活的时候，都会执行<code>actived</code>钩子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">activated()&#123;</span><br><span class="line">   this.getData() <span class="comment">// 获取数据</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>注意：服务器端渲染期间<code>avtived</code>不被调用</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.cnblogs.com/dhui/p/13589401.html">https://www.cnblogs.com/dhui/p/13589401.html</a></li>
<li><a href="https://www.cnblogs.com/wangjiachen666/p/11497200.html">https://www.cnblogs.com/wangjiachen666/p/11497200.html</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>请描述下你对vue生命周期的理解？在created和mounted这两个生命周期中请求数据有什么区别呢？</title>
    <url>/Vue/vue-lifecycle/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/3a119e10-3aca-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、生命周期是什么"><a href="#一、生命周期是什么" class="headerlink" title="一、生命周期是什么"></a>一、生命周期是什么</h2><p>生命周期<code>（Life Cycle）</code>的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”<code>（Cradle-to-Grave）</code>的整个过程在<code>Vue</code>中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作PS：在<code>Vue</code>生命周期钩子会自动绑定 <code>this</code> 上下文到实例中，因此你可以访问数据，对 <code>property</code> 和方法进行运算这意味着<strong>你不能使用箭头函数来定义一个生命周期方法</strong> (例如 <code>created: () =&gt; this.fetchTodos()</code>)</p>
<h2 id="二、生命周期有哪些"><a href="#二、生命周期有哪些" class="headerlink" title="二、生命周期有哪些"></a>二、生命周期有哪些</h2><p>Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期</p>
<table>
<thead>
<tr>
<th align="left">生命周期</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeCreate</td>
<td align="left">组件实例被创建之初</td>
</tr>
<tr>
<td align="left">created</td>
<td align="left">组件实例已经完全创建</td>
</tr>
<tr>
<td align="left">beforeMount</td>
<td align="left">组件挂载之前</td>
</tr>
<tr>
<td align="left">mounted</td>
<td align="left">组件挂载到实例上去之后</td>
</tr>
<tr>
<td align="left">beforeUpdate</td>
<td align="left">组件数据发生变化，更新之前</td>
</tr>
<tr>
<td align="left">updated</td>
<td align="left">组件数据更新之后</td>
</tr>
<tr>
<td align="left">beforeDestroy</td>
<td align="left">组件实例销毁之前</td>
</tr>
<tr>
<td align="left">destroyed</td>
<td align="left">组件实例销毁之后</td>
</tr>
<tr>
<td align="left">activated</td>
<td align="left">keep-alive 缓存的组件激活时</td>
</tr>
<tr>
<td align="left">deactivated</td>
<td align="left">keep-alive 缓存的组件停用时调用</td>
</tr>
<tr>
<td align="left">errorCaptured</td>
<td align="left">捕获一个来自子孙组件的错误时被调用</td>
</tr>
</tbody></table>
<h2 id="三、生命周期整体流程"><a href="#三、生命周期整体流程" class="headerlink" title="三、生命周期整体流程"></a>三、生命周期整体流程</h2><p><code>Vue</code>生命周期流程图</p>
<p> <img src="https://static.vue-js.com/44114780-3aca-11eb-85f6-6fac77c0c9b3.png"></p>
<h4 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h4><p><strong>beforeCreate -&gt; created</strong></p>
<ul>
<li>初始化<code>vue</code>实例，进行数据观测</li>
</ul>
<p><strong>created</strong></p>
<ul>
<li>完成数据观测，属性与方法的运算，<code>watch</code>、<code>event</code>事件回调的配置</li>
<li>可调用<code>methods</code>中的方法，访问和修改data数据触发响应式渲染<code>dom</code>，可通过<code>computed</code>和<code>watch</code>完成数据计算</li>
<li>此时<code>vm.$el</code> 并没有被创建</li>
</ul>
<p><strong>created -&gt; beforeMount</strong></p>
<ul>
<li>判断是否存在<code>el</code>选项，若不存在则停止编译，直到调用<code>vm.$mount(el)</code>才会继续编译</li>
<li>优先级：<code>render</code> &gt; <code>template</code> &gt; <code>outerHTML</code></li>
<li><code>vm.el</code>获取到的是挂载<code>DOM</code>的</li>
</ul>
<p><strong>beforeMount</strong></p>
<ul>
<li>在此阶段可获取到<code>vm.el</code></li>
<li>此阶段<code>vm.el</code>虽已完成DOM初始化，但并未挂载在<code>el</code>选项上</li>
</ul>
<p><strong>beforeMount -&gt; mounted</strong></p>
<ul>
<li>此阶段<code>vm.el</code>完成挂载，<code>vm.$el</code>生成的<code>DOM</code>替换了<code>el</code>选项所对应的<code>DOM</code></li>
</ul>
<p><strong>mounted</strong></p>
<ul>
<li><code>vm.el</code>已完成<code>DOM</code>的挂载与渲染，此刻打印<code>vm.$el</code>，发现之前的挂载点及内容已被替换成新的DOM</li>
</ul>
<p><strong>beforeUpdate</strong></p>
<ul>
<li>更新的数据必须是被渲染在模板上的（<code>el</code>、<code>template</code>、<code>render</code>之一）</li>
<li>此时<code>view</code>层还未更新</li>
<li>若在<code>beforeUpdate</code>中再次修改数据，不会再次触发更新方法</li>
</ul>
<p><strong>updated</strong></p>
<ul>
<li>完成<code>view</code>层的更新</li>
<li>若在<code>updated</code>中再次修改数据，会再次触发更新方法（<code>beforeUpdate</code>、<code>updated</code>）</li>
</ul>
<p><strong>beforeDestroy</strong></p>
<ul>
<li>实例被销毁前调用，此时实例属性与方法仍可访问</li>
</ul>
<p><strong>destroyed</strong></p>
<ul>
<li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li>
<li>并不能清除DOM，仅仅销毁实例</li>
</ul>
<p><strong>使用场景分析</strong></p>
<table>
<thead>
<tr>
<th align="left">生命周期</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeCreate</td>
<td align="left">执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</td>
</tr>
<tr>
<td align="left">created</td>
<td align="left">组件初始化完毕，各种数据可以使用，常用于异步数据获取</td>
</tr>
<tr>
<td align="left">beforeMount</td>
<td align="left">未执行渲染、更新，dom未创建</td>
</tr>
<tr>
<td align="left">mounted</td>
<td align="left">初始化结束，dom已创建，可用于获取访问数据和dom元素</td>
</tr>
<tr>
<td align="left">beforeUpdate</td>
<td align="left">更新前，可用于获取更新前各种状态</td>
</tr>
<tr>
<td align="left">updated</td>
<td align="left">更新后，所有状态已是最新</td>
</tr>
<tr>
<td align="left">beforeDestroy</td>
<td align="left">销毁前，可用于一些定时器或订阅的取消</td>
</tr>
<tr>
<td align="left">destroyed</td>
<td align="left">组件已销毁，作用同上</td>
</tr>
</tbody></table>
<h2 id="四、题外话：数据请求在created和mouted的区别"><a href="#四、题外话：数据请求在created和mouted的区别" class="headerlink" title="四、题外话：数据请求在created和mouted的区别"></a>四、题外话：数据请求在created和mouted的区别</h2><p><code>created</code>是在组件实例一旦创建完成的时候立刻调用，这时候页面<code>dom</code>节点并未生成；<code>mounted</code>是在页面<code>dom</code>节点渲染完毕之后就立刻执行的。触发时机上<code>created</code>是比<code>mounted</code>要更早的，两者的相同点：都能拿到实例对象的属性和方法。<br>讨论这个问题本质就是触发的时机，放在<code>mounted</code>中的请求有可能导致页面闪动（因为此时页面<code>dom</code>结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在<code>created</code>生命周期当中。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844903811094413320">https://juejin.cn/post/6844903811094413320</a></li>
<li><a href="https://baike.baidu.com/">https://baike.baidu.com/</a></li>
<li><a href="http://cn.vuejs.org/">http://cn.vuejs.org/</a></li>
</ul>
<p>面试官VUE系列总进度：4／33</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484101&idx=1&sn=83b0983f0fca7d7c556e4cb0bff8c9b8&chksm=fc10c093cb674985ef3bd2966f66fc28c5eb70b0037e4be1af4bf54fb6fa9571985abd31d52f&scene=21#wechat_redirect">面试官：说说你对vue的理解?</a>  </p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484119&idx=1&sn=d171b28a00d42549d279498944a98519&chksm=fc10c081cb6749976814aaeda6a6433db418223cec57edda7e15b9e5a0ca69ad549655639c61&scene=21#wechat_redirect">面试官：说说你对SPA（单页应用）的理解?</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484167&idx=1&sn=7b00b4333ab2722f25f12586b70667ca&chksm=fc10c151cb6748476008dab2f4e6c6264f5d19678305955c85cec1b619e56e8f7457b7357fb9&scene=21#wechat_redirect">面试官：说说你对双向绑定的理解?</a>  </p>
<p><img src="https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>说说你对vue的mixin的理解，有什么应用场景？</title>
    <url>/Vue/vue-mixin/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/8a739c90-3b7f-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、mixin是什么"><a href="#一、mixin是什么" class="headerlink" title="一、mixin是什么"></a>一、mixin是什么</h2><p><code>Mixin</code>是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问<code>mixin</code>类的方法而不必成为其子类</p>
<p><code>Mixin</code>类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂</p>
<h3 id="Vue中的mixin"><a href="#Vue中的mixin" class="headerlink" title="Vue中的mixin"></a>Vue中的mixin</h3><p>先来看一下官方定义</p>
<blockquote>
<p><code>mixin</code>（混入），提供了一种非常灵活的方式，来分发 <code>Vue</code> 组件中的可复用功能。</p>
</blockquote>
<p>本质其实就是一个<code>js</code>对象，它可以包含我们组件中任意功能选项，如<code>data</code>、<code>components</code>、<code>methods </code>、<code>created</code>、<code>computed</code>等等</p>
<p>我们只要将共用的功能以对象的方式传入 <code>mixins</code>选项中，当组件使用 <code>mixins</code>对象时所有<code>mixins</code>对象的选项都将被混入该组件本身的选项中来</p>
<p>在<code>Vue</code>中我们可以<strong>局部混入</strong>跟<strong>全局混入</strong></p>
<h3 id="局部混入"><a href="#局部混入" class="headerlink" title="局部混入"></a>局部混入</h3><p>定义一个<code>mixin</code>对象，有组件<code>options</code>的<code>data</code>、<code>methods</code>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件通过<code>mixins</code>属性调用<code>mixin</code>对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;componentA&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>该组件在使用的时候，混合了<code>mixin</code>里面的方法，在自动执行<code>created</code>生命钩子，执行<code>hello</code>方法</p>
<h3 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h3><p>通过<code>Vue.mixin()</code>进行全局的混入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局混入&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）</p>
<p>PS：全局混入常用于插件的编写</p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>当组件存在与<code>mixin</code>对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖<code>mixin</code>的选项</p>
<p>但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行<code>mixin</code>的钩子，再执行组件的钩子</p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立</p>
<p>这时，可以通过<code>Vue</code>的<code>mixin</code>功能将相同或者相似的代码提出来</p>
<p>举个例子</p>
<p>定义一个<code>modal</code>弹窗组件，内部通过<code>isShowing</code>来控制显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Modal</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#modal&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isShowing</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">toggleShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isShowing</span> = !<span class="variable language_">this</span>.<span class="property">isShowing</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个<code>tooltip</code>提示框，内部通过<code>isShowing</code>来控制显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Tooltip</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#tooltip&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isShowing</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">toggleShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isShowing</span> = !<span class="variable language_">this</span>.<span class="property">isShowing</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候<code>mixin</code>就派上用场了</p>
<p>首先抽出共同代码，编写一个<code>mixin</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toggle = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isShowing</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">toggleShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isShowing</span> = !<span class="variable language_">this</span>.<span class="property">isShowing</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个组件在使用上，只需要引入<code>mixin</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Modal</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#modal&#x27;</span>,</span><br><span class="line">  <span class="attr">mixins</span>: [toggle]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tooltip</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#tooltip&#x27;</span>,</span><br><span class="line">  <span class="attr">mixins</span>: [toggle]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面小小的例子，让我们知道了<code>Mixin</code>对于封装一些可复用的功能如此有趣、方便、实用</p>
<h2 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h2><p>首先从<code>Vue.mixin</code>入手</p>
<p>源码位置：&#x2F;src&#x2F;core&#x2F;global-api&#x2F;mixin.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initMixin</span> (<span class="params">Vue: GlobalAPI</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">mixin</span> = <span class="keyword">function</span> (<span class="params">mixin: <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = <span class="title function_">mergeOptions</span>(<span class="variable language_">this</span>.<span class="property">options</span>, mixin)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是调用<code>merOptions</code>方法</p>
<p>源码位置：&#x2F;src&#x2F;core&#x2F;util&#x2F;options.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mergeOptions</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parent: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  child: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  vm?: Component</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Object</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (child.<span class="property">mixins</span>) &#123; <span class="comment">// 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = child.<span class="property">mixins</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    parent = <span class="title function_">mergeOptions</span>(parent, child.<span class="property">mixins</span>[i], vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125; </span><br><span class="line">  <span class="keyword">let</span> key</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="title function_">mergeField</span>(key) <span class="comment">// 先遍历parent的key 调对应的strats[XXX]方法进行合并</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">hasOwn</span>(parent, key)) &#123; <span class="comment">// 如果parent已经处理过某个key 就不处理了</span></span><br><span class="line">      <span class="title function_">mergeField</span>(key) <span class="comment">// 处理child中的key 也就parent中没有处理过的key</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mergeField</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">    options[key] = <span class="title function_">strat</span>(parent[key], child[key], vm, key) <span class="comment">// 根据不同类型的options调用strats中不同的方法进行合并</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的源码，我们得到以下几点：</p>
<ul>
<li>优先递归处理 <code>mixins</code></li>
<li>先遍历合并<code>parent</code> 中的<code>key</code>，调用<code>mergeField</code>方法进行合并，然后保存在变量<code>options</code></li>
<li>再遍历 <code>child</code>，合并补上 <code>parent</code> 中没有的<code>key</code>，调用<code>mergeField</code>方法进行合并，保存在变量<code>options</code></li>
<li>通过 <code>mergeField</code> 函数进行了合并</li>
</ul>
<p>下面是关于<code>Vue</code>的几种类型的合并策略</p>
<ul>
<li>替换型</li>
<li>合并型</li>
<li>队列型</li>
<li>叠加型</li>
</ul>
<h3 id="替换型"><a href="#替换型" class="headerlink" title="替换型"></a>替换型</h3><p>替换型合并有<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.<span class="property">props</span> =</span><br><span class="line">strats.<span class="property">methods</span> =</span><br><span class="line">strats.<span class="property">inject</span> =</span><br><span class="line">strats.<span class="property">computed</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parentVal: ?<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  childVal: ?<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  vm?: Component,</span></span><br><span class="line"><span class="params">  key: string</span></span><br><span class="line"><span class="params"></span>): ?<span class="title class_">Object</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!parentVal) <span class="keyword">return</span> childVal <span class="comment">// 如果parentVal没有值，直接返回childVal</span></span><br><span class="line">  <span class="keyword">const</span> ret = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">// 创建一个第三方对象 ret</span></span><br><span class="line">  <span class="title function_">extend</span>(ret, parentVal) <span class="comment">// extend方法实际是把parentVal的属性复制到ret中</span></span><br><span class="line">  <span class="keyword">if</span> (childVal) <span class="title function_">extend</span>(ret, childVal) <span class="comment">// 把childVal的属性复制到ret中</span></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">strats.<span class="property">provide</span> = mergeDataOrFn</span><br></pre></td></tr></table></figure>

<p>同名的<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code>会被后来者代替</p>
<h3 id="合并型"><a href="#合并型" class="headerlink" title="合并型"></a>合并型</h3><p>和并型合并有：<code>data</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.<span class="property">data</span> = <span class="keyword">function</span>(<span class="params">parentVal, childVal, vm</span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">mergeDataOrFn</span>(</span><br><span class="line">        parentVal, childVal, vm</span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeDataOrFn</span>(<span class="params">parentVal, childVal, vm</span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">mergedInstanceDataFn</span>(<span class="params"></span>) &#123;        </span><br><span class="line">        <span class="keyword">var</span> childData = childVal.<span class="title function_">call</span>(vm, vm) <span class="comment">// 执行data挂的函数得到对象</span></span><br><span class="line">        <span class="keyword">var</span> parentData = parentVal.<span class="title function_">call</span>(vm, vm)        </span><br><span class="line">        <span class="keyword">if</span> (childData) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">mergeData</span>(childData, parentData) <span class="comment">// 将2个对象进行合并                                 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> parentData <span class="comment">// 如果没有childData 直接返回parentData</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeData</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">from</span>) <span class="keyword">return</span> to    </span><br><span class="line">    <span class="keyword">var</span> key, toVal, fromVal;    </span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="keyword">from</span>);   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        key = keys[i];</span><br><span class="line">        toVal = to[key];</span><br><span class="line">        fromVal = <span class="keyword">from</span>[key];    </span><br><span class="line">        <span class="comment">// 如果不存在这个属性，就重新设置</span></span><br><span class="line">        <span class="keyword">if</span> (!to.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="title function_">set</span>(to, key, fromVal);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="comment">// 存在相同属性，合并对象</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> toVal ==<span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> fromVal ==<span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">mergeData</span>(toVal, fromVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mergeData</code>函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并：</p>
<ul>
<li>当目标 data 对象不包含当前属性时，调用 <code>set</code> 方法进行合并（set方法其实就是一些合并重新赋值的方法）</li>
<li>当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性</li>
</ul>
<h3 id="队列性"><a href="#队列性" class="headerlink" title="队列性"></a>队列性</h3><p>队列性合并有：全部生命周期和<code>watch</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeHook</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parentVal: ?<span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;,</span></span><br><span class="line"><span class="params">  childVal: ?<span class="built_in">Function</span> | ?<span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;</span></span><br><span class="line"><span class="params"></span>): ?<span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> childVal</span><br><span class="line">    ? parentVal</span><br><span class="line">      ? parentVal.<span class="title function_">concat</span>(childVal)</span><br><span class="line">      : <span class="title class_">Array</span>.<span class="title function_">isArray</span>(childVal)</span><br><span class="line">        ? childVal</span><br><span class="line">        : [childVal]</span><br><span class="line">    : parentVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">LIFECYCLE_HOOKS</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  strats[hook] = mergeHook</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line">strats.<span class="property">watch</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parentVal,</span></span><br><span class="line"><span class="params">  childVal,</span></span><br><span class="line"><span class="params">  vm,</span></span><br><span class="line"><span class="params">  key</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// work around Firefox&#x27;s Object.prototype.watch...</span></span><br><span class="line">  <span class="keyword">if</span> (parentVal === nativeWatch) &#123; parentVal = <span class="literal">undefined</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (childVal === nativeWatch) &#123; childVal = <span class="literal">undefined</span>; &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (!childVal) &#123; <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(parentVal || <span class="literal">null</span>) &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">assertObjectType</span>(key, childVal, vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!parentVal) &#123; <span class="keyword">return</span> childVal &#125;</span><br><span class="line">  <span class="keyword">var</span> ret = &#123;&#125;;</span><br><span class="line">  <span class="title function_">extend</span>(ret, parentVal);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key$1 <span class="keyword">in</span> childVal) &#123;</span><br><span class="line">    <span class="keyword">var</span> parent = ret[key$1];</span><br><span class="line">    <span class="keyword">var</span> child = childVal[key$1];</span><br><span class="line">    <span class="keyword">if</span> (parent &amp;&amp; !<span class="title class_">Array</span>.<span class="title function_">isArray</span>(parent)) &#123;</span><br><span class="line">      parent = [parent];</span><br><span class="line">    &#125;</span><br><span class="line">    ret[key$1] = parent</span><br><span class="line">      ? parent.<span class="title function_">concat</span>(child)</span><br><span class="line">      : <span class="title class_">Array</span>.<span class="title function_">isArray</span>(child) ? child : [child];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>生命周期钩子和<code>watch</code>被合并为一个数组，然后正序遍历一次执行</p>
<h3 id="叠加型"><a href="#叠加型" class="headerlink" title="叠加型"></a>叠加型</h3><p>叠加型合并有：<code>component</code>、<code>directives</code>、<code>filters</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">strats.<span class="property">components</span>=</span><br><span class="line">strats.<span class="property">directives</span>=</span><br><span class="line"></span><br><span class="line">strats.<span class="property">filters</span> = <span class="keyword">function</span> <span class="title function_">mergeAssets</span>(<span class="params"></span></span><br><span class="line"><span class="params">    parentVal, childVal, vm, key</span></span><br><span class="line"><span class="params"></span>) &#123;    </span><br><span class="line">    <span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="title function_">create</span>(parentVal || <span class="literal">null</span>);    </span><br><span class="line">    <span class="keyword">if</span> (childVal) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> childVal) &#123;</span><br><span class="line">            res[key] = childVal[key];</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>叠加型主要是通过原型链进行层层的叠加</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>替换型策略有<code>props</code>、<code>methods</code>、<code>inject</code>、<code>computed</code>，就是将新的同名参数替代旧的参数</li>
<li>合并型策略是<code>data</code>, 通过<code>set</code>方法进行合并和重新赋值</li>
<li>队列型策略有生命周期函数和<code>watch</code>，原理是将函数存入一个数组，然后正序遍历依次执行</li>
<li>叠加型有<code>component</code>、<code>directives</code>、<code>filters</code>，通过原型链进行层层的叠加</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/31018570">https://zhuanlan.zhihu.com/p/31018570</a></li>
<li><a href="https://juejin.cn/post/6844904015495446536#heading-1">https://juejin.cn/post/6844904015495446536#heading-1</a></li>
<li><a href="https://juejin.cn/post/6844903846775357453">https://juejin.cn/post/6844903846775357453</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue常用的修饰符有哪些有什么应用场景</title>
    <url>/Vue/vue-modifier/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/8f718e30-42c0-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、修饰符是什么"><a href="#一、修饰符是什么" class="headerlink" title="一、修饰符是什么"></a>一、修饰符是什么</h2><p>在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号</p>
<p>在<code>Vue</code>中，修饰符处理了许多<code>DOM</code>事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理</p>
<p><code>vue</code>中修饰符分为以下五种：</p>
<ul>
<li>表单修饰符</li>
<li>事件修饰符</li>
<li>鼠标按键修饰符</li>
<li>键值修饰符</li>
<li>v-bind修饰符</li>
</ul>
<h2 id="二、修饰符的作用"><a href="#二、修饰符的作用" class="headerlink" title="二、修饰符的作用"></a>二、修饰符的作用</h2><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><p>在我们填写表单的时候用得最多的是<code>input</code>标签，指令用得最多的是<code>v-model</code></p>
<p>关于表单的修饰符有如下：</p>
<ul>
<li>lazy</li>
<li>trim</li>
<li>number</li>
</ul>
<h4 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h4><p>在我们填完信息，光标离开标签的时候，才会将值赋予给<code>value</code>，也就是在<code>change</code>事件之后再进行信息同步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">lazy</span>=<span class="string">&quot;value&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>自动过滤用户输入的首空格字符，而中间的空格不会过滤</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">trim</span>=<span class="string">&quot;value&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><p>自动将用户的输入值转为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.<span class="property">number</span>=<span class="string">&quot;age&quot;</span> type=<span class="string">&quot;number&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符：</p>
<ul>
<li>stop</li>
<li>prevent</li>
<li>self</li>
<li>once</li>
<li>capture</li>
<li>passive</li>
<li>native</li>
</ul>
<h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h4><p>阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div @click=<span class="string">&quot;shout(2)&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">//只输出1</span></span><br></pre></td></tr></table></figure>

<h4 id="prevent"><a href="#prevent" class="headerlink" title="prevent"></a>prevent</h4><p>阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form v-<span class="attr">on</span>:submit.<span class="property">prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="self"><a href="#self" class="headerlink" title="self"></a>self</h4><p>只当在 <code>event.target</code> 是当前元素自身时触发处理函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div v-<span class="attr">on</span>:click.<span class="property">self</span>=<span class="string">&quot;doThat&quot;</span>&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击</p>
</blockquote>
<h4 id="once"><a href="#once" class="headerlink" title="once"></a>once</h4><p>绑定了事件以后只能触发一次，第二次就不会触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button @click.<span class="property">once</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;ok&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="capture"><a href="#capture" class="headerlink" title="capture"></a>capture</h4><p>使事件触发从包含这个元素的顶层开始往下触发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div @click.<span class="property">capture</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;</span><br><span class="line">    obj1</span><br><span class="line">&lt;div @click.<span class="property">capture</span>=<span class="string">&quot;shout(2)&quot;</span>&gt;</span><br><span class="line">    obj2</span><br><span class="line">&lt;div @click=<span class="string">&quot;shout(3)&quot;</span>&gt;</span><br><span class="line">    obj3</span><br><span class="line">&lt;div @click=<span class="string">&quot;shout(4)&quot;</span>&gt;</span><br><span class="line">    obj4</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// 输出结构: 1 2 4 3 </span></span><br></pre></td></tr></table></figure>

<h4 id="passive"><a href="#passive" class="headerlink" title="passive"></a>passive</h4><p>在移动端，当我们在监听元素滚动事件的时候，会一直触发<code>onscroll</code>事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给<code>onscroll</code>事件整了一个<code>.lazy</code>修饰符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="line">&lt;!-- 而不会等待 <span class="string">`onScroll`</span> 完成  --&gt;</span><br><span class="line">&lt;!-- 这其中包含 <span class="string">`event.preventDefault()`</span> 的情况 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用,因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。</p>
<p><code>passive</code> 会告诉浏览器你不想阻止事件的默认行为</p>
</blockquote>
<h4 id="native"><a href="#native" class="headerlink" title="native"></a>native</h4><p>让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;my-component v-<span class="attr">on</span>:click.<span class="property">native</span>=<span class="string">&quot;doSomething&quot;</span>&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用.native修饰符来操作普通HTML标签是会令事件失效的</p>
</blockquote>
<h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><p>鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：</p>
<ul>
<li>left 左键点击</li>
<li>right 右键点击</li>
<li>middle 中键点击</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button @click.<span class="property">left</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;ok&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.right</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.middle</span>=<span class="string">&quot;shout(1)&quot;</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h3><p>键盘修饰符是用来修饰键盘事件（<code>onkeyup</code>，<code>onkeydown</code>）的，有如下：</p>
<p><code>keyCode</code>存在很多，但<code>vue</code>为我们提供了别名，分为以下两种：</p>
<ul>
<li>普通键（enter、tab、delete、space、esc、up…）</li>
<li>系统修饰键（ctrl、alt、meta、shift…）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有按键为keyCode的时候才触发</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> @keyup.<span class="property">keyCode</span>=<span class="string">&quot;shout()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>还可以通过以下方式自定义一些全局的键盘码别名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f2</span> = <span class="number">113</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind修饰符"><a href="#v-bind修饰符" class="headerlink" title="v-bind修饰符"></a>v-bind修饰符</h3><p>v-bind修饰符主要是为属性进行操作，用来分别有如下：</p>
<ul>
<li>async</li>
<li>prop</li>
<li>camel</li>
</ul>
<h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>能对<code>props</code>进行一个双向绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;comp :myMessage.<span class="property">sync</span>=<span class="string">&quot;bar&quot;</span>&gt;&lt;/comp&gt; </span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:myMessage&#x27;</span>,params);</span><br></pre></td></tr></table></figure>

<p>以上这种方法相当于以下的简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父亲组件</span></span><br><span class="line">&lt;comp :myMessage=<span class="string">&quot;bar&quot;</span> @<span class="attr">update</span>:myMessage=<span class="string">&quot;func&quot;</span>&gt;&lt;/comp&gt;</span><br><span class="line"><span class="title function_">func</span>(<span class="params">e</span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">bar</span> = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子组件js</span></span><br><span class="line"><span class="title function_">func2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:myMessage&#x27;</span>,params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>async</code>需要注意以下两点：</p>
<ul>
<li><p>使用<code>sync</code>的时候，子组件传递的事件名格式必须为<code>update:value</code>，其中<code>value</code>必须与子组件中<code>props</code>中声明的名称完全一致</p>
</li>
<li><p>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> 不能和表达式一起使用</p>
</li>
<li><p>将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=”&#123; title: doc.title &#125;”</code>，是无法正常工作的</p>
</li>
</ul>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>设置自定义标签属性，避免暴露数据，防止污染HTML结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;uid&quot;</span> title=<span class="string">&quot;title1&quot;</span> value=<span class="string">&quot;1&quot;</span> :index.<span class="property">prop</span>=<span class="string">&quot;index&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="camel"><a href="#camel" class="headerlink" title="camel"></a>camel</h4><p>将命名变为驼峰命名法，如将<code> view-Box</code>属性名转换为 <code>viewBox</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;svg :viewBox=<span class="string">&quot;viewBox&quot;</span>&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景：</p>
<ul>
<li>.stop：阻止事件冒泡</li>
<li>.native：绑定原生事件</li>
<li>.once：事件只执行一次</li>
<li>.self ：将事件绑定在自身身上，相当于阻止事件冒泡</li>
<li>.prevent：阻止默认事件</li>
<li>.caption：用于事件捕获</li>
<li>.once：只触发一次</li>
<li>.keyCode：监听特定键盘按下</li>
<li>.right：右键</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000016786254">https://segmentfault.com/a/1190000016786254</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Vue3 的前端工程化实践</title>
    <url>/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/vue-frontend-engineering/</url>
    <content><![CDATA[<h2 id="一、工程化概述"><a href="#一、工程化概述" class="headerlink" title="一、工程化概述"></a>一、工程化概述</h2><p>Vue3 项目工程化主要包含以下几个方面：</p>
<ol>
<li>项目搭建（Vite + Vue3 + TypeScript）</li>
<li>代码规范</li>
<li>组件设计</li>
<li>状态管理</li>
<li>自动化部署</li>
</ol>
<h2 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h2><h3 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1. 项目搭建"></a>1. 项目搭建</h3><h4 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│   ├── api/          <span class="comment"># API 接口</span></span><br><span class="line">│   ├── assets/       <span class="comment"># 静态资源</span></span><br><span class="line">│   ├── components/   <span class="comment"># 公共组件</span></span><br><span class="line">│   ├── composables/  <span class="comment"># 组合式函数</span></span><br><span class="line">│   ├── layouts/      <span class="comment"># 布局组件</span></span><br><span class="line">│   ├── pages/        <span class="comment"># 页面组件</span></span><br><span class="line">│   ├── stores/       <span class="comment"># Pinia 状态管理</span></span><br><span class="line">│   ├── styles/       <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── types/        <span class="comment"># 类型定义</span></span><br><span class="line">│   └── App.vue       <span class="comment"># 根组件</span></span><br><span class="line">├── env.d.ts          <span class="comment"># 环境变量类型声明</span></span><br><span class="line">├── vite.config.ts    <span class="comment"># Vite 配置</span></span><br><span class="line">└── tsconfig.json     <span class="comment"># TypeScript 配置</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-基础配置"><a href="#1-2-基础配置" class="headerlink" title="1.2 基础配置"></a>1.2 基础配置</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="comment">// 自动导入组件</span></span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;src/types/components.d.ts&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 自动导入 API</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;pinia&#x27;</span>],</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;src/types/auto-imports.d.ts&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;/src&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-组件设计规范"><a href="#2-组件设计规范" class="headerlink" title="2. 组件设计规范"></a>2. 组件设计规范</h3><h4 id="2-1-组件基本结构"><a href="#2-1-组件基本结构" class="headerlink" title="2.1 组件基本结构"></a>2.1 组件基本结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- UserProfile.vue --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface Props &#123;</span><br><span class="line">  userId: string</span><br><span class="line">  role?: &#x27;admin&#x27; | &#x27;user&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 属性定义</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  role: &#x27;user&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 事件定义</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;update&#x27;, id: string): void</span><br><span class="line">  (e: &#x27;delete&#x27;, id: string): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// 组合式函数</span><br><span class="line">const &#123; user, loading, error &#125; = useUser(props.userId)</span><br><span class="line"></span><br><span class="line">// 方法定义</span><br><span class="line">const handleUpdate = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;update&#x27;, props.userId)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-profile&quot;&gt;</span><br><span class="line">    &lt;el-card v-loading=&quot;loading&quot;&gt;</span><br><span class="line">      &lt;template #header&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; user?.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">        &lt;el-descriptions :column=&quot;2&quot;&gt;</span><br><span class="line">          &lt;el-descriptions-item label=&quot;Email&quot;&gt;</span><br><span class="line">            &#123;&#123; user?.email &#125;&#125;</span><br><span class="line">          &lt;/el-descriptions-item&gt;</span><br><span class="line">          &lt;el-descriptions-item label=&quot;Role&quot;&gt;</span><br><span class="line">            &#123;&#123; props.role &#125;&#125;</span><br><span class="line">          &lt;/el-descriptions-item&gt;</span><br><span class="line">        &lt;/el-descriptions&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div class=&quot;actions&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;handleUpdate&quot;&gt;</span><br><span class="line">          更新</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.user-profile &#123;</span><br><span class="line">  .user-info &#123;</span><br><span class="line">    margin: 16px 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .actions &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-组合式函数"><a href="#2-2-组合式函数" class="headerlink" title="2.2 组合式函数"></a>2.2 组合式函数</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// composables/useUser.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useUser</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = ref&lt;<span class="title class_">User</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> error = ref&lt;<span class="title class_">Error</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchUser</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> userApi.<span class="title function_">getUser</span>(id)</span><br><span class="line">      user.<span class="property">value</span> = data</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      error.<span class="property">value</span> = e <span class="keyword">as</span> <span class="title class_">Error</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUser</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    user,</span><br><span class="line">    loading,</span><br><span class="line">    error,</span><br><span class="line">    <span class="attr">refresh</span>: fetchUser</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-状态管理"><a href="#3-状态管理" class="headerlink" title="3. 状态管理"></a>3. 状态管理</h3><h4 id="3-1-Pinia-Store-设计"><a href="#3-1-Pinia-Store-设计" class="headerlink" title="3.1 Pinia Store 设计"></a>3.1 Pinia Store 设计</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stores/user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">currentUser</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="title class_">User</span> | <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">users</span>: [] <span class="keyword">as</span> <span class="title class_">User</span>[],</span><br><span class="line">    <span class="attr">loading</span>: <span class="literal">false</span></span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">isAdmin</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">currentUser</span>?.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">userById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) =&gt;</span> state.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> userApi.<span class="title function_">getUsers</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span> = users</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updateUser</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">await</span> userApi.<span class="title function_">updateUser</span>(id, data)</span><br><span class="line">      <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id)</span><br><span class="line">      <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>[index] = user</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-路由配置"><a href="#4-路由配置" class="headerlink" title="4. 路由配置"></a>4. 路由配置</h3><h4 id="4-1-基于角色的路由控制"><a href="#4-1-基于角色的路由控制" class="headerlink" title="4.1 基于角色的路由控制"></a>4.1 基于角色的路由控制</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Dashboard.vue&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/pages/Admin.vue&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span>, <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !userStore.<span class="property">currentUser</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">roles</span> &amp;&amp; !to.<span class="property">meta</span>.<span class="property">roles</span>.<span class="title function_">includes</span>(userStore.<span class="property">currentUser</span>?.<span class="property">role</span>)) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="string">&#x27;/403&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h3 id="5-API-封装"><a href="#5-API-封装" class="headerlink" title="5. API 封装"></a>5. API 封装</h3><h4 id="5-1-请求封装"><a href="#5-1-请求封装" class="headerlink" title="5.1 请求封装"></a>5.1 请求封装</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/request.ts</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosRequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">instance</span>: <span class="title class_">AxiosInstance</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(config)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupInterceptors</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setupInterceptors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加 token</span></span><br><span class="line">        <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">          config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">      <span class="function"><span class="params">response</span> =&gt;</span> response.<span class="property">data</span>,</span><br><span class="line">      <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理未授权</span></span><br><span class="line">          router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> request&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="title function_">request</span>(config)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">Request</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_API_BASE_URL</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="5-2-API-模块化"><a href="#5-2-API-模块化" class="headerlink" title="5.2 API 模块化"></a>5.2 API 模块化</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api/user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> userApi = &#123;</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">request</span>&lt;<span class="title class_">User</span>[]&gt;(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">getUser</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">request</span>&lt;<span class="title class_">User</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">updateUser</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> request.<span class="property">request</span>&lt;<span class="title class_">User</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">      data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-自动化部署"><a href="#6-自动化部署" class="headerlink" title="6. 自动化部署"></a>6. 自动化部署</h3><h4 id="6-1-构建配置"><a href="#6-1-构建配置" class="headerlink" title="6.1 构建配置"></a>6.1 构建配置</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts 生产环境配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;es2015&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: <span class="string">&#x27;terser&#x27;</span>,</span><br><span class="line">    <span class="attr">cssCodeSplit</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">manualChunks</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;vue-vendor&#x27;</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;pinia&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;element-plus&#x27;</span>: [<span class="string">&#x27;element-plus&#x27;</span>],</span><br><span class="line">          <span class="string">&#x27;utils&#x27;</span>: [<span class="regexp">/src\/utils/</span>],</span><br><span class="line">          <span class="string">&#x27;components&#x27;</span>: [<span class="regexp">/src\/components/</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="6-2-Docker-部署"><a href="#6-2-Docker-部署" class="headerlink" title="6.2 Docker 部署"></a>6.2 Docker 部署</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm ci</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/dist /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://v3.vuejs.org/">Vue3 官方文档</a></li>
<li><a href="https://vitejs.dev/">Vite 官方文档</a></li>
<li><a href="https://pinia.vuejs.org/">Pinia 官方文档</a></li>
<li><a href="https://router.vuejs.org/">Vue Router 文档</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
        <tag>Vue3</tag>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>你知道vue中key的原理吗？说说你对它的理解</title>
    <url>/Vue/vue-key/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/bc6e9540-3f41-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、Key是什么"><a href="#一、Key是什么" class="headerlink" title="一、Key是什么"></a>一、Key是什么</h2><p>开始之前，我们先还原两个实际工作场景</p>
<ol>
<li>当我们在使用<code>v-for</code>时，需要给单元加上<code>key</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>用<code>+new Date()</code>生成的时间戳作为<code>key</code>，手动强制触发重新渲染<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Comp</span> :key=<span class="string">&quot;+new Date()&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>那么这背后的逻辑是什么，<code>key</code>的作用又是什么？</p>
<p>一句话来讲</p>
<blockquote>
<p>key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点</p>
</blockquote>
<h3 id="场景背后的逻辑"><a href="#场景背后的逻辑" class="headerlink" title="场景背后的逻辑"></a>场景背后的逻辑</h3><p>当我们在使用<code>v-for</code>时，需要给单元加上<code>key</code></p>
<ul>
<li><p>如果不用key，Vue会采用就地复地原则：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。</p>
</li>
<li><p>如果使用了key，Vue会根据keys的顺序记录element，曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed</p>
</li>
</ul>
<p>用<code>+new Date()</code>生成的时间戳作为<code>key</code>，手动强制触发重新渲染</p>
<ul>
<li>当拥有新值的rerender作为key时，拥有了新key的Comp出现了，那么旧key Comp会被移除，新key Comp触发渲染</li>
</ul>
<h2 id="二、设置key与不设置key区别"><a href="#二、设置key与不设置key区别" class="headerlink" title="二、设置key与不设置key区别"></a>二、设置key与不设置key区别</h2><p>举个例子：</p>
<p>创建一个实例，2秒后往<code>items</code>数组插入数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123; <span class="attr">items</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>] &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">mounted</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;f&#x27;</span>)  <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在不使用<code>key</code>的情况，<code>vue</code>会进行这样的操作：</p>
<p> <img src="https://static.vue-js.com/c9da6790-3f41-11eb-85f6-6fac77c0c9b3.png"></p>
<p>分析下整体流程：</p>
<ul>
<li>比较A，A，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>比较B，B，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>比较C，F，相同类型的节点，进行<code>patch</code>，数据不同，发生<code>dom</code>操作</li>
<li>比较D，C，相同类型的节点，进行<code>patch</code>，数据不同，发生<code>dom</code>操作</li>
<li>比较E，D，相同类型的节点，进行<code>patch</code>，数据不同，发生<code>dom</code>操作</li>
<li>循环结束，将E插入到<code>DOM</code>中</li>
</ul>
<p>一共发生了3次更新，1次插入操作</p>
<p>在使用<code>key</code>的情况：<code>vue</code>会进行这样的操作：</p>
<ul>
<li>比较A，A，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>比较B，B，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>比较C，F，不相同类型的节点<ul>
<li>比较E、E，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
</ul>
</li>
<li>比较D、D，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>比较C、C，相同类型的节点，进行<code>patch</code>，但数据相同，不发生<code>dom</code>操作</li>
<li>循环结束，将F插入到C之前</li>
</ul>
<p>一共发生了0次更新，1次插入操作</p>
<p>通过上面两个小例子，可见设置<code>key</code>能够大大减少对页面的<code>DOM</code>操作，提高了<code>diff</code>效率</p>
<h3 id="设置key值一定能提高diff效率吗？"><a href="#设置key值一定能提高diff效率吗？" class="headerlink" title="设置key值一定能提高diff效率吗？"></a>设置key值一定能提高diff效率吗？</h3><p>其实不然，文档中也明确表示</p>
<blockquote>
<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素</p>
</blockquote>
<p>这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</p>
<p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code>，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升</p>
<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p>源码位置：core&#x2F;vdom&#x2F;patch.js</p>
<p>这里判断是否为同一个<code>key</code>，首先判断的是<code>key</code>值是否相等如果没有设置<code>key</code>，那么<code>key</code>为<code>undefined</code>，这时候<code>undefined</code>是恒等于<code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sameVnode</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        a.<span class="property">key</span> === b.<span class="property">key</span> &amp;&amp; (</span><br><span class="line">            (</span><br><span class="line">                a.<span class="property">tag</span> === b.<span class="property">tag</span> &amp;&amp;</span><br><span class="line">                a.<span class="property">isComment</span> === b.<span class="property">isComment</span> &amp;&amp;</span><br><span class="line">                <span class="title function_">isDef</span>(a.<span class="property">data</span>) === <span class="title function_">isDef</span>(b.<span class="property">data</span>) &amp;&amp;</span><br><span class="line">                <span class="title function_">sameInputType</span>(a, b)</span><br><span class="line">            ) || (</span><br><span class="line">                <span class="title function_">isTrue</span>(a.<span class="property">isAsyncPlaceholder</span>) &amp;&amp;</span><br><span class="line">                a.<span class="property">asyncFactory</span> === b.<span class="property">asyncFactory</span> &amp;&amp;</span><br><span class="line">                <span class="title function_">isUndef</span>(b.<span class="property">asyncFactory</span>.<span class="property">error</span>)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>updateChildren</code>方法中会对新旧<code>vnode</code>进行<code>diff</code>，然后将比对出的结果用来更新真实的<code>DOM</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldStartVnode)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldEndVnode)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldKeyToIdx)) oldKeyToIdx = <span class="title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">            idxInOld = <span class="title function_">isDef</span>(newStartVnode.<span class="property">key</span>)</span><br><span class="line">                ? oldKeyToIdx[newStartVnode.<span class="property">key</span>]</span><br><span class="line">                : <span class="title function_">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isUndef</span>(idxInOld)) &#123; <span class="comment">// New element</span></span><br><span class="line">                <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                vnodeToMove = oldCh[idxInOld]</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">                    <span class="title function_">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">                    oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">                    canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, vnodeToMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// same key but different element. treat as new element</span></span><br><span class="line">                    <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            newStartVnode = newCh[++newStartIdx]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844903826693029895">https://juejin.cn/post/6844903826693029895</a></li>
<li><a href="https://juejin.cn/post/6844903985397104648">https://juejin.cn/post/6844903985397104648</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的$nextTick有什么作用？</title>
    <url>/Vue/vue-nexttick/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/76484d30-3aba-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、NextTick是什么"><a href="#一、NextTick是什么" class="headerlink" title="一、NextTick是什么"></a>一、NextTick是什么</h2><p>官方对其的定义</p>
<blockquote>
<p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>
</blockquote>
<p>什么意思呢？</p>
<p>我们可以理解成，<code>Vue</code> 在更新 <code>DOM</code> 时是异步执行的。当数据发生变化，<code>Vue</code>将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新</p>
<p>举例一下</p>
<p><code>Html</code>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>构建一个<code>vue</code>实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;原始值&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改<code>message</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值1&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值2&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这时候想获取页面最新的<code>DOM</code>节点，却发现获取到的是旧值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// 原始值</span></span><br></pre></td></tr></table></figure>

<p>这是因为<code>message</code>数据在发现变化的时候，<code>vue</code>并不会立刻去更新<code>Dom</code>，而是将修改数据的操作放在了一个异步操作队列中</p>
<p>如果我们一直修改相同数据，异步操作队列还会进行去重</p>
<p>等待同一事件循环中的所有数据变化完成之后，会将队列中的事件拿来进行处理，进行<code>DOM</code>的更新</p>
<h4 id="为什么要有nexttick"><a href="#为什么要有nexttick" class="headerlink" title="为什么要有nexttick"></a>为什么要有nexttick</h4><p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;num&#125;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)&#123;</span><br><span class="line">    num = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有 <code>nextTick</code> 更新机制，那么 <code>num</code> 每次更新值都会触发视图更新(上面这段代码也就是会更新10万次视图)，有了<code>nextTick</code>机制，只需要更新一次，所以<code>nextTick</code>本质是一种优化策略</p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></p>
<p>第一个参数为：回调函数（可以获取最近的<code>DOM</code>结构）</p>
<p>第二个参数为：执行函数上下文</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line">vm.<span class="property">message</span> = <span class="string">&#x27;修改后的值&#x27;</span></span><br><span class="line"><span class="comment">// DOM 还没有更新</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// 原始的值</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// 修改后的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件内使用 <code>vm.$nextTick()</code> 实例方法只需要通过<code>this.$nextTick()</code>，并且回调函数中的 <code>this</code> 将自动绑定到当前的 <code>Vue</code> 实例上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;原始的值&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;修改后的值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>$nextTick()</code> 会返回一个 <code>Promise</code> 对象，可以是用<code>async/await</code>完成相同作用的事情</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;修改后的值&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;原始的值&#x27;</span></span><br><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.$nextTick()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>) <span class="comment">// =&gt; &#x27;修改后的值&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、实现原理"><a href="#三、实现原理" class="headerlink" title="三、实现原理"></a>三、实现原理</h2><p>源码位置：<code>/src/core/util/next-tick.js</code></p>
<p><code>callbacks</code>也就是异步操作队列</p>
<p><code>callbacks</code>新增回调函数后又执行了<code>timerFunc</code>函数，<code>pending</code>是用来标识同一个时间只能执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb?: <span class="built_in">Function</span>, ctx?: <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cb 回调函数会经统一处理压入 callbacks 数组</span></span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// 给 cb 回调函数执行加上了 try-catch 错误处理</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(ctx);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      <span class="title function_">_resolve</span>(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行异步延迟函数 timerFunc</span></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">timerFunc</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 nextTick 没有传入函数参数的时候，返回一个 Promise 化的调用</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>timerFunc</code>函数定义，这里是根据当前环境支持什么方法则确定调用哪个，分别有：</p>
<p><code>Promise.then</code>、<code>MutationObserver</code>、<code>setImmediate</code>、<code>setTimeout</code></p>
<p>通过上面任意一种方法，进行降级操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> isUsingMicroTask = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">  <span class="comment">//判断1：是否原生支持Promise</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks)</span><br><span class="line">    <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">  <span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">  <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="comment">//判断2：是否原生支持MutationObserver</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(setImmediate)) &#123;</span><br><span class="line">  <span class="comment">//判断3：是否原生支持setImmediate</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//判断4：上面都不行，直接用setTimeout</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论是微任务还是宏任务，都会放到<code>flushCallbacks</code>使用</p>
<p>这里将<code>callbacks</code>里面的函数复制一份，同时<code>callbacks</code>置空</p>
<p>依次执行<code>callbacks</code>里面的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span> (<span class="params"></span>) &#123;</span><br><span class="line">  pending = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> copies = callbacks.<span class="title function_">slice</span>(<span class="number">0</span>)</span><br><span class="line">  callbacks.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    copies[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<ol>
<li>把回调函数放入callbacks等待执行</li>
<li>将执行函数放到微任务或者宏任务中</li>
<li>事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844904147804749832">https://juejin.cn/post/6844904147804749832</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.observable你有了解过吗？说说看</title>
    <url>/Vue/vue-observable/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/193782e0-3e7b-11eb-ab90-d9ae814b240d.png">  </p>
<h2 id="一、Observable-是什么"><a href="#一、Observable-是什么" class="headerlink" title="一、Observable 是什么"></a>一、Observable 是什么</h2><p><code>Observable</code> 翻译过来我们可以理解成<strong>可观察的</strong></p>
<p>我们先来看一下其在<code>Vue</code>中的定义</p>
<blockquote>
<p><code>Vue.observable</code>，让一个对象变成响应式数据。<code>Vue</code> 内部会用它来处理 <code>data</code> 函数返回的对象</p>
</blockquote>
<p>返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">observable</span>(&#123; count : <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>其作用等同于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">vue</span>(&#123; count : <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>在 <code>Vue 2.x</code> 中，被传入的对象会直接被 <code>Vue.observable</code> 变更，它和被返回的对象是同一个对象</p>
<p>在 <code>Vue 3.x</code> 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的</p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>在非父子组件通信时，可以使用通常的<code>bus</code>或者使用<code>vuex</code>，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，<code>observable</code>就是一个很好的选择</p>
<p>创建一个<code>js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue</span></span><br><span class="line"><span class="string">// 创建state对象，使用observable让state对象可响应</span></span><br><span class="line"><span class="string">export let state = Vue.observable(&#123;</span></span><br><span class="line"><span class="string">  name: &#x27;</span>张三<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  &#x27;</span>age<span class="string">&#x27;: 38</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">// 创建对应的方法</span></span><br><span class="line"><span class="string">export let mutations = &#123;</span></span><br><span class="line"><span class="string">  changeName(name) &#123;</span></span><br><span class="line"><span class="string">    state.name = name</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  setAge(age) &#123;</span></span><br><span class="line"><span class="string">    state.age = age</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在<code>.vue</code>文件中直接使用即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    姓名：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    年龄：&#123;&#123; age &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName(&#x27;李四&#x27;)&quot;</span>&gt;</span>改变姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setAge(18)&quot;</span>&gt;</span>改变年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; state, mutations &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  // 在计算属性中拿到值</span></span><br><span class="line"><span class="string">  computed: &#123;</span></span><br><span class="line"><span class="string">    name() &#123;</span></span><br><span class="line"><span class="string">      return state.name</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    age() &#123;</span></span><br><span class="line"><span class="string">      return state.age</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  // 调用mutations里面的方法，更新数据</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    changeName: mutations.changeName,</span></span><br><span class="line"><span class="string">    setAge: mutations.setAge</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p>源码位置：src\core\observer\index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span> (<span class="params">value: any, asRootData: ?boolean</span>): <span class="title class_">Observer</span> | <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(value) || value <span class="keyword">instanceof</span> <span class="title class_">VNode</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">ob</span>: <span class="title class_">Observer</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="comment">// 判断是否存在__ob__响应式属性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(value, <span class="string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class="property">__ob__</span> <span class="keyword">instanceof</span> <span class="title class_">Observer</span>) &#123;</span><br><span class="line">    ob = value.<span class="property">__ob__</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    shouldObserve &amp;&amp;</span><br><span class="line">    !<span class="title function_">isServerRendering</span>() &amp;&amp;</span><br><span class="line">    (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) || <span class="title function_">isPlainObject</span>(value)) &amp;&amp;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(value) &amp;&amp;</span><br><span class="line">    !value.<span class="property">_isVue</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 实例化Observer响应式对象</span></span><br><span class="line">    ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.<span class="property">vmCount</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Observer</code>类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="attr">value</span>: any;</span><br><span class="line">    <span class="attr">dep</span>: <span class="title class_">Dep</span>;</span><br><span class="line">    <span class="attr">vmCount</span>: number; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params">value: any</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vmCount</span> = <span class="number">0</span></span><br><span class="line">        <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">                <span class="title function_">protoAugment</span>(value, arrayMethods)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象是一个对象，进入walk方法</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>walk</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">walk</span> (<span class="attr">obj</span>: <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="comment">// 遍历key，通过defineReactive创建响应式对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">defineReactive</span>(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>defineReactive</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineReactive</span> (<span class="params"></span></span><br><span class="line"><span class="params">  obj: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  key: string,</span></span><br><span class="line"><span class="params">  val: any,</span></span><br><span class="line"><span class="params">  customSetter?: ?<span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params">  shallow?: boolean</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.<span class="property">configurable</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.<span class="property">get</span></span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.<span class="property">set</span></span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(val)</span><br><span class="line">  <span class="comment">// 接下来调用Object.defineProperty()给对象定义响应式属性</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        <span class="title function_">customSetter</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// #7981: for accessor properties without setter</span></span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="comment">// 对观察者watchers进行通知,state就成了全局响应式对象</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blog.csdn.net/qq_32682301/article/details/105419673">https://blog.csdn.net/qq_32682301/article/details/105419673</a></li>
<li><a href="https://wbbyouzi.com/archives/343">https://wbbyouzi.com/archives/343</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？</title>
    <url>/Vue/vue-permission/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/397e1fa0-4dad-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>权限是对特定资源的访问许可，所谓权限控制，也就是确保用户只能访问到被分配的资源</p>
<p>而前端权限归根结底是请求的发起权，请求的发起可能有下面两种形式触发</p>
<ul>
<li>页面加载触发</li>
<li>页面上的按钮点击触发</li>
</ul>
<p>总的来说，所有的请求发起都触发自前端路由或视图</p>
<p>所以我们可以从这两方面入手，对触发权限的源头进行控制，最终要实现的目标是：</p>
<ul>
<li><p>路由方面，用户登录后只能看到自己有权访问的导航菜单，也只能访问自己有权访问的路由地址，否则将跳转 <code>4xx</code> 提示页</p>
</li>
<li><p>视图方面，用户只能看到自己有权浏览的内容和有权操作的控件</p>
</li>
<li><p>最后再加上请求控制作为最后一道防线，路由可能配置失误，按钮可能忘了加权限，这种时候请求控制可以用来兜底，越权请求将在前端被拦截</p>
</li>
</ul>
<h2 id="二、如何做"><a href="#二、如何做" class="headerlink" title="二、如何做"></a>二、如何做</h2><p>前端权限控制可以分为四个方面：</p>
<ul>
<li>接口权限</li>
<li>按钮权限</li>
<li>菜单权限</li>
<li>路由权限</li>
</ul>
<h3 id="接口权限"><a href="#接口权限" class="headerlink" title="接口权限"></a>接口权限</h3><p>接口权限目前一般采用<code>jwt</code>的形式来验证，没有通过的话一般返回<code>401</code>，跳转到登录页面重新进行登录</p>
<p>登录完拿到<code>token</code>，将<code>token</code>存起来，通过<code>axios</code>请求拦截器进行拦截，每次请求的时候头部携带<code>token</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = cookie.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;,&#123;response&#125;=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">40099</span> || response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">40098</span>) &#123; <span class="comment">//token过期或者错误</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="路由权限控制"><a href="#路由权限控制" class="headerlink" title="路由权限控制"></a>路由权限控制</h3><p><strong>方案一</strong></p>
<p>初始化即挂载全部路由，并且在路由上标记相应的权限信息，每次路由跳转前做校验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routerMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/permission&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/permission/index&#x27;</span>,</span><br><span class="line">    <span class="attr">alwaysShow</span>: <span class="literal">true</span>, <span class="comment">// will always show the root menu</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;permission&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;lock&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>] <span class="comment">// you can set roles in root nav</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/permission/page&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;pagePermission&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;pagePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>] <span class="comment">// or you can only set roles in sub nav</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/permission/directive&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;directivePermission&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;directivePermission&#x27;</span></span><br><span class="line">        <span class="comment">// if do not set roles, means: this page does not require permission</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种方式存在以下四种缺点：</p>
<ul>
<li><p>加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。</p>
</li>
<li><p>全局路由守卫里，每次路由跳转都要做权限判断。</p>
</li>
<li><p>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译</p>
</li>
<li><p>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</p>
</li>
</ul>
<p><strong>方案二</strong></p>
<p>初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。如果用户通过URL进行强制访问，则会直接进入404，相当于从源头上做了控制</p>
<p>登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用<code>addRoutes</code>添加路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span> <span class="comment">// progress bar</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span><span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span> <span class="comment">// getToken from cookie</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">configure</span>(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)<span class="comment">// NProgress Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// permission judge function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasPermission</span>(<span class="params">roles, permissionRoles</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (roles.<span class="title function_">indexOf</span>(<span class="string">&#x27;admin&#x27;</span>) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// admin permission passed directly</span></span><br><span class="line">  <span class="keyword">if</span> (!permissionRoles) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> roles.<span class="title function_">some</span>(<span class="function"><span class="params">role</span> =&gt;</span> permissionRoles.<span class="title function_">indexOf</span>(role) &gt;= <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/authredirect&#x27;</span>]<span class="comment">// no redirect whitelist</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>() <span class="comment">// start progress bar</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123; <span class="comment">// determine if there has token</span></span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// if current page is dashboard will not trigger	afterEach hook, so manually handle it</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GetUserInfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">          <span class="keyword">const</span> roles = res.<span class="property">data</span>.<span class="property">roles</span> <span class="comment">// note: roles must be a array! such as: [&#x27;editor&#x27;,&#x27;develop&#x27;]</span></span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123; roles &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.<span class="title function_">addRoutes</span>(store.<span class="property">getters</span>.<span class="property">addRouters</span>) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;FedLogOut&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(err || <span class="string">&#x27;Verification failed, please login again&#x27;</span>)</span><br><span class="line">            <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">hasPermission</span>(store.<span class="property">getters</span>.<span class="property">roles</span>, to.<span class="property">meta</span>.<span class="property">roles</span>)) &#123;</span><br><span class="line">          <span class="title function_">next</span>()<span class="comment">//</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/401&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span>, <span class="attr">query</span>: &#123; <span class="attr">noGoBack</span>: <span class="literal">true</span> &#125;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可删 ↑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token*/</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// if current page is login will not trigger afterEach hook, so manually handle it</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// finish progress bar</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按需挂载，路由就需要知道用户的路由权限，也就是在用户登录进来的时候就要知道当前用户拥有哪些路由权限</p>
<p>这种方式也存在了以下的缺点：</p>
<ul>
<li>全局路由守卫里，每次路由跳转都要做判断</li>
<li>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译</li>
<li>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</li>
</ul>
<h3 id="菜单权限"><a href="#菜单权限" class="headerlink" title="菜单权限"></a>菜单权限</h3><p>菜单权限可以理解成将页面与理由进行解耦</p>
<h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>菜单与路由分离，菜单由后端返回</p>
<p>前端定义路由信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/pages/Login.vue&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>name</code>字段都不为空，需要根据此字段与后端返回菜单做关联，后端返回的菜单信息中必须要有<code>name</code>对应的字段，并且做唯一性校验</p>
<p>全局路由守卫里做判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasPermission</span>(<span class="params">router, accessMenu</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(router.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> menu = <span class="title class_">Util</span>.<span class="title function_">getMenuByName</span>(router.<span class="property">name</span>, accessMenu);</span><br><span class="line">  <span class="keyword">if</span> (menu.<span class="property">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">userInfo</span>;</span><br><span class="line">    <span class="keyword">if</span> (!userInfo.<span class="property">name</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&quot;GetUserInfo&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;updateAccessMenu&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;home_index&#x27;</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//Util.toDefaultPage([...routers], to.name, router, next);</span></span><br><span class="line">          <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)<span class="comment">//菜单权限更新完成,重新进一次当前路由</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;home_index&#x27;</span> &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">hasPermission</span>(to, store.<span class="property">getters</span>.<span class="property">accessMenu</span>)) &#123;</span><br><span class="line">          <span class="title class_">Util</span>.<span class="title function_">toDefaultPage</span>(store.<span class="property">getters</span>.<span class="property">accessMenu</span>,to, routes, next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/403&#x27;</span>,<span class="attr">replace</span>:<span class="literal">true</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> menu = <span class="title class_">Util</span>.<span class="title function_">getMenuByName</span>(to.<span class="property">name</span>, store.<span class="property">getters</span>.<span class="property">accessMenu</span>);</span><br><span class="line">  <span class="title class_">Util</span>.<span class="title function_">title</span>(menu.<span class="property">title</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的<code>name</code>与路由的<code>name</code>是一一对应的，而后端返回的菜单就已经是经过权限过滤的</p>
<p>如果根据路由<code>name</code>找不到对应的菜单，就表示用户有没权限访问</p>
<p>如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过<code>addRoutes</code>动态挂载</p>
<p>这种方式的缺点：</p>
<ul>
<li>菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用</li>
<li>全局路由守卫里，每次路由跳转都要做判断</li>
</ul>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>菜单和路由都由后端返回</p>
<p>前端统一定义路由组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../pages/Home.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserInfo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../pages/UserInfo.vue&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">home</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="title class_">UserInfo</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>后端路由组件返回以下格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&quot;home&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/userinfo&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&quot;userInfo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在将后端返回路由通过<code>addRoutes</code>动态挂载之间，需要将数据处理一下，将<code>component</code>字段换为真正的组件</p>
<p>如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段，前端拿到数据也要做相应的处理</p>
<p>这种方法也会存在缺点：</p>
<ul>
<li>全局路由守卫里，每次路由跳转都要做判断</li>
<li>前后端的配合要求更高</li>
</ul>
<h3 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h3><h4 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h4><p>按钮权限也可以用<code>v-if</code>判断</p>
<p>但是如果页面过多，每个页面页面都要获取用户权限<code>role</code>和路由表里的<code>meta.btnPermissions</code>，然后再做判断</p>
<p>这种方式就不展开举例了</p>
<h4 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h4><p>通过自定义指令进行按钮权限的判断</p>
<p>首先配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/permission&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;权限测试&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">btnPermissions</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;supper&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//页面需要的权限</span></span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;supper&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title function_">_import</span>(<span class="string">&#x27;system/supper&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;权限测试页&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">btnPermissions</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;supper&#x27;</span>]</span><br><span class="line">        &#125; <span class="comment">//页面需要的权限</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title function_">_import</span>(<span class="string">&#x27;system/normal&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;权限测试页&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">btnPermissions</span>: [<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line">        &#125; <span class="comment">//页面需要的权限</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义权限鉴定指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">/**权限指令**/</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取页面按钮权限</span></span><br><span class="line">        <span class="keyword">let</span> btnPermissionsArr = [];</span><br><span class="line">        <span class="keyword">if</span>(binding.<span class="property">value</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果指令传值，获取指令参数，根据指令参数和当前登录人按钮权限做比较。</span></span><br><span class="line">            btnPermissionsArr = <span class="title class_">Array</span>.<span class="title function_">of</span>(binding.<span class="property">value</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 否则获取路由中的参数，根据路由的btnPermissionsArr和当前登录人按钮权限做比较。</span></span><br><span class="line">            btnPermissionsArr = vnode.<span class="property">context</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">btnPermissions</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.$_has(btnPermissionsArr)) &#123;</span><br><span class="line">            el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 权限检查方法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$_has</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> isExist = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 获取用户按钮权限</span></span><br><span class="line">    <span class="keyword">let</span> btnPermissionsStr = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;btnPermissions&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (btnPermissionsStr == <span class="literal">undefined</span> || btnPermissionsStr == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value.<span class="title function_">indexOf</span>(btnPermissionsStr) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        isExist = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isExist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;has&#125;</span><br></pre></td></tr></table></figure>

<p>在使用的按钮中只需要引用<code>v-has</code>指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-button @click=<span class="string">&#x27;editClick&#x27;</span> type=<span class="string">&quot;primary&quot;</span> v-has&gt;编辑&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关于权限如何选择哪种合适的方案，可以根据自己项目的方案项目，如考虑路由与菜单是否分离</p>
<p>权限需要前后端结合，前端尽可能的去控制，更多的需要后台判断</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/b-D2eH1mLwL_FkaZwjueSw">https://mp.weixin.qq.com/s/b-D2eH1mLwL_FkaZwjueSw</a></li>
<li><a href="https://segmentfault.com/a/1190000020887109">https://segmentfault.com/a/1190000020887109</a></li>
<li><a href="https://juejin.cn/post/6844903648057622536#heading-6">https://juejin.cn/post/6844903648057622536#heading-6</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>v-show和v-if有什么区别？使用场景分别是什么？</title>
    <url>/Vue/vue-show-if/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/d21c3c50-3acb-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、v-show与v-if的共同点"><a href="#一、v-show与v-if的共同点" class="headerlink" title="一、v-show与v-if的共同点"></a>一、v-show与v-if的共同点</h2><p>我们都知道在 <code>vue</code> 中 <code>v-show </code> 与 <code>v-if</code> 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示</p>
<p>在用法上也是相同的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Model</span> v-show=<span class="string">&quot;isShow&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Model</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>当表达式为<code>true</code>的时候，都会占据页面的位置</li>
<li>当表达式都为<code>false</code>时，都不会占据页面位置</li>
</ul>
<h2 id="二、v-show与v-if的区别"><a href="#二、v-show与v-if的区别" class="headerlink" title="二、v-show与v-if的区别"></a>二、v-show与v-if的区别</h2><ul>
<li>控制手段不同</li>
<li>编译过程不同</li>
<li>编译条件不同</li>
</ul>
<p>控制手段：<code>v-show</code>隐藏则是为该元素添加<code>css--display:none</code>，<code>dom</code>元素依旧还在。<code>v-if</code>显示隐藏是将<code>dom</code>元素整个添加或删除</p>
<p>编译过程：<code>v-if</code>切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于css切换</p>
<p>编译条件：<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</p>
<ul>
<li><p><code>v-show</code> 由<code>false</code>变为<code>true</code>的时候不会触发组件的生命周期</p>
</li>
<li><p><code>v-if</code>由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>create</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>方法</p>
</li>
</ul>
<p>性能消耗：<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗；</p>
<h2 id="三、v-show与v-if原理分析"><a href="#三、v-show与v-if原理分析" class="headerlink" title="三、v-show与v-if原理分析"></a>三、v-show与v-if原理分析</h2><p>具体解析流程这里不展开讲，大致流程如下</p>
<ul>
<li>将模板<code>template</code>转为<code>ast</code>结构的<code>JS</code>对象</li>
<li>用<code>ast</code>得到的<code>JS</code>对象拼装<code>render</code>和<code>staticRenderFns</code>函数</li>
<li><code>render</code>和<code>staticRenderFns</code>函数被调用后生成虚拟<code>VNODE</code>节点，该节点包含创建<code>DOM</code>节点所需信息</li>
<li><code>vm.patch</code>函数通过虚拟<code>DOM</code>算法利用<code>VNODE</code>节点创建真实<code>DOM</code>节点</li>
</ul>
<h3 id="v-show原理"><a href="#v-show原理" class="headerlink" title="v-show原理"></a>v-show原理</h3><p>不管初始条件是什么，元素总是会被渲染</p>
<p>我们看一下在<code>vue</code>中是如何实现的</p>
<p>代码很好理解，有<code>transition</code>就执行<code>transition</code>，没有就直接设置<code>display</code>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/vuejs/vue-next/blob/3cd30c5245da0733f9eb6f29d220f39c46518162/packages/runtime-dom/src/directives/vShow.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">vShow</span>: <span class="title class_">ObjectDirective</span>&lt;<span class="title class_">VShowElement</span>&gt; = &#123;</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el, &#123; value &#125;, &#123; transition &#125;</span>) &#123;</span><br><span class="line">    el.<span class="property">_vod</span> = el.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;none&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : el.<span class="property">style</span>.<span class="property">display</span></span><br><span class="line">    <span class="keyword">if</span> (transition &amp;&amp; value) &#123;</span><br><span class="line">      transition.<span class="title function_">beforeEnter</span>(el)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setDisplay</span>(el, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, &#123; value &#125;, &#123; transition &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (transition &amp;&amp; value) &#123;</span><br><span class="line">      transition.<span class="title function_">enter</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, &#123; value, oldValue &#125;, &#123; transition &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">setDisplay</span>(el, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-if原理"><a href="#v-if原理" class="headerlink" title="v-if原理"></a>v-if原理</h3><p><code>v-if</code>在实现上比<code>v-show</code>要复杂的多，因为还有<code>else</code> <code>else-if</code> 等条件需要处理，这里我们也只摘抄源码中处理 <code>v-if</code> 的一小部分</p>
<p>返回一个<code>node</code>节点，<code>render</code>函数通过表达式的值来决定是否生成<code>DOM</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/vuejs/vue-next/blob/cdc9f336fd/packages/compiler-core/src/transforms/vIf.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> transformIf = <span class="title function_">createStructuralDirectiveTransform</span>(</span><br><span class="line">  <span class="regexp">/^(if|else|else-if)$/</span>,</span><br><span class="line">  <span class="function">(<span class="params">node, dir, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">processIf</span>(node, dir, context, <span class="function">(<span class="params">ifNode, branch, isRoot</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRoot) &#123;</span><br><span class="line">          ifNode.<span class="property">codegenNode</span> = <span class="title function_">createCodegenNodeForBranch</span>(</span><br><span class="line">            branch,</span><br><span class="line">            key,</span><br><span class="line">            context</span><br><span class="line">          ) <span class="keyword">as</span> <span class="title class_">IfConditionalExpression</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// attach this branch&#x27;s codegen node to the v-if root.</span></span><br><span class="line">          <span class="keyword">const</span> parentCondition = <span class="title function_">getParentCondition</span>(ifNode.<span class="property">codegenNode</span>!)</span><br><span class="line">          parentCondition.<span class="property">alternate</span> = <span class="title function_">createCodegenNodeForBranch</span>(</span><br><span class="line">            branch,</span><br><span class="line">            key + ifNode.<span class="property">branches</span>.<span class="property">length</span> - <span class="number">1</span>,</span><br><span class="line">            context</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="四、v-show与v-if的使用场景"><a href="#四、v-show与v-if的使用场景" class="headerlink" title="四、v-show与v-if的使用场景"></a>四、v-show与v-if的使用场景</h2><p><code>v-if</code> 与 <code>v-show</code> 都能控制<code>dom</code>元素在页面的显示</p>
<p><code>v-if</code> 相比 <code>v-show</code> 开销更大的（直接操作<code>dom</code>节点增加与删除） </p>
<p>如果需要非常频繁地切换，则使用 v-show 较好</p>
<p>如果在运行时条件很少改变，则使用 v-if 较好</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.jianshu.com/p/7af8554d8f08">https://www.jianshu.com/p/7af8554d8f08</a></li>
<li><a href="https://juejin.cn/post/6897948855904501768">https://juejin.cn/post/6897948855904501768</a></li>
<li><a href="https://vue3js/docs/zh">https://vue3js/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>你对SPA单页面的理解，它的优缺点分别是什么？如何实现SPA应用呢</title>
    <url>/Vue/vue-spa/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/cf6aa320-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、什么是SPA"><a href="#一、什么是SPA" class="headerlink" title="一、什么是SPA"></a>一、什么是SPA</h2><p>SPA（single-page application），翻译过来就是单页应用<code>SPA</code>是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（<code>HTML</code>、<code>JavaScript</code>和<code>CSS</code>）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子结构如下图</p>
<p> <img src="https://static.vue-js.com/df14a5a0-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<p>我们熟知的JS框架如<code>react</code>,<code>vue</code>,<code>angular</code>,<code>ember</code>都属于<code>SPA</code></p>
<h2 id="二、SPA和MPA的区别"><a href="#二、SPA和MPA的区别" class="headerlink" title="二、SPA和MPA的区别"></a>二、SPA和MPA的区别</h2><p>上面大家已经对单页面有所了解了，下面来讲讲多页应用MPA（MultiPage-page application），翻译过来就是多页应用在<code>MPA</code>中，每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载<code>html</code>、<code>css</code>、<code>js</code>文件，公共文件则根据需求按需加载如下图</p>
<p> <img src="https://static.vue-js.com/eeb13aa0-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<h4 id="单页应用与多页应用的区别"><a href="#单页应用与多页应用的区别" class="headerlink" title="单页应用与多页应用的区别"></a>单页应用与多页应用的区别</h4><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">单页面应用（SPA）</th>
<th align="left">多页面应用（MPA）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">组成</td>
<td align="left">一个主页面和多个页面片段</td>
<td align="left">多个主页面</td>
</tr>
<tr>
<td align="left">刷新方式</td>
<td align="left">局部刷新</td>
<td align="left">整页刷新</td>
</tr>
<tr>
<td align="left">url模式</td>
<td align="left">哈希模式</td>
<td align="left">历史模式</td>
</tr>
<tr>
<td align="left">SEO搜索引擎优化</td>
<td align="left">难实现，可使用SSR方式改善</td>
<td align="left">容易实现</td>
</tr>
<tr>
<td align="left">数据传递</td>
<td align="left">容易</td>
<td align="left">通过url、cookie、localStorage等传递</td>
</tr>
<tr>
<td align="left">页面切换</td>
<td align="left">速度快，用户体验良好</td>
<td align="left">切换加载资源，速度慢，用户体验差</td>
</tr>
<tr>
<td align="left">维护成本</td>
<td align="left">相对容易</td>
<td align="left">相对复杂</td>
</tr>
</tbody></table>
<h4 id="单页应用优缺点"><a href="#单页应用优缺点" class="headerlink" title="单页应用优缺点"></a>单页应用优缺点</h4><p>优点：</p>
<ul>
<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>
<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>
<li>良好的前后端分离，分工更明确</li>
</ul>
<p>缺点：</p>
<ul>
<li>不利于搜索引擎的抓取</li>
<li>首次渲染速度相对较慢</li>
<li></li>
</ul>
<h2 id="三、实现一个SPA"><a href="#三、实现一个SPA" class="headerlink" title="三、实现一个SPA"></a>三、实现一个SPA</h2><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol>
<li>监听地址栏中<code>hash</code>变化驱动界面变化</li>
<li>用<code>pushsate</code>记录浏览器的历史，驱动界面发送变化</li>
</ol>
<p> <img src="https://static.vue-js.com/fc95bf60-3ac6-11eb-ab90-d9ae814b240d.png"></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a><code>hash</code> 模式</h5><p>核心通过监听<code>url</code>中的<code>hash</code>来进行路由跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 Router  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Router</span> &#123;  </span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span> = &#123;&#125;; <span class="comment">// 存放路由path及callback  </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentUrl</span> = <span class="string">&#x27;&#x27;</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 监听路由change调用相对应的路由回调  </span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="variable language_">this</span>.<span class="property">refresh</span>, <span class="literal">false</span>);  </span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">refresh</span>, <span class="literal">false</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">route</span>(<span class="params">path, callback</span>)&#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span>[path] = callback;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">push</span>(<span class="params">path</span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span>[path] &amp;&amp; <span class="variable language_">this</span>.<span class="property">routes</span>[path]()  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用 router  </span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">miniRouter</span> = <span class="keyword">new</span> <span class="title class_">Router</span>();  </span><br><span class="line">miniRouter.<span class="title function_">route</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page1&#x27;</span>))  </span><br><span class="line">miniRouter.<span class="title function_">route</span>(<span class="string">&#x27;/page2&#x27;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page2&#x27;</span>))  </span><br><span class="line">  </span><br><span class="line">miniRouter.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// page1  </span></span><br><span class="line">miniRouter.<span class="title function_">push</span>(<span class="string">&#x27;/page2&#x27;</span>) <span class="comment">// page2  </span></span><br></pre></td></tr></table></figure>

<h5 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h5><p><code>history</code> 模式核心借用 <code>HTML5 history api</code>，<code>api</code> 提供了丰富的 <code>router</code> 相关属性先了解一个几个相关的api</p>
<ul>
<li><code>history.pushState</code> 浏览器历史纪录添加记录</li>
<li><code>history.replaceState</code>修改浏览器历史纪录中当前纪录</li>
<li><code>history.popState</code> 当 <code>history</code> 发生变化时触发</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 Router  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Router</span> &#123;  </span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span> = &#123;&#125;;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">listerPopState</span>()  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">init</span>(<span class="params">path</span>) &#123;  </span><br><span class="line">        history.<span class="title function_">replaceState</span>(&#123;<span class="attr">path</span>: path&#125;, <span class="literal">null</span>, path);  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span>[path] &amp;&amp; <span class="variable language_">this</span>.<span class="property">routes</span>[path]();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">route</span>(<span class="params">path, callback</span>)&#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span>[path] = callback;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">push</span>(<span class="params">path</span>) &#123;  </span><br><span class="line">        history.<span class="title function_">pushState</span>(&#123;<span class="attr">path</span>: path&#125;, <span class="literal">null</span>, path);  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">routes</span>[path] &amp;&amp; <span class="variable language_">this</span>.<span class="property">routes</span>[path]();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="title function_">listerPopState</span> () &#123;  </span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span> , <span class="function"><span class="params">e</span> =&gt;</span> &#123;  </span><br><span class="line">            <span class="keyword">const</span> path = e.<span class="property">state</span> &amp;&amp; e.<span class="property">state</span>.<span class="property">path</span>;  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">routers</span>[path] &amp;&amp; <span class="variable language_">this</span>.<span class="property">routers</span>[path]()  </span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用 Router  </span></span><br><span class="line">  </span><br><span class="line"><span class="variable language_">window</span>.<span class="property">miniRouter</span> = <span class="keyword">new</span> <span class="title class_">Router</span>();  </span><br><span class="line">miniRouter.<span class="title function_">route</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">()=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page1&#x27;</span>))  </span><br><span class="line">miniRouter.<span class="title function_">route</span>(<span class="string">&#x27;/page2&#x27;</span>, <span class="function">()=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page2&#x27;</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 跳转  </span></span><br><span class="line">miniRouter.<span class="title function_">push</span>(<span class="string">&#x27;/page2&#x27;</span>)  <span class="comment">// page2  </span></span><br></pre></td></tr></table></figure>

<h3 id="四、题外话：如何给SPA做SEO"><a href="#四、题外话：如何给SPA做SEO" class="headerlink" title="四、题外话：如何给SPA做SEO"></a>四、题外话：如何给SPA做SEO</h3><p>下面给出基于<code>Vue</code>的<code>SPA</code>如何实现<code>SEO</code>的三种方式</p>
<ol>
<li><strong>SSR服务端渲染</strong></li>
</ol>
<p>将组件或页面通过服务器生成html，再返回给浏览器，如<code>nuxt.js</code></p>
<ol start="2">
<li><strong>静态化</strong></li>
</ol>
<p>目前主流的静态化主要有两种：（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中（2）另外一种是通过WEB服务器的 <code>URL Rewrite</code>的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。这两种方法都达到了实现URL静态化的效果</p>
<ol start="3">
<li><strong>使用<code>Phantomjs</code>针对爬虫处理</strong></li>
</ol>
<p>原理是通过<code>Nginx</code>配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个<code>node server</code>，再通过<code>PhantomJS</code>来解析完整的<code>HTML</code>，返回给爬虫。下面是大致流程图</p>
<p> <img src="https://static.vue-js.com/25be6630-3ac7-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://segmentfault.com/a/1190000019623624">https://segmentfault.com/a/1190000019623624</a></li>
<li><a href="https://juejin.cn/post/6844903512107663368">https://juejin.cn/post/6844903512107663368</a></li>
<li><a href="https://www.cnblogs.com/constantince/p/5586851.html">https://www.cnblogs.com/constantince/p/5586851.html</a></li>
</ul>
<p> <img src="https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中provide和inject的实现原理</title>
    <url>/Vue/vue-provide-inject/</url>
    <content><![CDATA[<h1 id="Vue中provide-inject的实现原理"><a href="#Vue中provide-inject的实现原理" class="headerlink" title="Vue中provide&#x2F;inject的实现原理"></a>Vue中provide&#x2F;inject的实现原理</h1><h2 id="1-什么是provide-inject？"><a href="#1-什么是provide-inject？" class="headerlink" title="1. 什么是provide&#x2F;inject？"></a>1. 什么是provide&#x2F;inject？</h2><p>provide&#x2F;inject 是 Vue 提供的一种依赖注入机制，用于解决多层组件嵌套时的数据传递问题。它允许一个祖先组件向其所有子孙组件传递数据，而不必通过每层组件手动传递 props。</p>
<h2 id="2-基本使用示例"><a href="#2-基本使用示例" class="headerlink" title="2. 基本使用示例"></a>2. 基本使用示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件提供数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">      <span class="attr">userInfo</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userInfo</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子孙组件注入数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;userInfo&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-实现原理解析"><a href="#3-实现原理解析" class="headerlink" title="3. 实现原理解析"></a>3. 实现原理解析</h2><h3 id="3-1-初始化流程"><a href="#3-1-初始化流程" class="headerlink" title="3.1 初始化流程"></a>3.1 初始化流程</h3><ol>
<li><p>组件初始化时，会按照如下顺序处理：</p>
<ul>
<li>首先初始化 inject</li>
<li>然后初始化 data&#x2F;props</li>
<li>最后初始化 provide</li>
</ul>
</li>
<li><p>provide 的处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简化的源码实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initProvide</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.<span class="property">$options</span>.<span class="property">provide</span></span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm.<span class="property">_provided</span> = <span class="keyword">typeof</span> provide === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? provide.<span class="title function_">call</span>(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>inject 的处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initInjections</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">resolveInject</span>(vm.<span class="property">$options</span>.<span class="property">inject</span>, vm)</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(result).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(vm, key, result[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-查找过程"><a href="#3-2-查找过程" class="headerlink" title="3.2 查找过程"></a>3.2 查找过程</h3><p>inject 的核心是向上查找的过程：</p>
<ol>
<li>从当前组件开始，通过 <code>$parent</code> 属性向上遍历</li>
<li>检查每个父组件的 <code>_provided</code> 对象</li>
<li>如果找到对应的值则停止查找</li>
<li>如果到根组件还未找到，则使用默认值（如果有的话）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveInject</span>(<span class="params">inject, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(inject)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].<span class="property">from</span> || key</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.<span class="property">_provided</span> &amp;&amp; provideKey <span class="keyword">in</span> source.<span class="property">_provided</span>) &#123;</span><br><span class="line">          result[key] = source.<span class="property">_provided</span>[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.<span class="property">$parent</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-响应式原理"><a href="#4-响应式原理" class="headerlink" title="4. 响应式原理"></a>4. 响应式原理</h2><ol>
<li>provide&#x2F;inject 本身不是响应式的</li>
<li>如果要实现响应式，有两种方式：<ul>
<li>提供一个响应式对象的属性</li>
<li>使用 computed</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 方式1：提供响应式对象</span></span><br><span class="line">      <span class="attr">userInfo</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 方式2：使用computed</span></span><br><span class="line">      <span class="attr">message</span>: <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-使用场景与注意事项"><a href="#5-使用场景与注意事项" class="headerlink" title="5. 使用场景与注意事项"></a>5. 使用场景与注意事项</h2><h3 id="5-1-适用场景"><a href="#5-1-适用场景" class="headerlink" title="5.1 适用场景"></a>5.1 适用场景</h3><ul>
<li>组件库开发</li>
<li>主题系统</li>
<li>全局状态管理</li>
<li>插件系统</li>
</ul>
<h3 id="5-2-注意事项"><a href="#5-2-注意事项" class="headerlink" title="5.2 注意事项"></a>5.2 注意事项</h3><ol>
<li><p>数据来源不明确</p>
<ul>
<li>provide&#x2F;inject 使数据的来源不太明显</li>
<li>可能导致组件的耦合性增加</li>
</ul>
</li>
<li><p>响应式问题</p>
<ul>
<li>需要特别注意响应式的处理</li>
<li>建议使用响应式对象或computed</li>
</ul>
</li>
<li><p>命名冲突</p>
<ul>
<li>多个祖先组件提供同名属性时可能产生冲突</li>
<li>建议使用Symbol作为key</li>
</ul>
</li>
</ol>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>provide&#x2F;inject 是Vue中一个强大的依赖注入系统：</p>
<ol>
<li>实现原理基于组件的父子关系链</li>
<li>通过向上遍历查找注入的数据</li>
<li>需要特别关注响应式处理</li>
<li>适合用于组件库或插件开发</li>
</ol>
<p>合理使用可以简化组件通信，但要注意避免滥用导致的维护困难。</p>
<pre><code>
这篇文档从概念、使用、原理、响应式处理等多个角度详细介绍了 Vue 中 provide/inject 的实现原理。包含了源码分析和实际应用建议，希望对你有帮助。
</code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>原理解析</tag>
      </tags>
  </entry>
  <entry>
    <title>SSR解决了什么问题？有做过SSR吗？你是怎么做的？</title>
    <url>/Vue/vue-ssr/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/84bd83f0-4986-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>Server-Side Rendering</code> 我们称其为<code>SSR</code>，意为服务端渲染</p>
<p>指由服务侧完成页面的 <code>HTML</code> 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程</p>
<p>先来看看<code>Web</code>3个阶段的发展史：</p>
<ul>
<li>传统服务端渲染SSR</li>
<li>单页面应用SPA</li>
<li>服务端渲染SSR</li>
</ul>
<h3 id="传统web开发"><a href="#传统web开发" class="headerlink" title="传统web开发"></a><strong>传统web开发</strong></h3><p>网页内容在服务端渲染完成，⼀次性传输到浏览器</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4d666b24e784fd09e565458c7753b54~tplv-k3u1fbpfcp-watermark.image" alt="img"></p>
<p>打开页面查看源码，浏览器拿到的是全部的<code>dom</code>结构</p>
<h3 id="单页应用SPA"><a href="#单页应用SPA" class="headerlink" title="单页应用SPA"></a><strong>单页应用SPA</strong></h3><p>单页应用优秀的用户体验，使其逐渐成为主流，页面内容由<code>JS</code>渲染出来，这种方式称为客户端渲染</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e8e524a8e7d44cba73e0c3416690087~tplv-k3u1fbpfcp-watermark.image" alt="img"></p>
<p>打开页面查看源码，浏览器拿到的仅有宿主元素<code>#app</code>，并没有内容</p>
<h3 id="服务端渲染SSR"><a href="#服务端渲染SSR" class="headerlink" title="服务端渲染SSR"></a>服务端渲染SSR</h3><p><code>SSR</code>解决方案，后端渲染出完整的首屏的<code>dom</code>结构返回，前端拿到的内容包括首屏及完整<code>spa</code>结构，应用激活后依然按照<code>spa</code>方式运行</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1604e7cfad7431f99920e8ab833bc37~tplv-k3u1fbpfcp-watermark.image" alt="img"></p>
<p>看完前端发展，我们再看看<code>Vue</code>官方对<code>SSR</code>的解释：</p>
<blockquote>
<p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序</p>
<p>服务器渲染的 Vue.js 应用程序也可以被认为是”同构”或”通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行</p>
</blockquote>
<p>我们从上门解释得到以下结论：</p>
<ul>
<li><code>Vue SSR</code>是一个在<code>SPA</code>上进行改良的服务端渲染</li>
<li>通过<code>Vue SSR</code>渲染的页面，需要在客户端激活才能实现交互</li>
<li><code>Vue SSR</code>将包含两部分：服务端渲染的首屏，包含交互的<code>SPA</code></li>
</ul>
<h2 id="二、解决了什么"><a href="#二、解决了什么" class="headerlink" title="二、解决了什么"></a>二、解决了什么</h2><p>SSR主要解决了以下两种问题：</p>
<ul>
<li>seo：搜索引擎优先爬取页面<code>HTML</code>结构，使用<code>ssr</code>时，服务端已经生成了和业务想关联的<code>HTML</code>，有利于<code>seo</code></li>
<li>首屏呈现渲染：用户无需等待页面所有<code>js</code>加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）</li>
</ul>
<p>但是使用<code>SSR</code>同样存在以下的缺点：</p>
<ul>
<li><p>复杂度：整个项目的复杂度</p>
</li>
<li><p>库的支持性，代码兼容</p>
</li>
<li><p>性能问题</p>
<ul>
<li><p>每个请求都是<code>n</code>个实例的创建，不然会污染，消耗会变得很大</p>
</li>
<li><p>缓存 <code>node serve </code>、 <code>nginx</code>判断当前用户有没有过期，如果没过期的话就缓存，用刚刚的结果。</p>
</li>
<li><p>降级：监控<code>cpu</code>、内存占用过多，就<code>spa</code>，返回单个的壳</p>
</li>
</ul>
</li>
<li><p>服务器负载变大，相对于前后端分离服务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用</p>
</li>
</ul>
<p>所以在我们选择是否使用<code>SSR</code>前，我们需要慎重问问自己这些问题：</p>
<ol>
<li>需要<code>SEO</code>的页面是否只是少数几个，这些是否可以使用预渲染（Prerender SPA Plugin）实现</li>
<li>首屏的请求响应逻辑是否复杂，数据返回是否大量且缓慢</li>
</ol>
<h2 id="三、如何实现"><a href="#三、如何实现" class="headerlink" title="三、如何实现"></a>三、如何实现</h2><p>对于同构开发，我们依然使用<code>webpack</code>打包，我们要解决两个问题：服务端首屏渲染和客户端激活</p>
<p>这里需要生成一个服务器<code>bundle</code>文件用于服务端首屏渲染和一个客户端<code>bundle</code>文件用于客户端激活</p>
<p> <img src="https://static.vue-js.com/9dcd12c0-4986-11eb-85f6-6fac77c0c9b3.png"></p>
<p>代码结构 除了两个不同入口之外，其他结构和之前<code>vue</code>应用完全相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── router</span><br><span class="line">├────── index.<span class="property">js</span> # 路由声明</span><br><span class="line">├── store</span><br><span class="line">├────── index.<span class="property">js</span> # 全局状态</span><br><span class="line">├── main.<span class="property">js</span> # ⽤于创建vue实例</span><br><span class="line">├── entry-client.<span class="property">js</span> # 客户端⼊⼝，⽤于静态内容“激活”</span><br><span class="line">└── entry-server.<span class="property">js</span> # 服务端⼊⼝，⽤于⾸屏内容渲染</span><br></pre></td></tr></table></figure>

<p>路由配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="comment">//导出⼯⼚函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">        <span class="attr">routes</span>: [</span><br><span class="line">            <span class="comment">// 客户端没有编译器，这⾥要写成渲染函数</span></span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: &#123; <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;index page&#x27;</span>) &#125; &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;/detail&quot;</span>, <span class="attr">component</span>: &#123; <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;detail page&#x27;</span>) &#125; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主文件main.js</p>
<p>跟之前不同，主文件是负责创建<code>vue</code>实例的工厂，每次请求均会有独立的<code>vue</code>实例创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="comment">// 导出Vue实例⼯⼚函数，为每次请求创建独⽴实例</span></span><br><span class="line"><span class="comment">// 上下⽂⽤于给vue实例传递参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>();</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        router,</span><br><span class="line">        context,</span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; app, router &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写服务端入口<code>src/entry-server.js</code></p>
<p>它的任务是创建<code>Vue</code>实例并根据传入<code>url</code>指定首屏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;./main&quot;</span>;</span><br><span class="line"><span class="comment">// 返回⼀个函数，接收请求上下⽂，返回创建的vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这⾥返回⼀个Promise，确保路由或组件准备就绪</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>(context);</span><br><span class="line">        <span class="comment">// 跳转到⾸屏的地址</span></span><br><span class="line">        router.<span class="title function_">push</span>(context.<span class="property">url</span>);</span><br><span class="line">        <span class="comment">// 路由就绪，返回结果</span></span><br><span class="line">        router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(app);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>编写客户端入口<code>entry-client.js</code></p>
<p>客户端入口只需创建<code>vue</code>实例并执行挂载，这⼀步称为激活</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;./main&quot;</span>;</span><br><span class="line"><span class="comment">// 创建vue、router实例</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"><span class="comment">// 路由就绪，执⾏挂载</span></span><br><span class="line">router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>对<code>webpack</code>进行配置</p>
<p>安装依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack-node-externals lodash.<span class="property">merge</span> -D</span><br></pre></td></tr></table></figure>

<p>对<code>vue.config.js</code>进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个插件分别负责打包客户端和服务端</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueSSRServerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;vue-server-renderer/server-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VueSSRClientPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;vue-server-renderer/client-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&quot;webpack-node-externals&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&quot;lodash.merge&quot;</span>);</span><br><span class="line"><span class="comment">// 根据传⼊环境变量决定⼊⼝⽂件和相应配置项</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TARGET_NODE</span> = process.<span class="property">env</span>.<span class="property">WEBPACK_TARGET</span> === <span class="string">&quot;node&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> target = <span class="variable constant_">TARGET_NODE</span> ? <span class="string">&quot;server&quot;</span> : <span class="string">&quot;client&quot;</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="attr">extract</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;./dist/&#x27;</span>+target,</span><br><span class="line">    <span class="attr">configureWebpack</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="comment">// 将 entry 指向应⽤程序的 server / client ⽂件</span></span><br><span class="line">        <span class="attr">entry</span>: <span class="string">`./src/entry-<span class="subst">$&#123;target&#125;</span>.js`</span>,</span><br><span class="line">        <span class="comment">// 对 bundle renderer 提供 source map ⽀持</span></span><br><span class="line">        <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">        <span class="comment">// target设置为node使webpack以Node适⽤的⽅式处理动态导⼊，</span></span><br><span class="line">        <span class="comment">// 并且还会在编译Vue组件时告知`vue-loader`输出⾯向服务器代码。</span></span><br><span class="line">        <span class="attr">target</span>: <span class="variable constant_">TARGET_NODE</span> ? <span class="string">&quot;node&quot;</span> : <span class="string">&quot;web&quot;</span>,</span><br><span class="line">        <span class="comment">// 是否模拟node全局变量</span></span><br><span class="line">        <span class="attr">node</span>: <span class="variable constant_">TARGET_NODE</span> ? <span class="literal">undefined</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">output</span>: &#123;</span><br><span class="line">            <span class="comment">// 此处使⽤Node⻛格导出模块</span></span><br><span class="line">            <span class="attr">libraryTarget</span>: <span class="variable constant_">TARGET_NODE</span> ? <span class="string">&quot;commonjs2&quot;</span> : <span class="literal">undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// https://webpack.js.org/configuration/externals/#function</span></span><br><span class="line">        <span class="comment">// https://github.com/liady/webpack-node-externals</span></span><br><span class="line">        <span class="comment">// 外置化应⽤程序依赖模块。可以使服务器构建速度更快，并⽣成较⼩的打包⽂件。</span></span><br><span class="line">        <span class="attr">externals</span>: <span class="variable constant_">TARGET_NODE</span></span><br><span class="line">        ? <span class="title function_">nodeExternals</span>(&#123;</span><br><span class="line">            <span class="comment">// 不要外置化webpack需要处理的依赖模块。</span></span><br><span class="line">            <span class="comment">// 可以在这⾥添加更多的⽂件类型。例如，未处理 *.vue 原始⽂件，</span></span><br><span class="line">            <span class="comment">// 还应该将修改`global`（例如polyfill）的依赖模块列⼊⽩名单</span></span><br><span class="line">            <span class="attr">whitelist</span>: [<span class="regexp">/\.css$/</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">        : <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">optimization</span>: &#123;</span><br><span class="line">            <span class="attr">splitChunks</span>: <span class="literal">undefined</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 这是将服务器的整个输出构建为单个 JSON ⽂件的插件。</span></span><br><span class="line">        <span class="comment">// 服务端默认⽂件名为 `vue-ssr-server-bundle.json`</span></span><br><span class="line">        <span class="comment">// 客户端默认⽂件名为 `vue-ssr-client-manifest.json`。</span></span><br><span class="line">        <span class="attr">plugins</span>: [<span class="variable constant_">TARGET_NODE</span> ? <span class="keyword">new</span> <span class="title class_">VueSSRServerPlugin</span>() : <span class="keyword">new</span></span><br><span class="line">                  <span class="title class_">VueSSRClientPlugin</span>()]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// cli4项⽬添加</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">TARGET_NODE</span>) &#123;</span><br><span class="line">            config.<span class="property">optimization</span>.<span class="title function_">delete</span>(<span class="string">&#x27;splitChunks&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&quot;vue&quot;</span>)</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&quot;vue-loader&quot;</span>)</span><br><span class="line">            .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">merge</span>(options, &#123;</span><br><span class="line">                <span class="attr">optimizeSSR</span>: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对脚本进行配置，安装依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i cross-env -D</span><br></pre></td></tr></table></figure>

<p>定义创建脚本<code>package.json</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;build:client&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line"> <span class="string">&quot;build:server&quot;</span>: <span class="string">&quot;cross-env WEBPACK_TARGET=node vue-cli-service build&quot;</span>,</span><br><span class="line"> <span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run build:server &amp;&amp; npm run build:client&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行打包：npm run build</p>
</blockquote>
<p>最后修改宿主文件<code>/public/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<!--vue-ssr-outlet-->   是服务端渲染入口位置，注意不能为了好看而在前后加空格
</blockquote>
<p>安装<code>vuex</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -S vuex</span><br></pre></td></tr></table></figure>

<p>创建<code>vuex</code>工厂函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createStore</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">        <span class="attr">state</span>: &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">108</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">mutations</span>: &#123;</span><br><span class="line">            <span class="title function_">add</span>(<span class="params">state</span>)&#123;</span><br><span class="line">                state.<span class="property">count</span> += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>main.js</code>文件中挂载<code>store</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">createStore</span>()</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        store, <span class="comment">// 挂载</span></span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123; app, router, store &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器端渲染的是应用程序的”快照”，如果应用依赖于⼀些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据</p>
<p>在<code>store</code>进行一步数据获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">        <span class="attr">mutations</span>: &#123;</span><br><span class="line">            <span class="comment">// 加⼀个初始化</span></span><br><span class="line">            <span class="title function_">init</span>(<span class="params">state, count</span>) &#123;</span><br><span class="line">                state.<span class="property">count</span> = count;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>: &#123;</span><br><span class="line">            <span class="comment">// 加⼀个异步请求count的action</span></span><br><span class="line">            <span class="title function_">getCount</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">commit</span>(<span class="string">&quot;init&quot;</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>);</span><br><span class="line">                        <span class="title function_">resolve</span>();</span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件中的数据预取逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">asyncData</span>(<span class="params">&#123; store, route &#125;</span>) &#123; <span class="comment">// 约定预取逻辑编写在预取钩⼦asyncData中</span></span><br><span class="line">        <span class="comment">// 触发 action 后，返回 Promise 以便确定请求结果</span></span><br><span class="line">        <span class="keyword">return</span> store.<span class="title function_">dispatch</span>(<span class="string">&quot;getCount&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>服务端数据预取，<code>entry-server.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;./app&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拿出store和router实例</span></span><br><span class="line">        <span class="keyword">const</span> &#123; app, router, store &#125; = <span class="title function_">createApp</span>(context);</span><br><span class="line">        router.<span class="title function_">push</span>(context.<span class="property">url</span>);</span><br><span class="line">        router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 获取匹配的路由组件数组</span></span><br><span class="line">            <span class="keyword">const</span> matchedComponents = router.<span class="title function_">getMatchedComponents</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若⽆匹配则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (!matchedComponents.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对所有匹配的路由组件调⽤可能存在的`asyncData()`</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">                matchedComponents.<span class="title function_">map</span>(<span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title class_">Component</span>.<span class="property">asyncData</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="title class_">Component</span>.<span class="title function_">asyncData</span>(&#123;</span><br><span class="line">                            store,</span><br><span class="line">                            <span class="attr">route</span>: router.<span class="property">currentRoute</span>,</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line">            )</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 所有预取钩⼦ resolve 后，</span></span><br><span class="line">                <span class="comment">// store 已经填充⼊渲染应⽤所需状态</span></span><br><span class="line">                <span class="comment">// 将状态附加到上下⽂，且 `template` 选项⽤于 renderer 时，</span></span><br><span class="line">                <span class="comment">// 状态将⾃动序列化为 `window.__INITIAL_STATE__`，并注⼊ HTML</span></span><br><span class="line">                context.<span class="property">state</span> = store.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">resolve</span>(app);</span><br><span class="line">            &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(reject);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>客户端在挂载到应用程序之前，<code>store</code> 就应该获取到状态，<code>entry-client.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出store</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, router, store &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"><span class="comment">// 当使⽤ template 时，context.state 将作为 window.__INITIAL_STATE__ 状态⾃动嵌⼊到最终的 HTML </span></span><br><span class="line"><span class="comment">// 在客户端挂载到应⽤程序之前，store 就应该获取到状态：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__INITIAL_STATE__</span>) &#123;</span><br><span class="line">    store.<span class="title function_">replaceState</span>(<span class="variable language_">window</span>.<span class="property">__INITIAL_STATE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端数据预取处理，<code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; asyncData &#125; = <span class="variable language_">this</span>.<span class="property">$options</span>;</span><br><span class="line">        <span class="keyword">if</span> (asyncData) &#123;</span><br><span class="line">            <span class="comment">// 将获取数据操作分配给 promise</span></span><br><span class="line">            <span class="comment">// 以便在组件中，我们可以在数据准备就绪后</span></span><br><span class="line">            <span class="comment">// 通过运⾏ `this.dataPromise.then(...)` 来执⾏其他任务</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dataPromise</span> = <span class="title function_">asyncData</span>(&#123;</span><br><span class="line">                <span class="attr">store</span>: <span class="variable language_">this</span>.<span class="property">$store</span>,</span><br><span class="line">                <span class="attr">route</span>: <span class="variable language_">this</span>.<span class="property">$route</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>修改服务器启动文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取⽂件路径</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = dir =&gt; <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>).<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line"><span class="comment">// 第 1 步：开放dist/client⽬录，关闭默认下载index⻚的选项，不然到不了后⾯路由</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;../dist/client&#x27;</span>), &#123;<span class="attr">index</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">// 第 2 步：获得⼀个createBundleRenderer</span></span><br><span class="line"><span class="keyword">const</span> &#123; createBundleRenderer &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-server-renderer&quot;</span>);</span><br><span class="line"><span class="comment">// 第 3 步：服务端打包⽂件地址</span></span><br><span class="line"><span class="keyword">const</span> bundle = <span class="title function_">resolve</span>(<span class="string">&quot;../dist/server/vue-ssr-server-bundle.json&quot;</span>);</span><br><span class="line"><span class="comment">// 第 4 步：创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="title function_">createBundleRenderer</span>(bundle, &#123;</span><br><span class="line">    <span class="attr">runInNewContext</span>: <span class="literal">false</span>, <span class="comment">// https://ssr.vuejs.org/zh/api/#runinnewcontext</span></span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="title function_">resolve</span>(<span class="string">&quot;../public/index.html&quot;</span>), <span class="string">&quot;utf8&quot;</span>), <span class="comment">// 宿主⽂件</span></span><br><span class="line">    <span class="attr">clientManifest</span>: <span class="built_in">require</span>(<span class="title function_">resolve</span>(<span class="string">&quot;../dist/client/vue-ssr-clientmanifest.json&quot;</span>)) <span class="comment">// 客户端清单</span></span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="title function_">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 设置url和title两个重要参数</span></span><br><span class="line">    <span class="keyword">const</span> context = &#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;ssr test&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:req.<span class="property">url</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="keyword">await</span> renderer.<span class="title function_">renderToString</span>(context);</span><br><span class="line">    res.<span class="title function_">send</span>(html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>使用<code>ssr</code>不存在单例模式，每次用户请求都会创建一个新的<code>vue</code>实例</li>
<li>实现<code>ssr</code>需要实现服务端首屏渲染和客户端激活</li>
<li>服务端异步获取数据<code>asyncData</code>可以分为首屏异步获取和切换组件获取<ul>
<li>首屏异步获取数据，在服务端预渲染的时候就应该已经完成</li>
<li>切换组件通过<code>mixin</code>混入，在<code>beforeMount</code>钩子完成数据获取</li>
</ul>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6896007907050487816">https://juejin.cn/post/6896007907050487816</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>说说你对slot的理解？slot使用场景有哪些？</title>
    <url>/Vue/vue-slot/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/141ca660-3dbc-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、slot是什么"><a href="#一、slot是什么" class="headerlink" title="一、slot是什么"></a>一、slot是什么</h2><p>在HTML中 <code>slot</code> 元素 ，作为 <code>Web Components</code> 技术套件的一部分，是Web组件内的一个占位符</p>
<p>该占位符可以在后期使用自己的标记语言填充</p>
<p>举个栗子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;element-details-template&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;element-name&quot;</span>&gt;</span>Slot template<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element-details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;element-name&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element-details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element-details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;element-name&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element-details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>template</code>不会展示到页面中，需要用先获取它的引用，然后添加到<code>DOM</code>中，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;element-details&#x27;</span>,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="keyword">const</span> template = <span class="variable language_">document</span></span><br><span class="line">        .<span class="title function_">getElementById</span>(<span class="string">&#x27;element-details-template&#x27;</span>)</span><br><span class="line">        .<span class="property">content</span>;</span><br><span class="line">      <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;)</span><br><span class="line">        .<span class="title function_">appendChild</span>(template.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>Vue</code>中的概念也是如此</p>
<p><code>Slot</code> 艺名插槽，花名“占坑”，我们可以理解为<code>solt</code>在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中<code>slot</code>位置），作为承载分发内容的出口</p>
<p>可以将其类比为插卡式的FC游戏机，游戏机暴露卡槽（插槽）让用户插入不同的游戏磁条（自定义内容）</p>
<p>放张图感受一下<br><img src="https://static.vue-js.com/63c0dff0-3dbd-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理</p>
<p>如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情</p>
<p>通过<code>slot</code>插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用</p>
<p>比如布局组件、表格列、下拉选、弹框显示内容等</p>
<h2 id="三、分类"><a href="#三、分类" class="headerlink" title="三、分类"></a>三、分类</h2><p><code>slot</code>可以分来以下三种：</p>
<ul>
<li>默认插槽</li>
<li>具名插槽</li>
<li>作用域插槽</li>
</ul>
<h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构，当父组件使用的时候没有往插槽传入内容，标签内<code>DOM</code>结构就会显示在页面</p>
<p>父组件在使用的时候，直接在子组件的标签内写入内容即可</p>
<p>子组件<code>Child.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>插槽后备的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>默认插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>子组件用<code>name</code>属性来表示插槽的名字，不传为默认插槽</p>
<p>父组件中在使用时在默认插槽的基础上加上<code>slot</code>属性，值为子组件插槽<code>name</code>属性值</p>
<p>子组件<code>Child.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽后备的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span>插槽后备的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽⽤插槽名做参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:content</span>&gt;</span>内容...<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件<code>v-slot</code>接受的对象上</p>
<p>父组件中在使用时通过<code>v-slot:</code>（简写：#）获取子组件的信息，在内容中使用</p>
<p>子组件<code>Child.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">testProps</span>=<span class="string">&quot;子组件的值&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>没传footer插槽<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 把v-slot的值指定为作⽤域上下⽂对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">      来⾃⼦组件数据：&#123;&#123;slotProps.testProps&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">      来⾃⼦组件数据：&#123;&#123;slotProps.testProps&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li><code>v-slot</code>属性只能在<code>&lt;template&gt;</code>上使用，但在只有默认插槽时可以在组件标签上使用</li>
<li>默认插槽名为<code>default</code>，可以省略default直接写<code>v-slot</code></li>
<li>缩写为<code>#</code>时不能不写参数，写成<code>#default</code></li>
<li>可以通过解构获取<code>v-slot=&#123;user&#125;</code>，还可以重命名<code>v-slot=&quot;&#123;user: newName&#125;&quot;</code>和定义默认值<code>v-slot=&quot;&#123;user = &#39;默认值&#39;&#125;&quot;</code></li>
</ul>
<h2 id="四、原理分析"><a href="#四、原理分析" class="headerlink" title="四、原理分析"></a>四、原理分析</h2><p><code>slot</code>本质上是返回<code>VNode</code>的函数，一般情况下，<code>Vue</code>中的组件要渲染到页面上需要经过<code>template -&gt; render function -&gt; VNode -&gt; DOM</code> 过程，这里看看<code>slot</code>如何实现：</p>
<p>编写一个<code>buttonCounter</code>组件，使用匿名插槽</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt; &lt;slot&gt;我是默认内容&lt;/slot&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用该组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button-counter&gt;&lt;span&gt;我是slot传入内容&lt;/span&gt;&lt;/button-counter&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;buttonCounter&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>获取<code>buttonCounter</code>组件渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">anonymous</span>(<span class="params"></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">with</span>(<span class="params"><span class="variable language_">this</span></span>)&#123;<span class="keyword">return</span> <span class="title function_">_c</span>(<span class="string">&#x27;div&#x27;</span>,[<span class="title function_">_t</span>(<span class="string">&quot;default&quot;</span>,[<span class="title function_">_v</span>(<span class="string">&quot;我是默认内容&quot;</span>)])],<span class="number">2</span>)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>_v</code>表示穿件普通文本节点，<code>_t</code>表示渲染插槽的函数</p>
<p>渲染插槽函数<code>renderSlot</code>（做了简化）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderSlot</span> (<span class="params"></span></span><br><span class="line"><span class="params">  name,</span></span><br><span class="line"><span class="params">  fallback,</span></span><br><span class="line"><span class="params">  props,</span></span><br><span class="line"><span class="params">  bindObject</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 得到渲染插槽内容的函数    </span></span><br><span class="line">  <span class="keyword">var</span> scopedSlotFn = <span class="variable language_">this</span>.<span class="property">$scopedSlots</span>[name];</span><br><span class="line">  <span class="keyword">var</span> nodes;</span><br><span class="line">  <span class="comment">// 如果存在插槽渲染函数，则执行插槽渲染函数，生成nodes节点返回</span></span><br><span class="line">  <span class="comment">// 否则使用默认值</span></span><br><span class="line">  nodes = <span class="title function_">scopedSlotFn</span>(props) || fallback;</span><br><span class="line">  <span class="keyword">return</span> nodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>name</code>属性表示定义插槽的名字，默认值为<code>default</code>，<code>fallback</code>表示子组件中的<code>slot</code>节点的默认值</p>
<p>关于<code>this.$scopredSlots</code>是什么，我们可以先看看<code>vm.slot</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initRender</span> (<span class="params">vm</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  vm.<span class="property">$slots</span> = <span class="title function_">resolveSlots</span>(options.<span class="property">_renderChildren</span>, renderContext);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>resolveSlots</code>函数会对<code>children</code>节点做归类和过滤处理，返回<code>slots</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveSlots</span> (<span class="params"></span></span><br><span class="line"><span class="params">    children,</span></span><br><span class="line"><span class="params">    context</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!children || !children.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> slots = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = children.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> child = children[i];</span><br><span class="line">      <span class="keyword">var</span> data = child.<span class="property">data</span>;</span><br><span class="line">      <span class="comment">// remove slot attribute if the node is resolved as a Vue slot node</span></span><br><span class="line">      <span class="keyword">if</span> (data &amp;&amp; data.<span class="property">attrs</span> &amp;&amp; data.<span class="property">attrs</span>.<span class="property">slot</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> data.<span class="property">attrs</span>.<span class="property">slot</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// named slots should only be respected if the vnode was rendered in the</span></span><br><span class="line">      <span class="comment">// same context.</span></span><br><span class="line">      <span class="keyword">if</span> ((child.<span class="property">context</span> === context || child.<span class="property">fnContext</span> === context) &amp;&amp;</span><br><span class="line">        data &amp;&amp; data.<span class="property">slot</span> != <span class="literal">null</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// 如果slot存在(slot=&quot;header&quot;) 则拿对应的值作为key</span></span><br><span class="line">        <span class="keyword">var</span> name = data.<span class="property">slot</span>;</span><br><span class="line">        <span class="keyword">var</span> slot = (slots[name] || (slots[name] = []));</span><br><span class="line">        <span class="comment">// 如果是tempalte元素 则把template的children添加进数组中，这也就是为什么你写的template标签并不会渲染成另一个标签到页面</span></span><br><span class="line">        <span class="keyword">if</span> (child.<span class="property">tag</span> === <span class="string">&#x27;template&#x27;</span>) &#123;</span><br><span class="line">          slot.<span class="property">push</span>.<span class="title function_">apply</span>(slot, child.<span class="property">children</span> || []);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          slot.<span class="title function_">push</span>(child);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果没有就默认是default</span></span><br><span class="line">        (slots.<span class="property">default</span> || (slots.<span class="property">default</span> = [])).<span class="title function_">push</span>(child);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ignore slots that contains only whitespace</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name$1 <span class="keyword">in</span> slots) &#123;</span><br><span class="line">      <span class="keyword">if</span> (slots[name$1].<span class="title function_">every</span>(isWhitespace)) &#123;</span><br><span class="line">        <span class="keyword">delete</span> slots[name$1];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slots</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>_render</code>渲染函数通过<code>normalizeScopedSlots</code>得到<code>vm.$scopedSlots</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.<span class="property">$scopedSlots</span> = <span class="title function_">normalizeScopedSlots</span>(</span><br><span class="line">  _parentVnode.<span class="property">data</span>.<span class="property">scopedSlots</span>,</span><br><span class="line">  vm.<span class="property">$slots</span>,</span><br><span class="line">  vm.<span class="property">$scopedSlots</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>作用域插槽中父组件能够得到子组件的值是因为在<code>renderSlot</code>的时候执行会传入<code>props</code>，也就是上述<code>_t</code>第三个参数，父组件则能够得到子组件传递过来的值</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6844903817746628615#heading-4">https://juejin.cn/post/6844903817746628615#heading-4</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots">https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots</a></li>
<li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li>
<li><a href="https://segmentfault.com/a/1190000019492734?utm_source=tag-newest">https://segmentfault.com/a/1190000019492734?utm_source=tag-newest</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路</title>
    <url>/Vue/vue-vnode/</url>
    <content><![CDATA[<p> <img src="https://static.vue-js.com/770b9670-442c-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、什么是虚拟DOM"><a href="#一、什么是虚拟DOM" class="headerlink" title="一、什么是虚拟DOM"></a>一、什么是虚拟DOM</h2><p>虚拟 DOM （<code>Virtual DOM</code> ）这个概念相信大家都不陌生，从 <code>React</code> 到 <code>Vue</code> ，虚拟 <code>DOM</code> 为这两个框架都带来了跨平台的能力（<code>React-Native</code> 和 <code>Weex</code>）</p>
<p>实际上它只是一层对真实<code>DOM</code>的抽象，以<code>JavaScript</code> 对象 (<code>VNode</code> 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上</p>
<p>在<code>Javascript</code>对象中，虚拟<code>DOM</code> 表现为一个 <code>Object </code>对象。并且最少包含标签名 (<code>tag</code>)、属性 (<code>attrs</code>) 和子元素对象 (<code>children</code>) 三个属性，不同框架对这三个属性的名命可能会有差别</p>
<p>创建虚拟<code>DOM</code>就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟<code>DOM</code>对象的节点与真实<code>DOM</code>的属性一一照应</p>
<p>在<code>vue</code>中同样使用到了虚拟<code>DOM</code>技术</p>
<p>定义真实<code>DOM</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p&quot;</span>&gt;</span>节点内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实例化<code>vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&quot;foo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>观察<code>render</code>的<code>render</code>，我们能得到虚拟<code>DOM</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">anonymous</span>(<span class="params"></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">with</span>(<span class="params"><span class="variable language_">this</span></span>)&#123;<span class="keyword">return</span> <span class="title function_">_c</span>(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;app&quot;</span>&#125;&#125;,[<span class="title function_">_c</span>(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">staticClass</span>:<span class="string">&quot;p&quot;</span>&#125;,</span><br><span class="line">					  [<span class="title function_">_v</span>(<span class="string">&quot;节点内容&quot;</span>)]),<span class="title function_">_v</span>(<span class="string">&quot; &quot;</span>),<span class="title function_">_c</span>(<span class="string">&#x27;h3&#x27;</span>,[<span class="title function_">_v</span>(<span class="title function_">_s</span>(foo))])])&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>通过<code>VNode</code>，<code>vue</code>可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过<code>diff</code>算法得出一些需要修改的最小单位,再更新视图，减少了<code>dom</code>操作，提高了性能</p>
<h2 id="二、为什么需要虚拟DOM"><a href="#二、为什么需要虚拟DOM" class="headerlink" title="二、为什么需要虚拟DOM"></a>二、为什么需要虚拟DOM</h2><p><code>DOM</code>是很慢的，其元素非常庞大，页面的性能问题，大部分都是由<code>DOM</code>操作引起的</p>
<p>真实的<code>DOM</code>节点，哪怕一个最简单的<code>div</code>也包含着很多属性，可以打印出来直观感受一下：<br> <img src="https://static.vue-js.com/cc95c7f0-442c-11eb-ab90-d9ae814b240d.png"></p>
<p>由此可见，操作<code>DOM</code>的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验</p>
<p><strong>举个例子：</strong></p>
<p>你用传统的原生<code>api</code>或<code>jQuery</code>去操作<code>DOM</code>时，浏览器会从构建<code>DOM</code>树开始从头到尾执行一遍流程</p>
<p>当你在一次操作时，需要更新10个<code>DOM</code>节点，浏览器没这么智能，收到第一个更新<code>DOM</code>请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p>
<p>而通过<code>VNode</code>，同样更新10个<code>DOM</code>节点，虚拟<code>DOM</code>不会立即操作<code>DOM</code>，而是将这10次更新的<code>diff</code>内容保存到本地的一个<code>js</code>对象中，最终将这个<code>js</code>对象一次性<code>attach</code>到<code>DOM</code>树上，避免大量的无谓计算</p>
<blockquote>
<p>很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是近期很火热的小程序，也可以是各种GUI</p>
</blockquote>
<h2 id="三、如何实现虚拟DOM"><a href="#三、如何实现虚拟DOM" class="headerlink" title="三、如何实现虚拟DOM"></a>三、如何实现虚拟DOM</h2><p>首先可以看看<code>vue</code>中<code>VNode</code>的结构</p>
<p>源码位置：src&#x2F;core&#x2F;vdom&#x2F;vnode.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="attr">tag</span>: string | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">VNodeData</span> | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">children</span>: ?<span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt;;</span><br><span class="line">  <span class="attr">text</span>: string | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">elm</span>: <span class="title class_">Node</span> | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">ns</span>: string | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">context</span>: <span class="title class_">Component</span> | <span class="keyword">void</span>; <span class="comment">// rendered in this component&#x27;s scope</span></span><br><span class="line">  <span class="attr">functionalContext</span>: <span class="title class_">Component</span> | <span class="keyword">void</span>; <span class="comment">// only for functional component root nodes</span></span><br><span class="line">  <span class="attr">key</span>: string | number | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">componentOptions</span>: <span class="title class_">VNodeComponentOptions</span> | <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">componentInstance</span>: <span class="title class_">Component</span> | <span class="keyword">void</span>; <span class="comment">// component instance</span></span><br><span class="line">  <span class="attr">parent</span>: <span class="title class_">VNode</span> | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></span><br><span class="line">  <span class="attr">raw</span>: boolean; <span class="comment">// contains raw HTML? (server only)</span></span><br><span class="line">  <span class="attr">isStatic</span>: boolean; <span class="comment">// hoisted static node</span></span><br><span class="line">  <span class="attr">isRootInsert</span>: boolean; <span class="comment">// necessary for enter transition check</span></span><br><span class="line">  <span class="attr">isComment</span>: boolean; <span class="comment">// empty comment placeholder?</span></span><br><span class="line">  <span class="attr">isCloned</span>: boolean; <span class="comment">// is a cloned node?</span></span><br><span class="line">  <span class="attr">isOnce</span>: boolean; <span class="comment">// is a v-once node?</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    tag?: string,</span></span><br><span class="line"><span class="params">    data?: VNodeData,</span></span><br><span class="line"><span class="params">    children?: ?<span class="built_in">Array</span>&lt;VNode&gt;,</span></span><br><span class="line"><span class="params">    text?: string,</span></span><br><span class="line"><span class="params">    elm?: Node,</span></span><br><span class="line"><span class="params">    context?: Component,</span></span><br><span class="line"><span class="params">    componentOptions?: VNodeComponentOptions</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">/*当前节点的标签名*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tag</span> = tag</span><br><span class="line">    <span class="comment">/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="comment">/*当前节点的子节点，是一个数组*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = children</span><br><span class="line">    <span class="comment">/*当前节点的文本*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">text</span> = text</span><br><span class="line">    <span class="comment">/*当前虚拟节点对应的真实dom节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elm</span> = elm</span><br><span class="line">    <span class="comment">/*当前节点的名字空间*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ns</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">/*编译作用域*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="comment">/*函数化组件作用域*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">functionalContext</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">/*节点的key属性，被当作节点的标志，用以优化*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = data &amp;&amp; data.<span class="property">key</span></span><br><span class="line">    <span class="comment">/*组件的option选项*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentOptions</span> = componentOptions</span><br><span class="line">    <span class="comment">/*当前节点对应的组件的实例*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentInstance</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">/*当前节点的父节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">raw</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/*静态节点标志*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isStatic</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/*是否作为跟节点插入*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isRootInsert</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">/*是否为注释节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isComment</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/*是否为克隆节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCloned</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">/*是否有v-once指令*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isOnce</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class="line">  <span class="comment">/* istanbul ignore next https://github.com/answershuto/learnVue*/</span></span><br><span class="line">  get <span class="title function_">child</span> (): <span class="title class_">Component</span> | <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">componentInstance</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里对<code>VNode</code>进行稍微的说明：</p>
<ul>
<li>所有对象的 <code>context</code> 选项都指向了 <code>Vue</code> 实例</li>
<li><code>elm</code> 属性则指向了其相对应的真实 <code>DOM</code> 节点</li>
</ul>
<p><code>vue</code>是通过<code>createElement</code>生成<code>VNode</code></p>
<p>源码位置：src&#x2F;core&#x2F;vdom&#x2F;create-element.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createElement</span> (<span class="params"></span></span><br><span class="line"><span class="params">  context: Component,</span></span><br><span class="line"><span class="params">  tag: any,</span></span><br><span class="line"><span class="params">  data: any,</span></span><br><span class="line"><span class="params">  children: any,</span></span><br><span class="line"><span class="params">  normalizationType: any,</span></span><br><span class="line"><span class="params">  alwaysNormalize: boolean</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">VNode</span> | <span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data) || <span class="title function_">isPrimitive</span>(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isTrue</span>(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = <span class="variable constant_">ALWAYS_NORMALIZE</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_createElement</span>(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面可以看到<code>createElement</code> 方法实际上是对 <code>_createElement</code> 方法的封装，对参数的传入进行了判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">_createElement</span>(<span class="params"></span></span><br><span class="line"><span class="params">    context: Component,</span></span><br><span class="line"><span class="params">    tag?: string | Class&lt;Component&gt; | <span class="built_in">Function</span> | <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    data?: VNodeData,</span></span><br><span class="line"><span class="params">    children?: any,</span></span><br><span class="line"><span class="params">    normalizationType?: number</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">VNode</span> | <span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(data) &amp;&amp; <span class="title function_">isDef</span>((<span class="attr">data</span>: any).<span class="property">__ob__</span>)) &#123;</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`Avoid using observed data object as vnode data: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>\n`</span> +</span><br><span class="line">            <span class="string">&#x27;Always create fresh vnode data objects in each render!&#x27;</span>,</span><br><span class="line">            context<span class="string">`</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">        return createEmptyVNode()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // object syntax in v-bind</span></span><br><span class="line"><span class="string">    if (isDef(data) &amp;&amp; isDef(data.is)) &#123;</span></span><br><span class="line"><span class="string">        tag = data.is</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (!tag) &#123;</span></span><br><span class="line"><span class="string">        // in case of component :is set to falsy value</span></span><br><span class="line"><span class="string">        return createEmptyVNode()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ... </span></span><br><span class="line"><span class="string">    // support single function children as default scoped slot</span></span><br><span class="line"><span class="string">    if (Array.isArray(children) &amp;&amp;</span></span><br><span class="line"><span class="string">        typeof children[0] === &#x27;function&#x27;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">        data = data || &#123;&#125;</span></span><br><span class="line"><span class="string">        data.scopedSlots = &#123; default: children[0] &#125;</span></span><br><span class="line"><span class="string">        children.length = 0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (normalizationType === ALWAYS_NORMALIZE) &#123;</span></span><br><span class="line"><span class="string">        children = normalizeChildren(children)</span></span><br><span class="line"><span class="string">    &#125; else if ( === SIMPLE_NORMALIZE) &#123;</span></span><br><span class="line"><span class="string">        children = simpleNormalizeChildren(children)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">	// 创建VNode</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到<code>_createElement</code>接收5个参数：</p>
<ul>
<li><p><code>context</code> 表示 <code>VNode</code> 的上下文环境，是 <code>Component</code> 类型</p>
</li>
<li><p>tag 表示标签，它可以是一个字符串，也可以是一个 <code>Component</code></p>
</li>
<li><p><code>data</code> 表示 <code>VNode</code> 的数据，它是一个 <code>VNodeData</code> 类型</p>
</li>
<li><p><code>children</code> 表示当前 <code>VNode </code>的子节点，它是任意类型的</p>
</li>
<li><p><code>normalizationType</code> 表示子节点规范的类型，类型不同规范的方法也就不一样，主要是参考 <code>render</code> 函数是编译生成的还是用户手写的</p>
</li>
</ul>
<p>根据<code>normalizationType</code> 的类型，<code>children</code>会有不同的定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (normalizationType === <span class="variable constant_">ALWAYS_NORMALIZE</span>) &#123;</span><br><span class="line">    children = <span class="title function_">normalizeChildren</span>(children)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( === <span class="variable constant_">SIMPLE_NORMALIZE</span>) &#123;</span><br><span class="line">    children = <span class="title function_">simpleNormalizeChildren</span>(children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>simpleNormalizeChildren</code>方法调用场景是 <code>render</code> 函数是编译生成的</p>
<p><code>normalizeChildren</code>方法调用场景分为下面两种：</p>
<ul>
<li><code>render</code> 函数是用户手写的</li>
<li>编译 <code>slot</code>、<code>v-for</code> 的时候会产生嵌套数组</li>
</ul>
<p>无论是<code>simpleNormalizeChildren</code>还是<code>normalizeChildren</code>都是对<code>children</code>进行规范（使<code>children</code> 变成了一个类型为 <code>VNode</code> 的 <code>Array</code>），这里就不展开说了</p>
<p>规范化<code>children</code>的源码位置在：src&#x2F;core&#x2F;vdom&#x2F;helpers&#x2F;normalzie-children.js</p>
<p>在规范化<code>children</code>后，就去创建<code>VNode</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vnode, ns</span><br><span class="line"><span class="comment">// 对tag进行判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Ctor</span></span><br><span class="line">  ns = (context.<span class="property">$vnode</span> &amp;&amp; context.<span class="property">$vnode</span>.<span class="property">ns</span>) || config.<span class="title function_">getTagNamespace</span>(tag)</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="title function_">isReservedTag</span>(tag)) &#123;</span><br><span class="line">    <span class="comment">// 如果是内置的节点，则直接创建一个普通VNode</span></span><br><span class="line">    vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">      config.<span class="title function_">parsePlatformTagName</span>(tag), data, children,</span><br><span class="line">      <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(<span class="title class_">Ctor</span> = <span class="title function_">resolveAsset</span>(context.<span class="property">$options</span>, <span class="string">&#x27;components&#x27;</span>, tag))) &#123;</span><br><span class="line">    <span class="comment">// component</span></span><br><span class="line">    <span class="comment">// 如果是component类型，则会通过createComponent创建VNode节点</span></span><br><span class="line">    vnode = <span class="title function_">createComponent</span>(<span class="title class_">Ctor</span>, data, context, children, tag)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">      tag, data, children,</span><br><span class="line">      <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// direct component options / constructor</span></span><br><span class="line">  vnode = <span class="title function_">createComponent</span>(tag, data, context, children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>createComponent</code>同样是创建<code>VNode</code></p>
<p>源码位置：src&#x2F;core&#x2F;vdom&#x2F;create-component.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createComponent</span> (<span class="params"></span></span><br><span class="line"><span class="params">  Ctor: Class&lt;Component&gt; | <span class="built_in">Function</span> | <span class="built_in">Object</span> | <span class="keyword">void</span>,</span></span><br><span class="line"><span class="params">  data: ?VNodeData,</span></span><br><span class="line"><span class="params">  context: Component,</span></span><br><span class="line"><span class="params">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;,</span></span><br><span class="line"><span class="params">  tag?: string</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">VNode</span> | <span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt; | <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(<span class="title class_">Ctor</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 构建子类构造函数 </span></span><br><span class="line">  <span class="keyword">const</span> baseCtor = context.<span class="property">$options</span>.<span class="property">_base</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// plain options object: turn it into a constructor</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isObject</span>(<span class="title class_">Ctor</span>)) &#123;</span><br><span class="line">    <span class="title class_">Ctor</span> = baseCtor.<span class="title function_">extend</span>(<span class="title class_">Ctor</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if at this stage it&#x27;s not a constructor or an async component factory,</span></span><br><span class="line">  <span class="comment">// reject.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Ctor</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`Invalid Component definition: <span class="subst">$&#123;<span class="built_in">String</span>(Ctor)&#125;</span>`</span>, context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// async component</span></span><br><span class="line">  <span class="keyword">let</span> asyncFactory</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(<span class="title class_">Ctor</span>.<span class="property">cid</span>)) &#123;</span><br><span class="line">    asyncFactory = <span class="title class_">Ctor</span></span><br><span class="line">    <span class="title class_">Ctor</span> = <span class="title function_">resolveAsyncComponent</span>(asyncFactory, baseCtor, context)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Ctor</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createAsyncPlaceholder</span>(</span><br><span class="line">        asyncFactory,</span><br><span class="line">        data,</span><br><span class="line">        context,</span><br><span class="line">        children,</span><br><span class="line">        tag</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data = data || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// resolve constructor options in case global mixins are applied after</span></span><br><span class="line">  <span class="comment">// component constructor creation</span></span><br><span class="line">  <span class="title function_">resolveConstructorOptions</span>(<span class="title class_">Ctor</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// transform component v-model data into props &amp; events</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(data.<span class="property">model</span>)) &#123;</span><br><span class="line">    <span class="title function_">transformModel</span>(<span class="title class_">Ctor</span>.<span class="property">options</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// extract props</span></span><br><span class="line">  <span class="keyword">const</span> propsData = <span class="title function_">extractPropsFromVNodeData</span>(data, <span class="title class_">Ctor</span>, tag)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// functional component</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isTrue</span>(<span class="title class_">Ctor</span>.<span class="property">options</span>.<span class="property">functional</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createFunctionalComponent</span>(<span class="title class_">Ctor</span>, propsData, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// extract listeners, since these needs to be treated as</span></span><br><span class="line">  <span class="comment">// child component listeners instead of DOM listeners</span></span><br><span class="line">  <span class="keyword">const</span> listeners = data.<span class="property">on</span></span><br><span class="line">  <span class="comment">// replace with listeners with .native modifier</span></span><br><span class="line">  <span class="comment">// so it gets processed during parent component patch.</span></span><br><span class="line">  data.<span class="property">on</span> = data.<span class="property">nativeOn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isTrue</span>(<span class="title class_">Ctor</span>.<span class="property">options</span>.<span class="property">abstract</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = data.<span class="property">slot</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (slot) &#123;</span><br><span class="line">      data.<span class="property">slot</span> = slot</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 安装组件钩子函数，把钩子函数合并到data.hook中</span></span><br><span class="line">  <span class="title function_">installComponentHooks</span>(data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实例化一个VNode返回。组件的VNode是没有children的</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="title class_">Ctor</span>.<span class="property">options</span>.<span class="property">name</span> || tag</span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">    <span class="string">`vue-component-<span class="subst">$&#123;Ctor.cid&#125;</span><span class="subst">$&#123;name ? <span class="string">`-<span class="subst">$&#123;name&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>,</span><br><span class="line">    data, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, context,</span><br><span class="line">    &#123; <span class="title class_">Ctor</span>, propsData, listeners, tag, children &#125;,</span><br><span class="line">    asyncFactory</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (__WEEX__ &amp;&amp; <span class="title function_">isRecyclableComponent</span>(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">renderRecyclableComponentTemplate</span>(vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>稍微提下<code>createComponent</code>生成<code>VNode</code>的三个关键流程：</p>
<ul>
<li>构造子类构造函数<code>Ctor </code></li>
<li><code>installComponentHooks</code>安装组件钩子函数</li>
<li>实例化 <code>vnode</code></li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>createElement</code> 创建 <code>VNode</code> 的过程，每个 <code>VNode</code> 有 <code>children</code>，<code>children</code> 每个元素也是一个<code>VNode</code>，这样就形成了一个虚拟树结构，用于描述真实的<code>DOM</code>树结构</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://ustbhuangyi.github.io/vue-analysis/v2/data-driven/create-element.html#children-%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96">https://ustbhuangyi.github.io/vue-analysis/v2/data-driven/create-element.html#children-%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96</a></li>
<li><a href="https://juejin.cn/post/6876711874050818061">https://juejin.cn/post/6876711874050818061</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>说下你的vue项目的目录结构，如果是大型项目你该怎么划分结构和划分组件呢？</title>
    <url>/Vue/vue-structure/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/b6cd6a60-4aba-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、为什么要划分"><a href="#一、为什么要划分" class="headerlink" title="一、为什么要划分"></a>一、为什么要划分</h2><p>使用<code>vue</code>构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高</p>
<p>在划分项目结构的时候，需要遵循一些基本的原则：</p>
<ul>
<li>文件夹和文件夹内部文件的语义一致性</li>
<li>单一入口&#x2F;出口</li>
<li>就近原则，紧耦合的文件应该放到一起，且应以相对路径引用</li>
<li>公共的文件应该以绝对路径的方式从根目录引用</li>
<li><code>/src</code> 外的文件不应该被引入</li>
</ul>
<h3 id="文件夹和文件夹内部文件的语义一致性"><a href="#文件夹和文件夹内部文件的语义一致性" class="headerlink" title="文件夹和文件夹内部文件的语义一致性"></a>文件夹和文件夹内部文件的语义一致性</h3><p>我们的目录结构都会有一个文件夹是按照路由模块来划分的，如<code>pages</code>文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹</p>
<p>这样做的好处在于一眼就从 <code>pages</code>文件夹看出这个项目的路由有哪些</p>
<h3 id="单一入口-出口"><a href="#单一入口-出口" class="headerlink" title="单一入口&#x2F;出口"></a>单一入口&#x2F;出口</h3><p>举个例子，在<code>pages</code>文件夹里面存在一个<code>seller</code>文件夹，这时候<code>seller</code> 文件夹应该作为一个独立的模块由外部引入，并且 <code>seller/index.js</code> 应该作为外部引入 seller 模块的唯一入口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="keyword">import</span> sellerReducer <span class="keyword">from</span> <span class="string">&#x27;src/pages/seller/reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> sellerReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;src/pages/seller&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点</p>
<h3 id="就近原则，紧耦合的文件应该放到一起，且应以相对路径引用"><a href="#就近原则，紧耦合的文件应该放到一起，且应以相对路径引用" class="headerlink" title="就近原则，紧耦合的文件应该放到一起，且应以相对路径引用"></a>就近原则，紧耦合的文件应该放到一起，且应以相对路径引用</h3><p>使用相对路径可以保证模块内部的独立性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.scss&#x27;</span></span><br><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;src/pages/seller/index.module.scss&#x27;</span></span><br></pre></td></tr></table></figure>

<p>举个例子</p>
<p>假设我们现在的 seller 目录是在 <code>src/pages/seller</code>，如果我们后续发生了路由变更，需要加一个层级，变成 <code>src/pages/user/seller</code>。</p>
<p>如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，<code>seller</code> 文件夹内部不需要做任何变更。</p>
<p>但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 <code>import</code> 的路径做修改</p>
<h3 id="公共的文件应该以绝对路径的方式从根目录引用"><a href="#公共的文件应该以绝对路径的方式从根目录引用" class="headerlink" title="公共的文件应该以绝对路径的方式从根目录引用"></a>公共的文件应该以绝对路径的方式从根目录引用</h3><p>公共指的是多个路由模块共用，如一些公共的组件，我们可以放在<code>src/components</code>下</p>
<p>在使用到的页面中，采用绝对路径的形式引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/input&#x27;</span></span><br><span class="line"><span class="comment">// 正确用法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&#x27;src/components/input&#x27;</span></span><br></pre></td></tr></table></figure>

<p>同样的，如果我们需要对文件夹结构进行调整。将 <code>/src/components/input</code> 变成 <code>/src/components/new/input</code>，如果使用绝对路径，只需要全局搜索替换</p>
<p>再加上绝对路径有全局的语义，相对路径有独立模块的语义</p>
<h3 id="src-外的文件不应该被引入"><a href="#src-外的文件不应该被引入" class="headerlink" title="&#x2F;src 外的文件不应该被引入"></a>&#x2F;src 外的文件不应该被引入</h3><p><code>vue-cli</code>脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个<code>src</code>文件夹，里面放着所有的项目需要的资源，<code>js</code>,<code> css</code>, <code>png</code>, <code>svg</code> 等等。<code>src</code> 外会放一些项目配置，依赖，环境等文件</p>
<p>这样的好处是方便划分项目代码文件和配置文件</p>
<h2 id="二、目录结构"><a href="#二、目录结构" class="headerlink" title="二、目录结构"></a>二、目录结构</h2><p>单页面目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">│  .<span class="property">browserslistrc</span></span><br><span class="line">│  .<span class="property">env</span>.<span class="property">production</span></span><br><span class="line">│  .<span class="property">eslintrc</span>.<span class="property">js</span></span><br><span class="line">│  .<span class="property">gitignore</span></span><br><span class="line">│  babel.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">│  package-lock.<span class="property">json</span></span><br><span class="line">│  package.<span class="property">json</span></span><br><span class="line">│  <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">│  vue.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">│  yarn-error.<span class="property">log</span></span><br><span class="line">│  yarn.<span class="property">lock</span></span><br><span class="line">│</span><br><span class="line">├─public</span><br><span class="line">│      favicon.<span class="property">ico</span></span><br><span class="line">│      index.<span class="property">html</span></span><br><span class="line">│</span><br><span class="line">|-- src</span><br><span class="line">    |-- components</span><br><span class="line">        |-- input</span><br><span class="line">            |-- index.<span class="property">js</span></span><br><span class="line">            |-- index.<span class="property">module</span>.<span class="property">scss</span></span><br><span class="line">    |-- pages</span><br><span class="line">        |-- seller</span><br><span class="line">            |-- components</span><br><span class="line">                |-- input</span><br><span class="line">                    |-- index.<span class="property">js</span></span><br><span class="line">                    |-- index.<span class="property">module</span>.<span class="property">scss</span></span><br><span class="line">            |-- reducer.<span class="property">js</span></span><br><span class="line">            |-- saga.<span class="property">js</span></span><br><span class="line">            |-- index.<span class="property">js</span></span><br><span class="line">            |-- index.<span class="property">module</span>.<span class="property">scss</span></span><br><span class="line">        |-- buyer</span><br><span class="line">            |-- index.<span class="property">js</span></span><br><span class="line">        |-- index.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p>多页面目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">my-vue-<span class="attr">test</span>:.</span><br><span class="line">│  .<span class="property">browserslistrc</span></span><br><span class="line">│  .<span class="property">env</span>.<span class="property">production</span></span><br><span class="line">│  .<span class="property">eslintrc</span>.<span class="property">js</span></span><br><span class="line">│  .<span class="property">gitignore</span></span><br><span class="line">│  babel.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">│  package-lock.<span class="property">json</span></span><br><span class="line">│  package.<span class="property">json</span></span><br><span class="line">│  <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">│  vue.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">│  yarn-error.<span class="property">log</span></span><br><span class="line">│  yarn.<span class="property">lock</span></span><br><span class="line">│</span><br><span class="line">├─public</span><br><span class="line">│      favicon.<span class="property">ico</span></span><br><span class="line">│      index.<span class="property">html</span></span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    ├─apis <span class="comment">//接口文件根据页面或实例模块化</span></span><br><span class="line">    │      index.<span class="property">js</span></span><br><span class="line">    │      login.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    ├─components <span class="comment">//全局公共组件</span></span><br><span class="line">    │  └─header</span><br><span class="line">    │          index.<span class="property">less</span></span><br><span class="line">    │          index.<span class="property">vue</span></span><br><span class="line">    │</span><br><span class="line">    ├─config <span class="comment">//配置（环境变量配置不同passid等）</span></span><br><span class="line">    │      env.<span class="property">js</span></span><br><span class="line">    │      index.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    ├─contant <span class="comment">//常量</span></span><br><span class="line">    │      index.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    ├─images <span class="comment">//图片</span></span><br><span class="line">    │      logo.<span class="property">png</span></span><br><span class="line">    │</span><br><span class="line">    ├─pages <span class="comment">//多页面vue项目，不同的实例</span></span><br><span class="line">    │  ├─index <span class="comment">//主实例</span></span><br><span class="line">    │  │  │  index.<span class="property">js</span></span><br><span class="line">    │  │  │  index.<span class="property">vue</span></span><br><span class="line">    │  │  │  main.<span class="property">js</span></span><br><span class="line">    │  │  │  router.<span class="property">js</span></span><br><span class="line">    │  │  │  store.<span class="property">js</span></span><br><span class="line">    │  │  │</span><br><span class="line">    │  │  ├─components <span class="comment">//业务组件</span></span><br><span class="line">    │  │  └─pages <span class="comment">//此实例中的各个路由</span></span><br><span class="line">    │  │      ├─amenu</span><br><span class="line">    │  │      │      index.<span class="property">vue</span></span><br><span class="line">    │  │      │</span><br><span class="line">    │  │      └─bmenu</span><br><span class="line">    │  │              index.<span class="property">vue</span></span><br><span class="line">    │  │</span><br><span class="line">    │  └─login <span class="comment">//另一个实例</span></span><br><span class="line">    │          index.<span class="property">js</span></span><br><span class="line">    │          index.<span class="property">vue</span></span><br><span class="line">    │          main.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    ├─scripts <span class="comment">//包含各种常用配置，工具函数</span></span><br><span class="line">    │  │  map.<span class="property">js</span></span><br><span class="line">    │  │</span><br><span class="line">    │  └─utils</span><br><span class="line">    │          helper.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    ├─store <span class="comment">//vuex仓库</span></span><br><span class="line">    │  │  index.<span class="property">js</span></span><br><span class="line">    │  │</span><br><span class="line">    │  ├─index</span><br><span class="line">    │  │      actions.<span class="property">js</span></span><br><span class="line">    │  │      getters.<span class="property">js</span></span><br><span class="line">    │  │      index.<span class="property">js</span></span><br><span class="line">    │  │      mutation-types.<span class="property">js</span></span><br><span class="line">    │  │      mutations.<span class="property">js</span></span><br><span class="line">    │  │      state.<span class="property">js</span></span><br><span class="line">    │  │</span><br><span class="line">    │  └─user</span><br><span class="line">    │          actions.<span class="property">js</span></span><br><span class="line">    │          getters.<span class="property">js</span></span><br><span class="line">    │          index.<span class="property">js</span></span><br><span class="line">    │          mutation-types.<span class="property">js</span></span><br><span class="line">    │          mutations.<span class="property">js</span></span><br><span class="line">    │          state.<span class="property">js</span></span><br><span class="line">    │</span><br><span class="line">    └─styles <span class="comment">//样式统一配置</span></span><br><span class="line">        │  components.<span class="property">less</span></span><br><span class="line">        │</span><br><span class="line">        ├─animation</span><br><span class="line">        │      index.<span class="property">less</span></span><br><span class="line">        │      slide.<span class="property">less</span></span><br><span class="line">        │</span><br><span class="line">        ├─base</span><br><span class="line">        │      index.<span class="property">less</span></span><br><span class="line">        │      style.<span class="property">less</span></span><br><span class="line">        │      <span class="keyword">var</span>.<span class="property">less</span></span><br><span class="line">        │      widget.<span class="property">less</span></span><br><span class="line">        │</span><br><span class="line">        └─common</span><br><span class="line">                index.<span class="property">less</span></span><br><span class="line">                reset.<span class="property">less</span></span><br><span class="line">                style.<span class="property">less</span></span><br><span class="line">                transition.<span class="property">less</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><p><a href="https://juejin.cn/post/6844904129186234381#heading-0">https://juejin.cn/post/6844904129186234381#heading-0</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/89693668">https://zhuanlan.zhihu.com/p/89693668</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件之间的通信方式有哪些？</title>
    <url>/Vue/vue-vue-components-communication/</url>
    <content><![CDATA[<h2 id="一、组件通信的概念"><a href="#一、组件通信的概念" class="headerlink" title="一、组件通信的概念"></a>一、组件通信的概念</h2><p>组件通信是指组件与组件之间数据传递和交互的方式。在 Vue 中，组件之间的通信是非常重要的概念，因为一个应用往往由多个组件构成，它们之间需要相互配合才能完成特定的功能。</p>
<h2 id="二、通信方式"><a href="#二、通信方式" class="headerlink" title="二、通信方式"></a>二、通信方式</h2><h3 id="1-props-emit"><a href="#1-props-emit" class="headerlink" title="1. props &#x2F; $emit"></a>1. props &#x2F; $emit</h3><p>父组件通过 props 向子组件传递数据，子组件通过 $emit 向父组件发送事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child :msg=&quot;message&quot; @changeMsg=&quot;handleChange&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange(val) &#123;</span><br><span class="line">      this.message = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;msg&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&#x27;changeMsg&#x27;, &#x27;World&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-refs-parent-children"><a href="#2-refs-parent-children" class="headerlink" title="2. $refs &#x2F; $parent &#x2F; $children"></a>2. $refs &#x2F; $parent &#x2F; $children</h3><p>通过 ref 获取子组件实例，直接调用子组件的方法或访问数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child ref=&quot;childComp&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 访问子组件的数据和方法</span><br><span class="line">    this.$refs.childComp.someMethod()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-EventBus"><a href="#3-EventBus" class="headerlink" title="3. EventBus"></a>3. EventBus</h3><p>通过一个空的 Vue 实例作为中央事件总线，实现任意组件间的通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件 A</span></span><br><span class="line"><span class="title class_">EventBus</span>.$emit(<span class="string">&#x27;custom-event&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件 B</span></span><br><span class="line"><span class="title class_">EventBus</span>.$on(<span class="string">&#x27;custom-event&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-Vuex"><a href="#4-Vuex" class="headerlink" title="4. Vuex"></a>4. Vuex</h3><p>状态管理模式，集中式存储管理应用的所有组件的状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="三、各种通信方式的使用场景"><a href="#三、各种通信方式的使用场景" class="headerlink" title="三、各种通信方式的使用场景"></a>三、各种通信方式的使用场景</h2><ol>
<li><p>props &#x2F; $emit</p>
<ul>
<li>适用于父子组件通信</li>
<li>简单且清晰的数据流向</li>
</ul>
</li>
<li><p>$refs &#x2F; $parent &#x2F; $children</p>
<ul>
<li>适用于父子组件通信</li>
<li>需要直接操作子组件时使用</li>
</ul>
</li>
<li><p>EventBus</p>
<ul>
<li>适用于任意组件间通信</li>
<li>项目较小时使用</li>
<li>数据流混乱时不易维护</li>
</ul>
</li>
<li><p>Vuex</p>
<ul>
<li>适用于复杂的数据管理</li>
<li>大型项目推荐使用</li>
<li>需要共享的状态较多时</li>
</ul>
</li>
</ol>
<h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><ol>
<li>避免过度使用全局事件总线</li>
<li>合理使用 Vuex，不是所有状态都需要放在 Vuex 中</li>
<li>优先考虑 props &#x2F; $emit 这种最简单的通信方式</li>
<li>组件通信遵循单向数据流原则</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://cn.vuejs.org/v2/guide/components.html">Vue.js 官方文档 - 组件基础</a></li>
<li><a href="https://vuex.vuejs.org/zh/">Vuex 官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
        <tag>组件通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期的理解？</title>
    <url>/Vue/vue-vue-lifecycle/</url>
    <content><![CDATA[<h2 id="一、什么是生命周期"><a href="#一、什么是生命周期" class="headerlink" title="一、什么是生命周期"></a>一、什么是生命周期</h2><p>生命周期（Life Cycle）是指 Vue 组件从创建到销毁的整个过程，也就是组件的生命历程。</p>
<p>在这个过程中，Vue 提供了一系列的生命周期钩子函数，让我们能在特定的阶段执行自己的代码。</p>
<h2 id="二、生命周期有哪些"><a href="#二、生命周期有哪些" class="headerlink" title="二、生命周期有哪些"></a>二、生命周期有哪些</h2><p>Vue 2.x 的生命周期钩子主要包含：</p>
<h3 id="1-创建阶段"><a href="#1-创建阶段" class="headerlink" title="1. 创建阶段"></a>1. 创建阶段</h3><ul>
<li>beforeCreate：实例创建前，此时数据观测和事件配置都未初始化</li>
<li>created：实例创建后，此时已完成数据观测，但尚未挂载到 DOM</li>
</ul>
<h3 id="2-挂载阶段"><a href="#2-挂载阶段" class="headerlink" title="2. 挂载阶段"></a>2. 挂载阶段</h3><ul>
<li>beforeMount：DOM 挂载前，此时模板已编译，但还未挂载到页面</li>
<li>mounted：DOM 挂载后，此时组件已经渲染到页面上</li>
</ul>
<h3 id="3-更新阶段"><a href="#3-更新阶段" class="headerlink" title="3. 更新阶段"></a>3. 更新阶段</h3><ul>
<li>beforeUpdate：数据更新时，DOM 更新之前调用</li>
<li>updated：数据更新后，DOM 更新完成后调用</li>
</ul>
<h3 id="4-销毁阶段"><a href="#4-销毁阶段" class="headerlink" title="4. 销毁阶段"></a>4. 销毁阶段</h3><ul>
<li>beforeDestroy：实例销毁前调用</li>
<li>destroyed：实例销毁后调用</li>
</ul>
<h2 id="三、生命周期的应用场景"><a href="#三、生命周期的应用场景" class="headerlink" title="三、生命周期的应用场景"></a>三、生命周期的应用场景</h2><ol>
<li><p>created</p>
<ul>
<li>发送 ajax 请求</li>
<li>初始化数据</li>
<li>注册全局事件</li>
</ul>
</li>
<li><p>mounted</p>
<ul>
<li>操作 DOM</li>
<li>初始化第三方插件</li>
<li>获取 DOM 节点信息</li>
</ul>
</li>
<li><p>beforeDestroy</p>
<ul>
<li>清除定时器</li>
<li>解绑全局事件</li>
<li>销毁第三方插件</li>
</ul>
</li>
</ol>
<h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><ol>
<li><p>created 和 mounted 的区别</p>
<ul>
<li>created 在组件实例创建完成后调用，此时还未挂载到 DOM</li>
<li>mounted 在组件挂载到 DOM 后调用，可以操作 DOM</li>
</ul>
</li>
<li><p>不要在生命周期函数中使用箭头函数</p>
<ul>
<li>箭头函数绑定了父级作用域的上下文，this 将不会按照期望指向 Vue 实例</li>
</ul>
</li>
<li><p>destroyed 钩子中，实例的所有指令都被解绑，所有事件监听器被移除，所有子实例也都被销毁</p>
</li>
</ol>
<h2 id="五、示例代码"><a href="#五、示例代码" class="headerlink" title="五、示例代码"></a>五、示例代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实例创建前&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实例创建后&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>() <span class="comment">// 发送请求获取数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM 挂载后&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initPlugin</span>() <span class="comment">// 初始化插件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实例销毁前&#x27;</span>)</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>) <span class="comment">// 清除定时器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">Vue.js 官方文档 - 生命周期钩子</a></li>
<li><a href="https://ustbhuangyi.github.io/vue-analysis/v2/components/lifecycle.html">Vue.js 技术揭秘</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目的性能优化方案有哪些？</title>
    <url>/Vue/vue-vue-performance/</url>
    <content><![CDATA[<h2 id="一、代码层面优化"><a href="#一、代码层面优化" class="headerlink" title="一、代码层面优化"></a>一、代码层面优化</h2><h3 id="1-数据层面"><a href="#1-数据层面" class="headerlink" title="1. 数据层面"></a>1. 数据层面</h3><h4 id="1-1-合理使用-v-show-和-v-if"><a href="#1-1-合理使用-v-show-和-v-if" class="headerlink" title="1.1 合理使用 v-show 和 v-if"></a>1.1 合理使用 v-show 和 v-if</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 频繁切换用 v-show</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>频繁切换的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件渲染用 v-if</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span>管理员菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-使用-computed-代替-methods"><a href="#1-2-使用-computed-代替-methods" class="headerlink" title="1.2 使用 computed 代替 methods"></a>1.2 使用 computed 代替 methods</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 不推荐</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 推荐</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-避免重复数据"><a href="#1-3-避免重复数据" class="headerlink" title="1.3 避免重复数据"></a>1.3 避免重复数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 不推荐</span></span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">      <span class="attr">filterList</span>: [], <span class="comment">// 通过 list 过滤得到</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 推荐：使用计算属性</span></span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">filterList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">visible</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-组件优化"><a href="#2-组件优化" class="headerlink" title="2. 组件优化"></a>2. 组件优化</h3><h4 id="2-1-路由懒加载"><a href="#2-1-路由懒加载" class="headerlink" title="2.1 路由懒加载"></a>2.1 路由懒加载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用动态导入</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/user/index.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="2-2-组件按需加载"><a href="#2-2-组件按需加载" class="headerlink" title="2.2 组件按需加载"></a>2.2 组件按需加载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Select</span>, <span class="title class_">Table</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus/lib/button&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Select</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus/lib/select&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-keep-alive-缓存组件"><a href="#2-3-keep-alive-缓存组件" class="headerlink" title="2.3 keep-alive 缓存组件"></a>2.3 keep-alive 缓存组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;keep-alive :include=&quot;[&#x27;UserList&#x27;, &#x27;UserInfo&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 需要缓存的组件名</span><br><span class="line">      cacheComponents: [&#x27;UserList&#x27;, &#x27;UserInfo&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-渲染优化"><a href="#3-渲染优化" class="headerlink" title="3. 渲染优化"></a>3. 渲染优化</h3><h4 id="3-1-使用-v-once-处理静态内容"><a href="#3-1-使用-v-once-处理静态内容" class="headerlink" title="3.1 使用 v-once 处理静态内容"></a>3.1 使用 v-once 处理静态内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 静态内容只渲染一次 --&gt;</span><br><span class="line">  &lt;div v-once&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; description &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-使用-v-memo-缓存模板"><a href="#3-2-使用-v-memo-缓存模板" class="headerlink" title="3.2 使用 v-memo 缓存模板"></a>3.2 使用 v-memo 缓存模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-memo=&quot;[item.id, item.updated]&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; item.content &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-长列表优化"><a href="#3-3-长列表优化" class="headerlink" title="3.3 长列表优化"></a>3.3 长列表优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;recycle-scroller</span><br><span class="line">    class=&quot;scroller&quot;</span><br><span class="line">    :items=&quot;items&quot;</span><br><span class="line">    :item-size=&quot;32&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template #default=&quot;&#123; item &#125;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;user-item&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/recycle-scroller&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; RecycleScroller &#125; from &#x27;vue-virtual-scroller&#x27;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    RecycleScroller</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: Array.from(&#123; length: 10000 &#125;).map((_, i) =&gt; (&#123;</span><br><span class="line">        id: i,</span><br><span class="line">        name: `User $&#123;i&#125;`</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="二、打包优化"><a href="#二、打包优化" class="headerlink" title="二、打包优化"></a>二、打包优化</h2><h3 id="1-代码分割"><a href="#1-代码分割" class="headerlink" title="1. 代码分割"></a>1. 代码分割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">      <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">          <span class="attr">vendor</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;chunk-vendors&#x27;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">common</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;chunk-common&#x27;</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">            <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-压缩资源"><a href="#2-压缩资源" class="headerlink" title="2. 压缩资源"></a>2. 压缩资源</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(js|css|html)$/</span>,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">// 10KB</span></span><br><span class="line">        <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-CDN-优化"><a href="#3-CDN-优化" class="headerlink" title="3. CDN 优化"></a>3. CDN 优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="title function_">externals</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public/index.html</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@3.2.31&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue-router@4.0.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vuex@4.0.2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.26.1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、运行时优化"><a href="#三、运行时优化" class="headerlink" title="三、运行时优化"></a>三、运行时优化</h2><h3 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1. 事件处理"></a>1. 事件处理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 不推荐 --&gt;</span><br><span class="line">  &lt;div @scroll=&quot;handleScroll&quot;&gt;</span><br><span class="line">    &lt;!-- 内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 推荐：使用节流 --&gt;</span><br><span class="line">  &lt;div @scroll=&quot;throttleScroll&quot;&gt;</span><br><span class="line">    &lt;!-- 内容 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; throttle &#125; from &#x27;lodash-es&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.throttleScroll = throttle(this.handleScroll, 200)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleScroll(e) &#123;</span><br><span class="line">      // 处理滚动事件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    // 清除节流函数</span><br><span class="line">    this.throttleScroll.cancel()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-大数据渲染"><a href="#2-大数据渲染" class="headerlink" title="2. 大数据渲染"></a>2. 大数据渲染</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;list&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;chunk in chunks&quot; :key=&quot;chunk[0].id&quot;&gt;</span><br><span class="line">      &lt;div v-for=&quot;item in chunk&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      chunkSize: 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    chunks() &#123;</span><br><span class="line">      const chunks = []</span><br><span class="line">      for (let i = 0; i &lt; this.list.length; i += this.chunkSize) &#123;</span><br><span class="line">        chunks.push(this.list.slice(i, i + this.chunkSize))</span><br><span class="line">      &#125;</span><br><span class="line">      return chunks</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async loadData() &#123;</span><br><span class="line">      const data = await fetchLargeData()</span><br><span class="line">      // 使用 nextTick 分批渲染</span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        this.list = data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-内存优化"><a href="#3-内存优化" class="headerlink" title="3. 内存优化"></a>3. 内存优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">timer</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">observers</span>: &#123;</span><br><span class="line">        <span class="attr">scroll</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">intersection</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">resize</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">mutation</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">domRefs</span>: &#123;</span><br><span class="line">        <span class="attr">listContainer</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">lazyImages</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 初始化 DOM 引用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">listContainer</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">listContainer</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">lazyImages</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">lazyImages</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建交叉观察者 - 用于图片懒加载</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">intersection</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">      <span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> img = entry.<span class="property">target</span></span><br><span class="line">            img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span></span><br><span class="line">            <span class="comment">// 图片加载后取消观察</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">intersection</span>.<span class="title function_">unobserve</span>(img)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">listContainer</span>,</span><br><span class="line">        <span class="attr">rootMargin</span>: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0.1</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建滚动观察者 - 用于无限滚动</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">scroll</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">      <span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> trigger = entries[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (trigger.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">loadMoreData</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">rootMargin</span>: <span class="string">&#x27;100px&#x27;</span>,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 创建 ResizeObserver - 用于响应容器大小变化</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">resize</span> = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">throttle</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> containerSize = entries[<span class="number">0</span>].<span class="property">contentRect</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleContainerResize</span>(containerSize)</span><br><span class="line">      &#125;, <span class="number">200</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 创建 MutationObserver - 监听 DOM 变化</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">mutation</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">debounce</span>(<span class="function">(<span class="params">mutations</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleDomChanges</span>(mutations)</span><br><span class="line">      &#125;, <span class="number">200</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动观察</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">startObserving</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 开始所有观察</span></span><br><span class="line">    <span class="title function_">startObserving</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 1. 观察懒加载图片</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">lazyImages</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">intersection</span>.<span class="title function_">observe</span>(img)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 观察滚动触发器</span></span><br><span class="line">      <span class="keyword">const</span> trigger = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">scrollTrigger</span></span><br><span class="line">      <span class="keyword">if</span> (trigger) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">scroll</span>.<span class="title function_">observe</span>(trigger)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 观察容器大小</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">listContainer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">resize</span>.<span class="title function_">observe</span>(<span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">listContainer</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. 观察 DOM 变化</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="property">mutation</span>.<span class="title function_">observe</span>(<span class="variable language_">this</span>.<span class="property">domRefs</span>.<span class="property">listContainer</span>, &#123;</span><br><span class="line">        <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">subtree</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理容器大小变化</span></span><br><span class="line">    <span class="title function_">handleContainerResize</span>(<span class="params">size</span>) &#123;</span><br><span class="line">      <span class="comment">// 根据新的容器大小调整布局</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateLayout</span>(size)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 DOM 变化</span></span><br><span class="line">    <span class="title function_">handleDomChanges</span>(<span class="params">mutations</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理 DOM 变化，例如更新虚拟滚动的计算</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateVirtualScroll</span>()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载更多数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadMoreData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(...newData)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to load more data:&#x27;</span>, error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节流函数</span></span><br><span class="line">    <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防抖函数</span></span><br><span class="line">    <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清除定时器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 断开所有观察者</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">observers</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (observer) &#123;</span><br><span class="line">        observer.<span class="title function_">disconnect</span>()</span><br><span class="line">        observer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、实践建议"><a href="#四、实践建议" class="headerlink" title="四、实践建议"></a>四、实践建议</h2><h3 id="1-开发阶段"><a href="#1-开发阶段" class="headerlink" title="1. 开发阶段"></a>1. 开发阶段</h3><ul>
<li>使用开发者工具的 Performance 面板分析性能</li>
<li>使用 Vue DevTools 检查组件渲染情况</li>
<li>编写高质量的代码，遵循最佳实践</li>
</ul>
<h3 id="2-构建阶段"><a href="#2-构建阶段" class="headerlink" title="2. 构建阶段"></a>2. 构建阶段</h3><ul>
<li>合理配置 webpack 优化项</li>
<li>分析并优化打包体积</li>
<li>使用动态导入和按需加载</li>
</ul>
<h3 id="3-部署阶段"><a href="#3-部署阶段" class="headerlink" title="3. 部署阶段"></a>3. 部署阶段</h3><ul>
<li>使用 CDN 加速资源加载</li>
<li>开启 Gzip 压缩</li>
<li>配置合理的缓存策略</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://vuejs.org/guide/best-practices/performance.html">Vue.js 性能优化指南</a></li>
<li><a href="https://cli.vuejs.org/config/">Vue CLI 配置指南</a></li>
<li><a href="https://webpack.js.org/guides/production/">webpack 优化指南</a></li>
<li><a href="https://web.dev/fast/">浏览器性能优化</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>性能优化</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex的实现原理解析</title>
    <url>/Vue/vue-vuex-principle/</url>
    <content><![CDATA[<h1 id="Vuex的实现原理解析"><a href="#Vuex的实现原理解析" class="headerlink" title="Vuex的实现原理解析"></a>Vuex的实现原理解析</h1><h2 id="1-Vuex-是什么？"><a href="#1-Vuex-是什么？" class="headerlink" title="1. Vuex 是什么？"></a>1. Vuex 是什么？</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<h2 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. 核心概念</h2><p>Vuex 的核心由以下几个部分组成：</p>
<ul>
<li>State：状态数据</li>
<li>Getter：计算属性</li>
<li>Mutation：同步修改状态</li>
<li>Action：异步操作</li>
<li>Module：模块化管理</li>
</ul>
<h2 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h2><h3 id="3-1-插件安装机制"><a href="#3-1-插件安装机制" class="headerlink" title="3.1 插件安装机制"></a>3.1 插件安装机制</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Vue</span> <span class="comment">// 用于存储Vue构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// 防止重复安装</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Vue</span> &amp;&amp; _Vue === <span class="title class_">Vue</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Vue</span> = _Vue</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 全局混入，将 store 注入到所有组件</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span></span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">store</span>) &#123;</span><br><span class="line">        <span class="comment">// 根组件</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span> = options.<span class="property">store</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">parent</span> &amp;&amp; options.<span class="property">parent</span>.<span class="property">$store</span>) &#123;</span><br><span class="line">        <span class="comment">// 子组件从父组件继承</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span> = options.<span class="property">parent</span>.<span class="property">$store</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Store-类的实现"><a href="#3-2-Store-类的实现" class="headerlink" title="3.2 Store 类的实现"></a>3.2 Store 类的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化 state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_state</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">state</span>: options.<span class="property">state</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 getters</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(options.<span class="property">getters</span> || &#123;&#125;).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fn = options.<span class="property">getters</span>[key]</span><br><span class="line">      <span class="comment">// 转换为 computed 属性</span></span><br><span class="line">      computed[key] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>(store.<span class="property">state</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 为 getters 定义只读属性</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(store.<span class="property">getters</span>, key, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> store.<span class="property">_vm</span>[key]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建响应式的 computed</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_vm</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      computed</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 mutations</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_mutations</span> = options.<span class="property">mutations</span> || &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化 actions</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_actions</span> = options.<span class="property">actions</span> || &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定 commit 和 dispatch 的 this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; commit, dispatch &#125; = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">commit</span> = <span class="keyword">function</span> <span class="title function_">boundCommit</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> commit.<span class="title function_">call</span>(store, type, payload)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dispatch</span> = <span class="keyword">function</span> <span class="title function_">boundDispatch</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> dispatch.<span class="title function_">call</span>(store, type, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取 state</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">state</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_state</span>.<span class="property">state</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 提交 mutation</span></span><br><span class="line">  <span class="title function_">commit</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mutation = <span class="variable language_">this</span>.<span class="property">_mutations</span>[type]</span><br><span class="line">    <span class="keyword">if</span> (!mutation) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    mutation.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">state</span>, payload)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分发 action</span></span><br><span class="line">  <span class="title function_">dispatch</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="variable language_">this</span>.<span class="property">_actions</span>[type]</span><br><span class="line">    <span class="keyword">if</span> (!action) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[vuex] unknown action type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> action.<span class="title function_">call</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="attr">state</span>: <span class="variable language_">this</span>.<span class="property">state</span>,</span><br><span class="line">      <span class="attr">commit</span>: <span class="variable language_">this</span>.<span class="property">commit</span>,</span><br><span class="line">      <span class="attr">dispatch</span>: <span class="variable language_">this</span>.<span class="property">dispatch</span></span><br><span class="line">    &#125;, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-响应式原理"><a href="#3-3-响应式原理" class="headerlink" title="3.3 响应式原理"></a>3.3 响应式原理</h3><p>Vuex 的响应式是基于 Vue 的响应式系统实现的：</p>
<ol>
<li><p>State 的响应式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_state</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">state</span>: options.<span class="property">state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Getter 的响应式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_vm</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 将 getter 转换为 computed 属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-模块化实现"><a href="#4-模块化实现" class="headerlink" title="4. 模块化实现"></a>4. 模块化实现</h2><h3 id="4-1-Module-收集"><a href="#4-1-Module-收集" class="headerlink" title="4.1 Module 收集"></a>4.1 Module 收集</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModuleCollection</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">rawRootModule</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">register</span>([], rawRootModule)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">register</span>(<span class="params">path, rawModule</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newModule = &#123;</span><br><span class="line">      <span class="attr">_raw</span>: rawModule,</span><br><span class="line">      <span class="attr">_children</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">state</span>: rawModule.<span class="property">state</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = newModule</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = <span class="variable language_">this</span>.<span class="title function_">get</span>(path.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">      parent.<span class="property">_children</span>[path[path.<span class="property">length</span> - <span class="number">1</span>]] = newModule</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rawModule.<span class="property">modules</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(rawModule.<span class="property">modules</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">register</span>(</span><br><span class="line">          path.<span class="title function_">concat</span>(key),</span><br><span class="line">          rawModule.<span class="property">modules</span>[key]</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-命名空间处理"><a href="#4-2-命名空间处理" class="headerlink" title="4.2 命名空间处理"></a>4.2 命名空间处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">installModule</span>(<span class="params">store, rootState, path, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> namespace = store.<span class="property">_modules</span>.<span class="title function_">getNamespace</span>(path)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册 state</span></span><br><span class="line">  <span class="keyword">if</span> (path.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> parentState = <span class="title function_">getNestedState</span>(rootState, path.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">set</span>(parentState, path[path.<span class="property">length</span> - <span class="number">1</span>], <span class="variable language_">module</span>.<span class="property">state</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册 mutations</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">mutations</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">mutations</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    <span class="title function_">registerMutation</span>(store, namespacedType, <span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">mutations</span>[key], path)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册 actions</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">actions</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">actions</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    <span class="title function_">registerAction</span>(store, namespacedType, <span class="variable language_">module</span>.<span class="property">_raw</span>.<span class="property">actions</span>[key], path)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-工作流程"><a href="#5-工作流程" class="headerlink" title="5. 工作流程"></a>5. 工作流程</h2><ol>
<li><p>初始化流程：</p>
<ul>
<li>安装 Vuex 插件</li>
<li>创建 Store 实例</li>
<li>初始化模块</li>
<li>设置响应式状态</li>
</ul>
</li>
<li><p>更新流程：</p>
<ul>
<li>组件通过 dispatch 触发 action</li>
<li>action 执行异步操作</li>
<li>通过 commit 触发 mutation</li>
<li>mutation 修改 state</li>
<li>响应式系统通知组件更新</li>
</ul>
</li>
</ol>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Vuex 的核心实现原理包括：</p>
<ol>
<li>利用 Vue 的插件机制和混入功能</li>
<li>基于 Vue 的响应式系统</li>
<li>模块化的状态管理</li>
<li>单向数据流的实现</li>
</ol>
<p>理解 Vuex 的实现原理有助于我们更好地使用它，并在遇到问题时能够快速定位和解决。 </p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>原理解析</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>有使用过vue吗？说说你对vue的理解</title>
    <url>/Vue/vue-vue/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/02ac1620-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、从历史说起"><a href="#一、从历史说起" class="headerlink" title="一、从历史说起"></a>一、从历史说起</h2><p>Web是World Wide Web的简称，中文译为万维网我们可以将它规划成如下的几个时代来进行理解</p>
<ul>
<li>石器时代</li>
<li>文明时代</li>
<li>工业革命时代</li>
<li>百花齐放时代</li>
</ul>
<h3 id="石器时代"><a href="#石器时代" class="headerlink" title="石器时代"></a>石器时代</h3><p>石器时代指的就是我们的静态网页，可以欣赏一下1997的Apple官网</p>
<p> <img src="https://static.vue-js.com/1734e450-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<p>最早的网页是没有数据库的，可以理解成就是一张可以在网络上浏览的报纸，直到CGI技术的出现通过 CGI Perl 运行一小段代码与数据库或文件系统进行交互，如当时的Google（1998年）</p>
<p> <img src="https://static.vue-js.com/23189000-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="文明时代"><a href="#文明时代" class="headerlink" title="文明时代"></a>文明时代</h3><p>ASP，JSP大家应该都不会太陌生，最早出现于 2005 年左右，先后出现了微软的 ASP 和 Java Server Pages [JSP] 等技术,取代了 CGI ，增强了 WEB 与服务端的交互的安全性，类似于下面这样，其实就是Java + HTML</p>
<p>&#96;&lt;%@ page language&#x3D;”java” contentType&#x3D;”text&#x2F;html; charset&#x3D;utf-8”<br>    pageEncoding&#x3D;”utf-8”%&gt;<br><!DOCTYPE html>  </p>
<html>  
<head>  
  <meta charset="utf-8">  
  <title>JSP demo</title>  
</meta charset="utf-8"></head>  
<body>  
  <img src="http: localhost:8080 web05_session 1.jpg" width="200 height=100 /">  
</img src="http:></body>  
</html>  
`

<p>JSP有一个很大的缺点，就是不太灵活，因为JSP是在服务器端执行的，通常返回该客户端的就是一个HTML文本。我们每次的请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的 DOM，这也就使得我们开发网站的灵活度大打折扣在这种情况下，同年：Ajax火了(小细节，这里为什么说火了，因为 Ajax 技术并不是 2005 年出现的，他的雏形是 1999 年)，现在看来很常见的技术手段，在当时可是珍贵无比</p>
<h3 id="工业革命时代"><a href="#工业革命时代" class="headerlink" title="工业革命时代"></a>工业革命时代</h3><p>到这里大家就更熟悉了，移动设备的普及，Jquery的出现，以及SPA（Single Page Application 单页面应用）的雏形，Backbone EmberJS AngularJS 这样一批前端框架随之出现，但当时SPA的路不好走，例如SEO问题，SPA 过多的页面、复杂场景下 View 的绑定等，都没有很好的处理经过这几年的飞速发展，节约了开发人员大量的精力、降低了开发者和开发过程的门槛，极大提升了开发效率和迭代速度，我们可以称之其为工业时代</p>
<h3 id="百花齐放时代"><a href="#百花齐放时代" class="headerlink" title="百花齐放时代"></a>百花齐放时代</h3><p>这里没有文字，放一张图感受一下</p>
<p> <img src="https://static.vue-js.com/32a6f430-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<p>PS：这里为什么要说这么多Web的历史，我们可以看到Web技术的变化之大与快，每一种新的技术出现都是一些特定场景的解决方案，那我们今天的主角Vue又是为了解决什么呢？我们接着往下看</p>
<h2 id="二、vue是什么"><a href="#二、vue是什么" class="headerlink" title="二、vue是什么"></a>二、vue是什么</h2><p>Vue.js（&#x2F;vjuː&#x2F;，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。2016年一项针对JavaScript的调查表明，Vue有着89%的开发者满意度。在GitHub上，该项目平均每天能收获95颗星，为Github有史以来星标数第3多的项目同时也是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互PS: Vue作者尤雨溪是在为AngularJS工作之后开发出了这一框架。他声称自己的思路是提取Angular中为自己所喜欢的部分，构建出一款相当轻量的框架最早发布于2014年2月</p>
<h2 id="三、Vue核心特性"><a href="#三、Vue核心特性" class="headerlink" title="三、Vue核心特性"></a>三、Vue核心特性</h2><h3 id="数据驱动（MVVM"><a href="#数据驱动（MVVM" class="headerlink" title="数据驱动（MVVM)"></a>数据驱动（MVVM)</h3><p><code>MVVM</code>表示的是 <code>Model-View-ViewModel</code></p>
<ul>
<li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li>
<li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li>
<li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li>
</ul>
<p>这时候需要一张直观的关系图，如下<br> <img src="https://static.vue-js.com/4402c560-3ac6-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>1.什么是组件化一句话来说就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件2.组件化的优势</p>
<ul>
<li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li>
<li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</li>
<li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li>
</ul>
<h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p>
<ul>
<li><p>常用的指令</p>
<ul>
<li>条件渲染指令 <code>v-if</code></li>
<li>列表渲染指令<code>v-for</code></li>
<li>属性绑定指令<code>v-bind</code></li>
<li>事件绑定指令<code>v-on</code></li>
<li>双向数据绑定指令<code>v-model</code></li>
</ul>
</li>
</ul>
<p>没有指令之前我们是怎么做的？是不是先要获取到DOM然后在….干点啥</p>
<h2 id="四、Vue跟传统开发的区别"><a href="#四、Vue跟传统开发的区别" class="headerlink" title="四、Vue跟传统开发的区别"></a>四、Vue跟传统开发的区别</h2><p>没有落地使用场景的革命不是好革命，就以一个高频的应用场景来示意吧注册账号这个需求大家应该很熟悉了，如下</p>
<p> <img src="https://static.vue-js.com/5ae84840-3ac6-11eb-ab90-d9ae814b240d.png"></p>
<p>用<code>jquery</code>来实现大概的思路就是选择流程dom对象，点击按钮隐藏当前活动流程dom对象，显示下一流程dom对象如下图(代码就不上了，上了就篇文章就没了..)</p>
<p> <img src="https://static.vue-js.com/65f89e60-3ac6-11eb-85f6-6fac77c0c9b3.png"></p>
<p>用<code>vue</code>来实现，我们知道<code>vue</code>基本不操作<code>dom</code>节点， 双向绑定使<code>dom</code>节点跟视图绑定后，通过修改变量的值控制<code>dom</code>节点的各类属性。所以其实现思路为：视图层使用一变量控制dom节点显示与否，点击按钮则改变该变量，如下图</p>
<p> <img src="https://static.vue-js.com/6f916fb0-3ac6-11eb-ab90-d9ae814b240d.png"></p>
<p>总结就是：</p>
<ul>
<li>Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM</li>
<li>Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM</li>
</ul>
<h2 id="五、Vue和React对比"><a href="#五、Vue和React对比" class="headerlink" title="五、Vue和React对比"></a>五、Vue和React对比</h2><p>这里就做几个简单的类比吧，当然没有好坏之分，只是使用场景不同</p>
<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul>
<li>都有组件化思想</li>
<li>都支持服务器端渲染</li>
<li>都有Virtual DOM（虚拟dom）</li>
<li>数据驱动视图</li>
<li>都有支持native的方案：<code>Vue</code>的<code>weex</code>、<code>React</code>的<code>React native</code></li>
<li>都有自己的构建工具：<code>Vue</code>的<code>vue-cli</code>、<code>React</code>的<code>Create React App</code></li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>数据流向的不同。<code>react</code>从诞生开始就推崇单向数据流，而<code>Vue</code>是双向数据流</li>
<li>数据变化的实现原理不同。<code>react</code>使用的是不可变数据，而<code>Vue</code>使用的是可变的数据</li>
<li>组件化通信的不同。<code>react</code>中我们通过使用回调函数来进行通信的，而<code>Vue</code>中子组件向父组件传递消息有两种方式：事件和回调函数</li>
<li>diff算法不同。<code>react</code>主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。<code>Vue</code> 使用双向指针，边对比，边更新DOM</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000016269636">https://segmentfault.com/a/1190000016269636</a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/Vue.js">https://zh.wikipedia.org/zh-cn/Vue.js</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20197803">https://zhuanlan.zhihu.com/p/20197803</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/38296857">https://zhuanlan.zhihu.com/p/38296857</a></li>
</ul>
<p> <img src="https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>性能优化</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>2.15 前端面试复盘（一）</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/engine-pre/</url>
    <content><![CDATA[<h1 id="前端面试技术要点总结"><a href="#前端面试技术要点总结" class="headerlink" title="前端面试技术要点总结"></a>前端面试技术要点总结</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>您好，我是XX，26岁，本科学历，是一名拥有3年工作经验的前端开发工程师。我熟练掌握 Vue 全家桶，有 Vue2、Vue3 的实际项目开发经验。同时也具备 React 及其生态系统的开发经验，包括 Hooks、Redux&#x2F;Mobx 等状态管理方案。在工作经历中，我参与过企业中台系统、官网、数据可视化大屏等多个重要项目的开发。熟悉 Element UI、Ant Design 等主流组件库，对前端工程化有较深理解，能够熟练使用 Webpack、Vite 等构建工具进行项目优化。在可视化领域，我有丰富的 ECharts 使用经验。此外，我也参与过小程序和 APP 的开发工作。我注重代码质量和开发效率，有较强的业务理解能力和团队协作精神。目前正在寻找前端开发相关的工作机会，期望薪资范围在14-16k。</p>
<h2 id="离职原因"><a href="#离职原因" class="headerlink" title="离职原因"></a>离职原因</h2><p>“我上一家公司是集团的子公司，虽然有转正编的机会，但主要使用的是公司内部封闭的技术框架，这限制了我在主流技术方面的成长。考虑到个人的职业发展，我希望能到一个技术氛围更好的平台，接触更多业界主流的技术栈和项目，同时也期望能获得更好的发展机会。”</p>
<h2 id="项目难点与解决方案"><a href="#项目难点与解决方案" class="headerlink" title="项目难点与解决方案"></a>项目难点与解决方案</h2><h3 id="1-实时数据展示与性能优化"><a href="#1-实时数据展示与性能优化" class="headerlink" title="1. 实时数据展示与性能优化"></a>1. 实时数据展示与性能优化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 使用 WebSocket 实现电力数据实时推送，保证数据实时性</span><br><span class="line">- 对接 MQTT 协议，处理大量设备的实时数据上报</span><br><span class="line">- 实现断线重连机制，保证数据连续性</span><br><span class="line">- 优化数据更新策略，避免频繁 DOM 更新导致的性能问题</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于 WebSocket 的详细实现，包括心跳检测、断线重连和黏包问题的解决方案，请参考 <a href="../engine-websocket">WebSocket 技术要点总结</a></p>
</blockquote>
<h3 id="2-复杂图表的性能优化"><a href="#2-复杂图表的性能优化" class="headerlink" title="2. 复杂图表的性能优化"></a>2. 复杂图表的性能优化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 使用 WebWorker 处理分时图、K线图的大量数据计算</span><br><span class="line">- 将复杂的数据运算迁移到 Worker 线程，避免主线程阻塞</span><br><span class="line">- 实现图表数据的增量更新，优化渲染性能</span><br><span class="line">- 处理历史数据与实时数据的无缝衔接</span><br></pre></td></tr></table></figure>

<h3 id="3-数据处理与展示"><a href="#3-数据处理与展示" class="headerlink" title="3. 数据处理与展示"></a>3. 数据处理与展示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 使用 HQChart 实现各类专业图表（分时图、K线图）</span><br><span class="line">- 处理大量历史数据的加载和缓存策略</span><br><span class="line">- 实现图表的缩放、拖拽等交互功能</span><br><span class="line">- 优化图表更新频率，平衡实时性和性能</span><br></pre></td></tr></table></figure>
<h2 id="说说你封装的组件"><a href="#说说你封装的组件" class="headerlink" title="说说你封装的组件"></a>说说你封装的组件</h2><h3 id="1-高性能虚拟表格组件"><a href="#1-高性能虚拟表格组件" class="headerlink" title="1.  - 高性能虚拟表格组件"></a>1.  - 高性能虚拟表格组件</h3><p>在一个数据密集型的企业中台项目中，我封装了一个具有高性能、高复用性的虚拟表格组件 <code>VirtualTable</code>。这个组件解决了大数据量表格渲染的性能问题，支持多种复杂场景。</p>
<h4 id="核心功能特性"><a href="#核心功能特性" class="headerlink" title="核心功能特性"></a>核心功能特性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 虚拟滚动：只渲染可视区域的数据，支持10万+数据量的流畅渲染</span><br><span class="line">- 动态列配置：支持列的显示/隐藏、拖拽排序、列宽调整</span><br><span class="line">- 多级表头：支持复杂的多级表头配置</span><br><span class="line">- 自定义列：支持通过插槽自定义列的渲染内容</span><br><span class="line">- 固定列：支持左右列固定，处理阴影、同步滚动</span><br><span class="line">- 行/列合并：支持单元格合并，自动计算合并范围</span><br><span class="line">- 排序/筛选：支持本地和远程排序筛选，多列组合排序</span><br><span class="line">- 行选择：支持单选、多选、全选、反选</span><br><span class="line">- 展开行：支持行展开/收起，异步加载子数据</span><br><span class="line">- 树形数据：支持树形结构展示，懒加载子节点</span><br></pre></td></tr></table></figure>

<h4 id="关键技术实现"><a href="#关键技术实现" class="headerlink" title="关键技术实现"></a>关键技术实现</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;VirtualTable&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 表格数据</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 列配置</span></span><br><span class="line">    <span class="attr">columns</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 可视区域高度</span></span><br><span class="line">    <span class="attr">height</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">400</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 行高</span></span><br><span class="line">    <span class="attr">rowHeight</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">40</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 固定列配置</span></span><br><span class="line">    <span class="attr">fixedColumns</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">left</span>: [], <span class="attr">right</span>: [] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否开启多选</span></span><br><span class="line">    <span class="attr">selectable</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否显示展开行</span></span><br><span class="line">    <span class="attr">expandable</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 可视区域起始索引</span></span><br><span class="line">      <span class="attr">startIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 可视区域结束索引</span></span><br><span class="line">      <span class="attr">endIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 缓冲区大小（上下各预留的行数）</span></span><br><span class="line">      <span class="attr">buffer</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="comment">// 选中行的 key 集合</span></span><br><span class="line">      <span class="attr">selectedKeys</span>: <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">      <span class="comment">// 展开行的 key 集合</span></span><br><span class="line">      <span class="attr">expandedKeys</span>: <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">      <span class="comment">// 列宽调整状态</span></span><br><span class="line">      <span class="attr">resizing</span>: &#123;</span><br><span class="line">        <span class="attr">column</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">startX</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 列拖拽状态</span></span><br><span class="line">      <span class="attr">dragging</span>: &#123;</span><br><span class="line">        <span class="attr">column</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">targetIndex</span>: -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算可视区域应该渲染的数据</span></span><br><span class="line">    <span class="title function_">visibleData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> start = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">startIndex</span> - <span class="variable language_">this</span>.<span class="property">buffer</span>)</span><br><span class="line">      <span class="keyword">const</span> end = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>, <span class="variable language_">this</span>.<span class="property">endIndex</span> + <span class="variable language_">this</span>.<span class="property">buffer</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">slice</span>(start, end).<span class="title function_">map</span>(<span class="function">(<span class="params">row, index</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...row,</span><br><span class="line">        <span class="attr">_index</span>: start + index <span class="comment">// 保存真实索引</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算表格内容总高度</span></span><br><span class="line">    <span class="title function_">totalHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">rowHeight</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算固定列样式</span></span><br><span class="line">    <span class="title function_">fixedColumnStyles</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; left, right &#125; = <span class="variable language_">this</span>.<span class="property">fixedColumns</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">left</span>: left.<span class="title function_">reduce</span>(<span class="function">(<span class="params">styles, col, index</span>) =&gt;</span> &#123;</span><br><span class="line">          styles[col.<span class="property">key</span>] = &#123; <span class="attr">left</span>: <span class="string">`<span class="subst">$&#123;index * <span class="variable language_">this</span>.columnWidth&#125;</span>px`</span> &#125;</span><br><span class="line">          <span class="keyword">return</span> styles</span><br><span class="line">        &#125;, &#123;&#125;),</span><br><span class="line">        <span class="attr">right</span>: right.<span class="title function_">reduce</span>(<span class="function">(<span class="params">styles, col, index</span>) =&gt;</span> &#123;</span><br><span class="line">          styles[col.<span class="property">key</span>] = &#123; <span class="attr">right</span>: <span class="string">`<span class="subst">$&#123;index * <span class="variable language_">this</span>.columnWidth&#125;</span>px`</span> &#125;</span><br><span class="line">          <span class="keyword">return</span> styles</span><br><span class="line">        &#125;, &#123;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 处理滚动事件（使用 RAF 优化）</span></span><br><span class="line">    <span class="title function_">handleScroll</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollRAF</span>) <span class="title function_">cancelAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">scrollRAF</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollRAF</span> = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; scrollTop, scrollLeft &#125; = e.<span class="property">target</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算当前的起始索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / <span class="variable language_">this</span>.<span class="property">rowHeight</span>)</span><br><span class="line">        <span class="comment">// 计算当前的结束索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">endIndex</span> = <span class="variable language_">this</span>.<span class="property">startIndex</span> + <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">height</span> / <span class="variable language_">this</span>.<span class="property">rowHeight</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 同步固定列的滚动位置</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">syncFixedScroll</span>(scrollLeft)</span><br><span class="line">        <span class="comment">// 更新内容区域的位移</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updatePosition</span>(scrollTop)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新内容区域的位移（使用 transform 优化性能）</span></span><br><span class="line">    <span class="title function_">updatePosition</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> transform = <span class="string">`translate3d(0, <span class="subst">$&#123;scrollTop&#125;</span>px, 0)`</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新固定列位置</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hasFixedColumns</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">leftFixed</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">rightFixed</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理列宽调整</span></span><br><span class="line">    <span class="title function_">handleColumnResize</span>(<span class="params">column, event</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resizing</span> = &#123;</span><br><span class="line">        column,</span><br><span class="line">        <span class="attr">startX</span>: event.<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">startWidth</span>: column.<span class="property">width</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onColumnResizing</span>)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onColumnResizeEnd</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列宽调整过程</span></span><br><span class="line">    <span class="title function_">onColumnResizing</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">resizing</span>.<span class="property">column</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> &#123; column, startX, startWidth &#125; = <span class="variable language_">this</span>.<span class="property">resizing</span></span><br><span class="line">      <span class="keyword">const</span> diff = event.<span class="property">clientX</span> - startX</span><br><span class="line">      <span class="keyword">const</span> newWidth = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">100</span>, startWidth + diff)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新列宽</span></span><br><span class="line">      column.<span class="property">width</span> = newWidth</span><br><span class="line">      <span class="comment">// 触发列宽变化事件</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;column-resize&#x27;</span>, column)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理行选择</span></span><br><span class="line">    <span class="title function_">handleRowSelect</span>(<span class="params">row, selected</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = row[<span class="variable language_">this</span>.<span class="property">rowKey</span>]</span><br><span class="line">      <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedKeys</span>.<span class="title function_">add</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedKeys</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;selection-change&#x27;</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">selectedKeys</span>))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理展开行</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleRowExpand</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = row[<span class="variable language_">this</span>.<span class="property">rowKey</span>]</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 支持异步加载子数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loadChildrenData</span> &amp;&amp; !row.<span class="property">children</span>) &#123;</span><br><span class="line">          row.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            row.<span class="property">children</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadChildrenData</span>(row)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            row.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">add</span>(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理排序</span></span><br><span class="line">    <span class="title function_">handleSort</span>(<span class="params">column</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!column.<span class="property">sortable</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 支持多列排序</span></span><br><span class="line">      <span class="keyword">const</span> sortState = <span class="variable language_">this</span>.<span class="property">sortStates</span>[column.<span class="property">key</span>] || &#123; <span class="attr">order</span>: <span class="string">&#x27;none&#x27;</span> &#125;</span><br><span class="line">      <span class="keyword">const</span> nextOrder = <span class="variable language_">this</span>.<span class="title function_">getNextSortOrder</span>(sortState.<span class="property">order</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">sortStates</span>, column.<span class="property">key</span>, &#123; <span class="attr">order</span>: nextOrder &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">remote</span>) &#123;</span><br><span class="line">        <span class="comment">// 远程排序</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;sort-change&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sortStates</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 本地排序</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">localSort</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地排序实现</span></span><br><span class="line">    <span class="title function_">localSort</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sortColumns = <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable language_">this</span>.<span class="property">sortStates</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function">(<span class="params">[, state]</span>) =&gt;</span> state.<span class="property">order</span> !== <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (sortColumns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">displayData</span> = [...<span class="variable language_">this</span>.<span class="property">data</span>]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">displayData</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [key, state] <span class="keyword">of</span> sortColumns) &#123;</span><br><span class="line">          <span class="keyword">const</span> column = <span class="variable language_">this</span>.<span class="property">columnMap</span>[key]</span><br><span class="line">          <span class="keyword">const</span> compareResult = <span class="variable language_">this</span>.<span class="title function_">compare</span>(a[key], b[key], column.<span class="property">sortMethod</span>)</span><br><span class="line">          <span class="keyword">if</span> (compareResult !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">order</span> === <span class="string">&#x27;asc&#x27;</span> ? compareResult : -compareResult</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用函数式组件优化行渲染</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">TableRow</span>: &#123;</span><br><span class="line">      <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">props</span>: [<span class="string">&#x27;row&#x27;</span>, <span class="string">&#x27;columns&#x27;</span>, <span class="string">&#x27;rowIndex&#x27;</span>],</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h, &#123; props, scopedSlots &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; row, columns, rowIndex &#125; = props</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;tr&#x27;</span>, &#123; <span class="attr">key</span>: row[rowKey] &#125;,</span><br><span class="line">          columns.<span class="title function_">map</span>(<span class="function"><span class="params">column</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理自定义列模板</span></span><br><span class="line">            <span class="keyword">if</span> (scopedSlots[column.<span class="property">key</span>]) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, &#123;&#125;, [</span><br><span class="line">                scopedSlots[column.<span class="property">key</span>](&#123; row, column, <span class="attr">index</span>: rowIndex &#125;)</span><br><span class="line">              ])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认渲染</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, &#123;&#125;, [row[column.<span class="property">key</span>]])</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能优化措施"><a href="#性能优化措施" class="headerlink" title="性能优化措施"></a>性能优化措施</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 虚拟滚动核心算法优化：</span><br><span class="line">   - 使用 transform 代替 top 定位，避免重排</span><br><span class="line">   - 实现缓冲区机制，提升滚动体验</span><br><span class="line">   - 使用 RAF 优化滚动事件处理</span><br><span class="line">   - 固定列同步滚动优化</span><br><span class="line">   - 滚动过程中延迟非必要更新</span><br><span class="line"></span><br><span class="line">2. 渲染性能优化：</span><br><span class="line">   - 使用 Vue 的函数式组件渲染表格行</span><br><span class="line">   - 关键数据使用 Object.freeze 冻结</span><br><span class="line">   - 合理使用 v-show 和 v-if</span><br><span class="line">   - 列宽调整使用 transform 实现</span><br><span class="line">   - 优化重绘区域，避免整表重绘</span><br><span class="line">   </span><br><span class="line">3. 内存优化：</span><br><span class="line">   - 实现数据分片加载</span><br><span class="line">   - 及时清理不可见区域的 DOM</span><br><span class="line">   - 使用事件委托优化事件处理</span><br><span class="line">   - 优化大数据量排序算法</span><br><span class="line">   - 按需加载展开行数据</span><br><span class="line"></span><br><span class="line">4. 用户体验优化：</span><br><span class="line">   - 添加列宽调整时的视觉反馈</span><br><span class="line">   - 优化固定列的阴影效果</span><br><span class="line">   - 实现平滑的滚动效果</span><br><span class="line">   - 添加加载状态和空数据提示</span><br><span class="line">   - 支持键盘快捷操作</span><br></pre></td></tr></table></figure>

<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;virtual-table</span><br><span class="line">    :data=&quot;tableData&quot;</span><br><span class="line">    :columns=&quot;columns&quot;</span><br><span class="line">    :height=&quot;500&quot;</span><br><span class="line">    :row-height=&quot;40&quot;</span><br><span class="line">    :fixed-columns=&quot;&#123; left: [&#x27;selection&#x27;], right: [&#x27;operation&#x27;] &#125;&quot;</span><br><span class="line">    :selectable=&quot;true&quot;</span><br><span class="line">    :expandable=&quot;true&quot;</span><br><span class="line">    @sort-change=&quot;handleSortChange&quot;</span><br><span class="line">    @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">    @row-expand=&quot;handleRowExpand&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 自定义展开行内容 --&gt;</span><br><span class="line">    &lt;template #expand=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;expand-content&quot;&gt;</span><br><span class="line">        &#123;&#123; row.description &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 自定义操作列 --&gt;</span><br><span class="line">    &lt;template #operation=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleEdit(row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleDelete(row)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/virtual-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">      columns: [</span><br><span class="line">        &#123; type: &#x27;selection&#x27;, width: 60, fixed: &#x27;left&#x27; &#125;,</span><br><span class="line">        &#123; key: &#x27;name&#x27;, title: &#x27;名称&#x27;, sortable: true &#125;,</span><br><span class="line">        &#123; key: &#x27;age&#x27;, title: &#x27;年龄&#x27;, sortable: true &#125;,</span><br><span class="line">        &#123; key: &#x27;address&#x27;, title: &#x27;地址&#x27;, width: 300 &#125;,</span><br><span class="line">        &#123; key: &#x27;operation&#x27;, title: &#x27;操作&#x27;, width: 150, fixed: &#x27;right&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async loadData() &#123;</span><br><span class="line">      // 模拟加载 10 万条数据</span><br><span class="line">      this.tableData = Array.from(&#123; length: 100000 &#125;, (_, index) =&gt; (&#123;</span><br><span class="line">        id: index,</span><br><span class="line">        name: `用户 $&#123;index&#125;`,</span><br><span class="line">        age: Math.floor(Math.random() * 100),</span><br><span class="line">        address: `地址 $&#123;index&#125;`</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这个组件在实际项目中显著提升了大数据量表格的渲染性能，将10万条数据的渲染时间从原来的3-4秒优化到了200ms以内，同时保持内存占用在合理范围内。该组件已在多个项目中复用，大大提高了开发效率。</p>
<p>主要应用场景：</p>
<ol>
<li>大数据量表格展示（10万+数据）</li>
<li>复杂的数据操作界面（多选、排序、筛选）</li>
<li>实时数据更新的监控页面</li>
<li>树形结构数据展示</li>
<li>需要高性能表格的企业级应用</li>
</ol>
<h2 id="说说你知道的HOC组件"><a href="#说说你知道的HOC组件" class="headerlink" title="说说你知道的HOC组件"></a>说说你知道的HOC组件</h2><h3 id="Vue2-中的-HOC-实现"><a href="#Vue2-中的-HOC-实现" class="headerlink" title="Vue2 中的 HOC 实现"></a>Vue2 中的 HOC 实现</h3><h4 id="1-权限控制-HOC"><a href="#1-权限控制-HOC" class="headerlink" title="1. 权限控制 HOC"></a>1. 权限控制 HOC</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withPermission.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withPermission</span>(<span class="params">WrappedComponent, permission</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithPermission&#x27;</span>,</span><br><span class="line">    <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="title class_">WrappedComponent</span>.<span class="property">props</span>,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; props, data &#125; = context</span><br><span class="line">      <span class="keyword">const</span> hasPermission = <span class="title function_">checkPermission</span>(permission)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;无权限访问&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span>, &#123;</span><br><span class="line">        ...data,</span><br><span class="line">        props</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PageWithPermission</span> = <span class="title function_">withPermission</span>(<span class="title class_">UserList</span>, <span class="string">&#x27;user:view&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-数据加载-HOC"><a href="#2-数据加载-HOC" class="headerlink" title="2. 数据加载 HOC"></a>2. 数据加载 HOC</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withLoading.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withLoading</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithLoading&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">fetchData</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Function</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">error</span> = err</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;Loading...&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">error</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">`Error: <span class="subst">$&#123;<span class="variable language_">this</span>.error.message&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span>, &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">          ...<span class="variable language_">this</span>.<span class="property">$props</span>,</span><br><span class="line">          <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserListWithLoading</span> = <span class="title function_">withLoading</span>(<span class="title class_">UserList</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue3-中的-HOC-实现"><a href="#Vue3-中的-HOC-实现" class="headerlink" title="Vue3 中的 HOC 实现"></a>Vue3 中的 HOC 实现</h3><h4 id="1-组合式-API-的权限控制-HOC"><a href="#1-组合式-API-的权限控制-HOC" class="headerlink" title="1. 组合式 API 的权限控制 HOC"></a>1. 组合式 API 的权限控制 HOC</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withPermission.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withPermission&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  <span class="attr">permission</span>: <span class="built_in">string</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithPermission&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hasPermission = <span class="title function_">checkPermission</span>(permission)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;无权限访问&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, props)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PageWithPermission</span> = <span class="title function_">withPermission</span>(<span class="title class_">UserList</span>, <span class="string">&#x27;user:view&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-响应式数据加载-HOC"><a href="#2-响应式数据加载-HOC" class="headerlink" title="2. 响应式数据加载 HOC"></a>2. 响应式数据加载 HOC</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withAsync.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withAsync&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, D = <span class="built_in">any</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  <span class="attr">fetchData</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;D&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithAsync&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">const</span> error = ref&lt;<span class="title class_">Error</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">const</span> data = ref&lt;D | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">          data.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchData</span>()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          error.<span class="property">value</span> = err <span class="keyword">as</span> <span class="title class_">Error</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loading.<span class="property">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;Loading...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">`Error: <span class="subst">$&#123;error.value.message&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, &#123; <span class="attr">data</span>: data.<span class="property">value</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserListWithAsync</span> = <span class="title function_">withAsync</span>(<span class="title class_">UserList</span>, fetchUserList)</span><br></pre></td></tr></table></figure>

<h4 id="3-性能优化-HOC"><a href="#3-性能优化-HOC" class="headerlink" title="3. 性能优化 HOC"></a>3. 性能优化 HOC</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withMemo.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withMemo&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  propsAreEqual = <span class="function">(<span class="params"><span class="attr">prevProps</span>: <span class="built_in">any</span>, <span class="attr">nextProps</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(prevProps).<span class="title function_">every</span>(<span class="function"><span class="params">key</span> =&gt;</span> prevProps[key] === nextProps[key])</span><br><span class="line">  &#125;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithMemo&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;memoProps&#x27;</span>],</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> computedProps = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">memoProps</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, computedProps.<span class="property">value</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">propsAreEqual</span>(<span class="variable language_">this</span>.<span class="property">$props</span>.<span class="property">memoProps</span>, <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">propsData</span>?.<span class="property">memoProps</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedComponent</span> = <span class="title function_">withMemo</span>(<span class="title class_">ExpensiveComponent</span>)</span><br></pre></td></tr></table></figure>

<h3 id="HOC-的优缺点"><a href="#HOC-的优缺点" class="headerlink" title="HOC 的优缺点"></a>HOC 的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 代码复用：将通用逻辑抽象到 HOC 中</span><br><span class="line">2. 关注点分离：将横切关注点从组件中抽离</span><br><span class="line">3. 无侵入性：不修改原组件的情况下扩展功能</span><br><span class="line">4. 灵活性：可以组合多个 HOC</span><br></pre></td></tr></table></figure>

<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 组件层级嵌套：多个 HOC 组合会产生多层嵌套</span><br><span class="line">2. props 命名冲突：多个 HOC 可能使用相同的 prop 名</span><br><span class="line">3. 静态方法丢失：需要手动处理静态方法的拷贝</span><br><span class="line">4. 调试困难：组件层级增加，调试变得复杂</span><br></pre></td></tr></table></figure>

<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 使用组合式 API 替代简单的 HOC</span><br><span class="line">2. 合理使用 HOC 和组合式 API</span><br><span class="line">3. 使用 displayName 提高调试体验</span><br><span class="line">4. 避免在 render 方法中使用 HOC</span><br><span class="line">5. 向下传递不相关的 props</span><br><span class="line">6. 使用 compose 函数组合多个 HOC</span><br></pre></td></tr></table></figure>

<p>这些 HOC 组件在实际项目中主要用于：</p>
<ol>
<li>权限控制</li>
<li>数据加载和错误处理</li>
<li>性能优化</li>
<li>日志记录和监控</li>
<li>组件状态管理</li>
<li>主题和样式注入</li>
</ol>
<h2 id="小程序的发布流程"><a href="#小程序的发布流程" class="headerlink" title="小程序的发布流程"></a>小程序的发布流程</h2><h3 id="1-开发环境配置"><a href="#1-开发环境配置" class="headerlink" title="1. 开发环境配置"></a>1. 开发环境配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置项目的基本信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;miniprogram&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;小程序项目&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;wx123456789&quot;</span>,</span><br><span class="line">  <span class="string">&quot;projectname&quot;</span>: <span class="string">&quot;miniprogram-demo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-开发调试"><a href="#2-开发调试" class="headerlink" title="2. 开发调试"></a>2. 开发调试</h3><ul>
<li>使用微信开发者工具进行本地开发和调试</li>
<li>真机预览功能测试</li>
<li>自动化测试和单元测试</li>
</ul>
<h3 id="3-上传发布流程"><a href="#3-上传发布流程" class="headerlink" title="3. 上传发布流程"></a>3. 上传发布流程</h3><ol>
<li><p>代码上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 在开发者工具中点击&quot;上传&quot;</span><br><span class="line">- 填写版本号和备注信息</span><br><span class="line">- 选择开发分支</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交审核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 登录小程序管理后台</span><br><span class="line">- 选择版本提交审核</span><br><span class="line">- 填写审核资料（功能介绍、测试账号等）</span><br><span class="line">- 等待审核结果（一般1-7天）</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布上线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 审核通过后可以发布</span><br><span class="line">- 选择发布时间（立即/定时）</span><br><span class="line">- 灰度发布策略设置</span><br><span class="line">- 监控上线状态</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-版本管理"><a href="#4-版本管理" class="headerlink" title="4. 版本管理"></a>4. 版本管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 线上版本：对外发布的正式版本</span><br><span class="line">- 体验版本：内部测试使用</span><br><span class="line">- 开发版本：本地开发环境</span><br></pre></td></tr></table></figure>

<h2 id="小程序的主包和分包组件调用"><a href="#小程序的主包和分包组件调用" class="headerlink" title="小程序的主包和分包组件调用"></a>小程序的主包和分包组件调用</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><h4 id="主包"><a href="#主包" class="headerlink" title="主包"></a>主包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 主包配置</span></span><br><span class="line">  <span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;WeChat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>: [<span class="string">&quot;pages/index/index&quot;</span>],</span><br><span class="line">  <span class="string">&quot;subpackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageA&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/cat/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/dog/index&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageB&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/apple/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/banana/index&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-组件调用方式"><a href="#2-组件调用方式" class="headerlink" title="2. 组件调用方式"></a>2. 组件调用方式</h3><h4 id="主包调用分包组件"><a href="#主包调用分包组件" class="headerlink" title="主包调用分包组件"></a>主包调用分包组件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分包组件定义 (packageA/components/custom/index.js)</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onTap</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主包页面使用 (pages/index/index.json)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;custom&quot;</span>: <span class="string">&quot;/packageA/components/custom/index&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主包页面模板 (pages/index/index.wxml)</span></span><br><span class="line">&lt;custom title=<span class="string">&quot;测试&quot;</span> <span class="attr">bind</span>:click=<span class="string">&quot;handleClick&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分包间组件调用"><a href="#分包间组件调用" class="headerlink" title="分包间组件调用"></a>分包间组件调用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packageA 组件定义</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// packageB 页面使用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;component-a&quot;</span>: <span class="string">&quot;/packageA/components/component/index&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-性能优化建议"><a href="#3-性能优化建议" class="headerlink" title="3. 性能优化建议"></a>3. 性能优化建议</h3><ol>
<li><p>合理分包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 按功能模块划分包体</span><br><span class="line">- 控制单个分包大小（建议&lt;2MB）</span><br><span class="line">- 避免分包间过度依赖</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件复用优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 公共组件放主包</span><br><span class="line">- 分包特有组件放分包</span><br><span class="line">- 使用组件模板提高复用性</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载策略</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预加载分包</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;preloadRule&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;network&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="string">&quot;packages&quot;</span>: [<span class="string">&quot;packageA&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分包异步化</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadSubpackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> wx.<span class="title function_">loadSubpackage</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;packageA&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;分包加载成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>资源管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 图片等静态资源按需分包</span><br><span class="line">- 使用 CDN 加速资源加载</span><br><span class="line">- 合理使用本地缓存</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>技术面试</tag>
      </tags>
  </entry>
  <entry>
    <title>你了解axios的原理吗？有看过它的源码吗？</title>
    <url>/Vue/vue-axiosCode/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/1564f7d0-4662-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、axios的使用"><a href="#一、axios的使用" class="headerlink" title="一、axios的使用"></a>一、axios的使用</h2><p>关于<code>axios</code>的基本使用，上篇文章已经有所涉及，这里再稍微回顾下：</p>
<p><strong>发送请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(config) <span class="comment">// 直接传入配置</span></span><br><span class="line"><span class="title function_">axios</span>(url[, config]) <span class="comment">// 传入url和配置</span></span><br><span class="line">axios[method](url[, option]) <span class="comment">// 直接调用请求方式方法，传入url和配置</span></span><br><span class="line">axios[method](url[, data[, option]]) <span class="comment">// 直接调用请求方式方法，传入data、url和配置</span></span><br><span class="line">axios.<span class="title function_">request</span>(option) <span class="comment">// 调用 request 方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.<span class="title function_">create</span>(config)</span><br><span class="line"><span class="comment">// axiosInstance 也具有以上 axios 的能力</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([axiosInstance1, axiosInstance2]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(response1, response2))</span><br><span class="line"><span class="comment">// 调用 all 和传入 spread 回调</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>请求拦截器</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写发送请求前处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写发送请求错误相关的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>响应拦截器</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写得到响应数据后处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写得到错误响应处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><strong>取消请求</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;xxxx&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 取消请求 (请求原因是可选的)</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;主动取消请求&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;xxxx&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">cancel</span>(<span class="string">&#x27;主动取消请求&#x27;</span>);</span><br></pre></td></tr></table></figure>





<h2 id="二、实现一个简易版axios"><a href="#二、实现一个简易版axios" class="headerlink" title="二、实现一个简易版axios"></a>二、实现一个简易版axios</h2><p>构建一个<code>Axios</code>构造函数，核心代码为<code>request</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;url = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;get&#x27;</span>, data = &#123;&#125;&#125; = config;</span><br><span class="line">            <span class="comment">// 发送ajax请求</span></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.<span class="title function_">send</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导出<code>axios</code>实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最终导出axios的方法，即实例的request方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">    <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">    <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到最后的全局变量axios</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="title class_">CreateAxiosFn</span>();</span><br></pre></td></tr></table></figure>

<p>上述就已经能够实现<code>axios(&#123; &#125;)</code>这种方式的请求</p>
<p>下面是来实现下<code>axios.method()</code>这种形式的请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义get,post...方法，挂在到Axios原型上</span></span><br><span class="line"><span class="keyword">const</span> methodsArr = [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;post&#x27;</span>];</span><br><span class="line">methodsArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">met</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[met] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行&#x27;</span>+met+<span class="string">&#x27;方法&#x27;</span>);</span><br><span class="line">        <span class="comment">// 处理单个方法</span></span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>].<span class="title function_">includes</span>(met)) &#123; <span class="comment">// 2个参数(url[, config])</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: met,</span><br><span class="line">                <span class="attr">url</span>: <span class="variable language_">arguments</span>[<span class="number">0</span>],</span><br><span class="line">                ...<span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 3个参数(url[,data[,config]])</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: met,</span><br><span class="line">                <span class="attr">url</span>: <span class="variable language_">arguments</span>[<span class="number">0</span>],</span><br><span class="line">                <span class="attr">data</span>: <span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;,</span><br><span class="line">                ...<span class="variable language_">arguments</span>[<span class="number">2</span>] || &#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>将<code>Axios.prototype</code>上的方法搬运到<code>request</code>上</p>
<p>首先实现个工具类，实现将<code>b</code>方法混入到<code>a</code>，并且修改<code>this</code>指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = &#123;</span><br><span class="line">  <span class="title function_">extend</span>(<span class="params">a,b, context</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (b.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> b[key] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          a[key] = b[key].<span class="title function_">bind</span>(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          a[key] = b[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改导出的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">  <span class="comment">// 增加代码</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, axios)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>构建拦截器的构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptorsManage</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fullfield, rejected</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      fullfield,</span><br><span class="line">      rejected</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现<code>axios.interceptors.response.use</code>和<code>axios.interceptors.request.use</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 新增代码</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">            <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorsManage</span>,</span><br><span class="line">            <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorsManage</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line"> 		...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行语句<code>axios.interceptors.response.use</code>和<code>axios.interceptors.request.use</code>的时候，实现获取<code>axios</code>实例上的<code>interceptors</code>对象，然后再获取<code>response</code>或<code>request</code>拦截器，再执行对应的拦截器的<code>use</code>方法</p>
<p>把<code>Axios</code>上的方法和属性搬到<code>request</code>过去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">  <span class="comment">// 混入方法， 处理axios的request方法，使之拥有get,post...方法</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, axios)</span><br><span class="line">  <span class="comment">// 新增代码</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, axios)</span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在<code>request</code>也有了<code>interceptors</code>对象，在发送请求的时候，会先获取<code>request</code>拦截器的<code>handlers</code>的方法来执行</p>
<p>首先将执行<code>ajax</code>的请求封装成一个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sendAjax</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sendAjax</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;url = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;get&#x27;</span>, data = &#123;&#125;&#125; = config;</span><br><span class="line">        <span class="comment">// 发送ajax请求</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(config);</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获得<code>handlers</code>中的回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 拦截器和请求组装队列</span></span><br><span class="line">    <span class="keyword">let</span> chain = [<span class="variable language_">this</span>.<span class="property">sendAjax</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">undefined</span>] <span class="comment">// 成对出现的，失败回调暂时不处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;</span><br><span class="line">        chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fullfield</span>, interceptor.<span class="property">rejected</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;</span><br><span class="line">        chain.<span class="title function_">push</span>(interceptor.<span class="property">fullfield</span>, interceptor.<span class="property">rejected</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行队列，每次执行一对，并给promise赋最新的值</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span>(chain.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>chains</code>大概是<code>[&#39;fulfilled1&#39;,&#39;reject1&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;this.sendAjax&#39;,&#39;undefined&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;fulfilled1&#39;,&#39;reject1&#39;]</code>这种形式</p>
<p>这样就能够成功实现一个简易版<code>axios</code></p>
<h2 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h2><p>首先看看目录结构</p>
<p> <img src="https://static.vue-js.com/9d90eaa0-48b6-11eb-85f6-6fac77c0c9b3.png"></p>
<p><code>axios</code>发送请求有很多实现的方法，实现入口文件为<code>axios.js </code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">defaultConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(defaultConfig);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// instance指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用 </span></span><br><span class="line">  <span class="comment">// Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用</span></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="title function_">bind</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把Axios.prototype上的方法扩展到instance对象上，</span></span><br><span class="line">  <span class="comment">// 并指定上下文为context，这样执行Axios原型链上的方法时，this会指向context</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy context to instance</span></span><br><span class="line">  <span class="comment">// 把context对象上的自身属性和方法扩展到instance上</span></span><br><span class="line">  <span class="comment">// 注：因为extend内部使用的forEach方法对对象做for in 遍历时，只遍历对象本身的属性，而不会遍历原型链上的属性</span></span><br><span class="line">  <span class="comment">// 这样，instance 就有了  defaults、interceptors 属性。</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, context);</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the default instance to be exported 创建一个由默认配置生成的axios实例</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="title function_">createInstance</span>(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory for creating new instances 扩展axios.create工厂函数，内部也是 createInstance</span></span><br><span class="line">axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(axios.<span class="property">defaults</span>, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose all/spread</span></span><br><span class="line">axios.<span class="property">all</span> = <span class="keyword">function</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios.<span class="property">spread</span> = <span class="keyword">function</span> <span class="title function_">spread</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">wrap</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = axios;</span><br></pre></td></tr></table></figure>

<p>主要核心是 <code>Axios.prototype.request</code>，各种请求方式的调用实现都是在 <code>request</code> 内部实现的， 简单看下 <code>request</code> 的逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="comment">// 判断 config 参数是否是 字符串，如果是则认为第一个参数是 URL，第二个参数是真正的config</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = <span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    <span class="comment">// 把 url 放置到 config 对象中，便于之后的 mergeConfig</span></span><br><span class="line">    config.<span class="property">url</span> = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 config 参数是否是 字符串，则整体都当做config</span></span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 合并默认配置和传入的配置</span></span><br><span class="line">  config = <span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>, config);</span><br><span class="line">  <span class="comment">// 设置请求方法</span></span><br><span class="line">  config.<span class="property">method</span> = config.<span class="property">method</span> ? config.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    something... 此部分会在后续拦截器单独讲述</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Axios 原型上挂载 &#x27;delete&#x27;, &#x27;get&#x27;, &#x27;head&#x27;, &#x27;options&#x27; 且不传参的请求方法，实现内部也是 request</span></span><br><span class="line">utils.<span class="title function_">forEach</span>([<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>], <span class="keyword">function</span> <span class="title function_">forEachMethodNoData</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[method] = <span class="keyword">function</span>(<span class="params">url, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(utils.<span class="title function_">merge</span>(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Axios 原型上挂载 &#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27; 且传参的请求方法，实现内部同样也是 request</span></span><br><span class="line">utils.<span class="title function_">forEach</span>([<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>], <span class="keyword">function</span> <span class="title function_">forEachMethodWithData</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[method] = <span class="keyword">function</span>(<span class="params">url, data, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(utils.<span class="title function_">merge</span>(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url,</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>request</code>入口参数为<code>config</code>，可以说<code>config</code>贯彻了<code>axios</code>的一生</p>
<p><code>axios</code> 中的 <code>config </code>主要分布在这几个地方：</p>
<ul>
<li>默认配置 <code>defaults.js</code></li>
<li><code>config.method</code>默认为 <code>get</code></li>
<li>调用 <code>createInstance</code> 方法创建 <code>axios </code>实例，传入的<code>config</code></li>
<li>直接或间接调用 <code>request</code> 方法，传入的 <code>config</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="comment">// 创建一个由默认配置生成的axios实例</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="title function_">createInstance</span>(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展axios.create工厂函数，内部也是 createInstance</span></span><br><span class="line">axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(axios.<span class="property">defaults</span>, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Axios.js</span></span><br><span class="line"><span class="comment">// 合并默认配置和传入的配置</span></span><br><span class="line">config = <span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>, config);</span><br><span class="line"><span class="comment">// 设置请求方法</span></span><br><span class="line">config.<span class="property">method</span> = config.<span class="property">method</span> ? config.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从源码中，可以看到优先级：默认配置对象<code>default</code> &lt; <code>method:get</code> &lt; <code>Axios</code>的实例属性<code>this.default</code> &lt; <code>request</code>参数</p>
<p>下面重点看看<code>request</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    先是 mergeConfig ... 等，不再阐述</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法</span></span><br><span class="line">    chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    <span class="comment">// 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法</span></span><br><span class="line">    chain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象</span></span><br><span class="line">  <span class="keyword">var</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环拦截器的链</span></span><br><span class="line">  <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>()); <span class="comment">// 每一次向外弹出拦截器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回 promise</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>拦截器<code>interceptors</code>是在构建<code>axios</code>实例化的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">defaults</span> = instanceConfig;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(), <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>() <span class="comment">// 响应拦截</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InterceptorManager</code>构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拦截器的初始化 其实就是一组钩子函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">InterceptorManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用拦截器实例的use时就是往钩子函数中push方法</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span> <span class="title function_">use</span>(<span class="params">fulfilled, rejected</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">fulfilled</span>: fulfilled,</span><br><span class="line">    <span class="attr">rejected</span>: rejected</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器是可以取消的，根据use的时候返回的ID，把某一个拦截器方法置为null</span></span><br><span class="line"><span class="comment">// 不能用 splice 或者 slice 的原因是 删除之后 id 就会变化，导致之后的顺序或者是操作不可控</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eject</span> = <span class="keyword">function</span> <span class="title function_">eject</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[id]) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是在 Axios的request方法中 中循环拦截器的方法 forEach 循环执行钩子函数</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span> = <span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  utils.<span class="title function_">forEach</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>, <span class="keyword">function</span> <span class="title function_">forEachHandler</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">fn</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求拦截器方法是被 <code>unshift</code>到拦截器中，响应拦截器是被<code>push</code>到拦截器中的。最终它们会拼接上一个叫<code>dispatchRequest</code>的方法被后续的 <code>promise</code> 顺序执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./../utils&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> transformData = <span class="built_in">require</span>(<span class="string">&#x27;./transformData&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isCancel = <span class="built_in">require</span>(<span class="string">&#x27;../cancel/isCancel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">&#x27;../defaults&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isAbsoluteURL = <span class="built_in">require</span>(<span class="string">&#x27;./../helpers/isAbsoluteURL&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> combineURLs = <span class="built_in">require</span>(<span class="string">&#x27;./../helpers/combineURLs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求是否已被取消，如果已经被取消，抛出已取消</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwIfCancellationRequested</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="title function_">throwIfRequested</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果包含baseUrl, 并且不是config.url绝对路径，组合baseUrl以及config.url</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">baseURL</span> &amp;&amp; !<span class="title function_">isAbsoluteURL</span>(config.<span class="property">url</span>)) &#123;</span><br><span class="line">    <span class="comment">// 组合baseURL与url形成完整的请求路径</span></span><br><span class="line">    config.<span class="property">url</span> = <span class="title function_">combineURLs</span>(config.<span class="property">baseURL</span>, config.<span class="property">url</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config.<span class="property">headers</span> = config.<span class="property">headers</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用/lib/defaults.js中的transformRequest方法，对config.headers和config.data进行格式化</span></span><br><span class="line">  <span class="comment">// 比如将headers中的Accept，Content-Type统一处理成大写</span></span><br><span class="line">  <span class="comment">// 比如如果请求正文是一个Object会格式化为JSON字符串，并添加application/json;charset=utf-8的Content-Type</span></span><br><span class="line">  <span class="comment">// 等一系列操作</span></span><br><span class="line">  config.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">    config.<span class="property">data</span>,</span><br><span class="line">    config.<span class="property">headers</span>,</span><br><span class="line">    config.<span class="property">transformRequest</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并不同配置的headers，config.headers的配置优先级更高</span></span><br><span class="line">  config.<span class="property">headers</span> = utils.<span class="title function_">merge</span>(</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">common</span> || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span>[config.<span class="property">method</span>] || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span> || &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除headers中的method属性</span></span><br><span class="line">  utils.<span class="title function_">forEach</span>(</span><br><span class="line">    [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cleanHeaderConfig</span>(<span class="params">method</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> config.<span class="property">headers</span>[method];</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果config配置了adapter，使用config中配置adapter的替代默认的请求方法</span></span><br><span class="line">  <span class="keyword">var</span> adapter = config.<span class="property">adapter</span> || defaults.<span class="property">adapter</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用adapter方法发起请求（adapter根据浏览器环境或者Node环境会有不同）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 请求正确返回的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否以及取消了请求，如果取消了请求抛出以取消</span></span><br><span class="line">      <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用/lib/defaults.js中的transformResponse方法，对服务器返回的数据进行格式化</span></span><br><span class="line">      <span class="comment">// 例如，使用JSON.parse对响应正文进行解析</span></span><br><span class="line">      response.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">        response.<span class="property">data</span>,</span><br><span class="line">        response.<span class="property">headers</span>,</span><br><span class="line">        config.<span class="property">transformResponse</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求失败的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onAdapterRejection</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_">isCancel</span>(reason)) &#123;</span><br><span class="line">        <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reason &amp;&amp; reason.<span class="property">response</span>) &#123;</span><br><span class="line">          reason.<span class="property">response</span>.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">            reason.<span class="property">response</span>.<span class="property">data</span>,</span><br><span class="line">            reason.<span class="property">response</span>.<span class="property">headers</span>,</span><br><span class="line">            config.<span class="property">transformResponse</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再来看看<code>axios</code>是如何实现取消请求的，实现文件在<code>CancelToken.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CancelToken</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;executor must be a function.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在 CancelToken 上定义一个 pending 状态的 promise ，将 resolve 回调赋值给外部变量 resolvePromise</span></span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">promiseExecutor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    resolvePromise = resolve;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> token = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 立即执行 传入的 executor函数，将真实的 cancel 方法通过参数传递出去。</span></span><br><span class="line">  <span class="comment">// 一旦调用就执行 resolvePromise 即前面的 promise 的 resolve，就更改promise的状态为 resolve。</span></span><br><span class="line">  <span class="comment">// 那么xhr中定义的 CancelToken.promise.then方法就会执行, 从而xhr内部会取消请求</span></span><br><span class="line">  <span class="title function_">executor</span>(<span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断请求是否已经取消过，避免多次执行</span></span><br><span class="line">    <span class="keyword">if</span> (token.<span class="property">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    token.<span class="property">reason</span> = <span class="keyword">new</span> <span class="title class_">Cancel</span>(message);</span><br><span class="line">    <span class="title function_">resolvePromise</span>(token.<span class="property">reason</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property">source</span> = <span class="keyword">function</span> <span class="title function_">source</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// source 方法就是返回了一个 CancelToken 实例，与直接使用 new CancelToken 是一样的操作</span></span><br><span class="line">  <span class="keyword">var</span> cancel;</span><br><span class="line">  <span class="keyword">var</span> token = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 返回创建的 CancelToken 实例以及取消方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: token,</span><br><span class="line">    <span class="attr">cancel</span>: cancel</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>实际上取消请求的操作是在 <code>xhr.js</code> 中也有响应的配合的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onCanceled</span>(<span class="params">cancel</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消请求</span></span><br><span class="line">        request.<span class="title function_">abort</span>();</span><br><span class="line">        <span class="title function_">reject</span>(cancel);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>巧妙的地方在 <code>CancelToken</code>中 <code>executor</code> 函数，通过<code>resolve</code>函数的传递与执行，控制<code>promise</code>的状态</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p> <img src="https://static.vue-js.com/b1d2ebd0-48b6-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6856706569263677447#heading-4">https://juejin.cn/post/6856706569263677447#heading-4</a></li>
<li><a href="https://juejin.cn/post/6844903907500490766">https://juejin.cn/post/6844903907500490766</a></li>
<li><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>你了解vue的diff算法吗？说说看</title>
    <url>/Vue/vue-diff/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/5e858e30-4585-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>diff</code> 算法是一种通过同层的树节点进行比较的高效算法</p>
<p>其有两个特点：</p>
<ul>
<li>比较只会在同层级进行, 不会跨层级比较</li>
<li>在diff比较的过程中，循环从两边向中间比较</li>
</ul>
<p><code>diff</code> 算法在很多场景下都有应用，在 <code>vue</code> 中，作用于虚拟 <code>dom</code> 渲染成真实 <code>dom</code> 的新旧 <code>VNode</code> 节点比较</p>
<h2 id="二、比较方式"><a href="#二、比较方式" class="headerlink" title="二、比较方式"></a>二、比较方式</h2><p><code>diff</code>整体策略为：深度优先，同层比较</p>
<ol>
<li>比较只会在同层级进行, 不会跨层级比较</li>
</ol>
<img src="https://static001.infoq.cn/resource/image/91/54/91e9c9519a11caa0c5bf70714383f054.png" alt="img" style="zoom:50%;">

<ol start="2">
<li>比较的过程中，循环从两边向中间收拢</li>
</ol>
<img src="https://static001.infoq.cn/resource/image/2d/ec/2dcd6ad5cf82c65b9cfc43a27ba1e4ec.png" alt="img" style="zoom:50%;">

<p>下面举个<code>vue</code>通过<code>diff</code>算法更新的例子：</p>
<p>新旧<code>VNode</code>节点如下图所示：</p>
<p><img src="https://static001.infoq.cn/resource/image/80/6d/80dc339f73b186479e6d1fc18bfbf66d.png"></p>
<p>第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为<code>diff</code>后的第一个真实节点，同时旧节点<code>endIndex</code>移动到C，新节点的 <code>startIndex</code> 移动到了 C</p>
<p><img src="https://static001.infoq.cn/resource/image/76/54/76032c78c8ef74047efd42c070e48854.png"></p>
<p>第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，<code>diff</code> 后创建了 C 的真实节点插入到第一次创建的 D 节点后面。同时旧节点的 <code>endIndex</code> 移动到了 B，新节点的 <code>startIndex</code> 移动到了 E</p>
<p><img src="https://static001.infoq.cn/resource/image/1c/d7/1c76e7489660188d35f0a38ea8c8ecd7.png"></p>
<p>第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 <code>startIndex</code> 移动到了 A。旧节点的 <code>startIndex</code> 和 <code>endIndex</code> 都保持不动</p>
<p><img src="https://static001.infoq.cn/resource/image/4b/08/4b622c0d61673ec5474465d82305d308.png"></p>
<p>第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 <code>diff</code> 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 <code>startIndex</code> 移动到了 B，新节点的<code> startIndex</code> 移动到了 B</p>
<p><img src="https://static001.infoq.cn/resource/image/59/b4/5982417c3e0b2fa9ae940354a0e67ab4.png"></p>
<p>第五次循环中，情形同第四次循环一样，因此 <code>diff</code> 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 <code>startIndex </code>移动到了 C，新节点的 startIndex 移动到了 F</p>
<p><img src="https://static001.infoq.cn/resource/image/16/86/16cf0ef90f6e19d26c0ddffeca067e86.png"></p>
<p>新节点的 <code>startIndex</code> 已经大于 <code>endIndex</code> 了，需要创建 <code>newStartIdx</code> 和 <code>newEndIdx</code> 之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面</p>
<p><img src="https://static001.infoq.cn/resource/image/dc/ad/dc215b45682cf6c9cc4700a5425673ad.png"></p>
<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p>当数据发生改变时，<code>set</code>方法会调用<code>Dep.notify</code>通知所有订阅者<code>Watcher</code>，订阅者就会调用<code>patch</code>给真实的<code>DOM</code>打补丁，更新相应的视图</p>
<p>源码位置：src&#x2F;core&#x2F;vdom&#x2F;patch.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(vnode)) &#123; <span class="comment">// 没有新节点，直接执行destory钩子函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode)) <span class="title function_">invokeDestroyHook</span>(oldVnode)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldVnode)) &#123;</span><br><span class="line">        isInitialPatch = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">createElm</span>(vnode, insertedVnodeQueue) <span class="comment">// 没有旧节点，直接用新节点生成dom元素</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isRealElement = <span class="title function_">isDef</span>(oldVnode.<span class="property">nodeType</span>)</span><br><span class="line">        <span class="keyword">if</span> (!isRealElement &amp;&amp; <span class="title function_">sameVnode</span>(oldVnode, vnode)) &#123;</span><br><span class="line">            <span class="comment">// 判断旧节点和新节点自身一样，一致执行patchVnode</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则直接销毁及旧节点，根据新节点生成dom元素</span></span><br><span class="line">            <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (oldVnode.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; oldVnode.<span class="title function_">hasAttribute</span>(<span class="variable constant_">SSR_ATTR</span>)) &#123;</span><br><span class="line">                    oldVnode.<span class="title function_">removeAttribute</span>(<span class="variable constant_">SSR_ATTR</span>)</span><br><span class="line">                    hydrating = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">isTrue</span>(hydrating)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_">hydrate</span>(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">                        <span class="title function_">invokeInsertHook</span>(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVnode</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                oldVnode = <span class="title function_">emptyNodeAt</span>(oldVnode)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> vnode.<span class="property">elm</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>patch</code>函数前两个参数位为<code>oldVnode</code> 和 <code>Vnode</code> ，分别代表新的节点和之前的旧节点，主要做了四个判断：</p>
<ul>
<li>没有新节点，直接触发旧节点的<code>destory</code>钩子</li>
<li>没有旧节点，说明是页面刚开始初始化的时候，此时，根本不需要比较了，直接全是新建，所以只调用 <code>createElm</code></li>
<li>旧节点和新节点自身一样，通过 <code>sameVnode</code> 判断节点是否一样，一样时，直接调用 <code>patchVnode </code>去处理这两个节点</li>
<li>旧节点和新节点自身不一样，当两个节点不一样的时候，直接创建新节点，删除旧节点</li>
</ul>
<p>下面主要讲的是<code>patchVnode</code>部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patchVnode</span> (<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果新旧节点一致，什么都不做</span></span><br><span class="line">    <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化</span></span><br><span class="line">    <span class="keyword">const</span> elm = vnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步占位符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isTrue</span>(oldVnode.<span class="property">isAsyncPlaceholder</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(vnode.<span class="property">asyncFactory</span>.<span class="property">resolved</span>)) &#123;</span><br><span class="line">        <span class="title function_">hydrate</span>(oldVnode.<span class="property">elm</span>, vnode, insertedVnodeQueue)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode.<span class="property">isAsyncPlaceholder</span> = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果新旧都是静态节点，并且具有相同的key</span></span><br><span class="line">    <span class="comment">// 当vnode是克隆节点或是v-once指令控制的节点时，只需要把oldVnode.elm和oldVnode.child都复制到vnode上</span></span><br><span class="line">    <span class="comment">// 也不用再有其他操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isTrue</span>(vnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">      <span class="title function_">isTrue</span>(oldVnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">      vnode.<span class="property">key</span> === oldVnode.<span class="property">key</span> &amp;&amp;</span><br><span class="line">      (<span class="title function_">isTrue</span>(vnode.<span class="property">isCloned</span>) || <span class="title function_">isTrue</span>(vnode.<span class="property">isOnce</span>))</span><br><span class="line">    ) &#123;</span><br><span class="line">      vnode.<span class="property">componentInstance</span> = oldVnode.<span class="property">componentInstance</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">const</span> data = vnode.<span class="property">data</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(data) &amp;&amp; <span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">prepatch</span>)) &#123;</span><br><span class="line">      <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oldCh = oldVnode.<span class="property">children</span></span><br><span class="line">    <span class="keyword">const</span> ch = vnode.<span class="property">children</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(data) &amp;&amp; <span class="title function_">isPatchable</span>(vnode)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.<span class="property">update</span>.<span class="property">length</span>; ++i) cbs.<span class="property">update</span>[i](oldVnode, vnode)</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">update</span>)) <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果vnode不是文本节点或者注释节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(vnode.<span class="property">text</span>)) &#123;</span><br><span class="line">      <span class="comment">// 并且都有子节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh) &amp;&amp; <span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">        <span class="comment">// 并且子节点不完全一致，则调用updateChildren</span></span><br><span class="line">        <span class="keyword">if</span> (oldCh !== ch) <span class="title function_">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果只有新的vnode有子节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">// elm已经引用了老的dom节点，在老的dom节点上添加子节点</span></span><br><span class="line">        <span class="title function_">addVnodes</span>(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.<span class="property">length</span> - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果新vnode没有子节点，而vnode有子节点，直接删除老的oldCh</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh)) &#123;</span><br><span class="line">        <span class="title function_">removeVnodes</span>(elm, oldCh, <span class="number">0</span>, oldCh.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果老节点是文本节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) &#123;</span><br><span class="line">        nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果新vnode和老vnode是文本节点或注释节点</span></span><br><span class="line">      <span class="comment">// 但是vnode.text != oldVnode.text时，只需要更新vnode.elm的文本内容就可以</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.<span class="property">text</span> !== vnode.<span class="property">text</span>) &#123;</span><br><span class="line">      nodeOps.<span class="title function_">setTextContent</span>(elm, vnode.<span class="property">text</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(data)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">postpatch</span>)) <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>patchVnode</code>主要做了几个判断：</p>
<ul>
<li>新节点是否是文本节点，如果是，则直接更新<code>dom</code>的文本内容为新节点的文本内容</li>
<li>新节点和旧节点如果都有子节点，则处理比较更新子节点</li>
<li>只有新节点有子节点，旧节点没有，那么不用比较了，所有节点都是全新的，所以直接全部新建就好了，新建是指创建出所有新<code>DOM</code>，并且添加进父节点</li>
<li>只有旧节点有子节点而新节点没有，说明更新后的页面，旧节点全部都不见了，那么要做的，就是把所有的旧节点删除，也就是直接把<code>DOM</code> 删除</li>
</ul>
<p>子节点不完全一致，则调用<code>updateChildren</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldStartIdx = <span class="number">0</span> <span class="comment">// 旧头索引</span></span><br><span class="line">    <span class="keyword">let</span> newStartIdx = <span class="number">0</span> <span class="comment">// 新头索引</span></span><br><span class="line">    <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// 旧尾索引</span></span><br><span class="line">    <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// 新尾索引</span></span><br><span class="line">    <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>] <span class="comment">// oldVnode的第一个child</span></span><br><span class="line">    <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx] <span class="comment">// oldVnode的最后一个child</span></span><br><span class="line">    <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>] <span class="comment">// newVnode的第一个child</span></span><br><span class="line">    <span class="keyword">let</span> newEndVnode = newCh[newEndIdx] <span class="comment">// newVnode的最后一个child</span></span><br><span class="line">    <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line"></span><br><span class="line">    <span class="comment">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class="line">    <span class="comment">// to ensure removed elements stay in correct relative positions</span></span><br><span class="line">    <span class="comment">// during leaving transitions</span></span><br><span class="line">    <span class="keyword">const</span> canMove = !removeOnly</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果oldStartVnode和oldEndVnode重合，并且新的也都重合了，证明diff完了，循环结束</span></span><br><span class="line">    <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">      <span class="comment">// 如果oldVnode的第一个child不存在</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldStartVnode)) &#123;</span><br><span class="line">        <span class="comment">// oldStart索引右移</span></span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果oldVnode的最后一个child不存在</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldEndVnode)) &#123;</span><br><span class="line">        <span class="comment">// oldEnd索引左移</span></span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// oldStartVnode和newStartVnode是同一个节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">        <span class="comment">// patch oldStartVnode和newStartVnode， 索引左移，继续循环</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// oldEndVnode和newEndVnode是同一个节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">        <span class="comment">// patch oldEndVnode和newEndVnode，索引右移，继续循环</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">        newEndVnode = newCh[--newEndIdx]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// oldStartVnode和newEndVnode是同一个节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">        <span class="comment">// patch oldStartVnode和newEndVnode</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">        <span class="comment">// 如果removeOnly是false，则将oldStartVnode.eml移动到oldEndVnode.elm之后</span></span><br><span class="line">        canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, oldStartVnode.<span class="property">elm</span>, nodeOps.<span class="title function_">nextSibling</span>(oldEndVnode.<span class="property">elm</span>))</span><br><span class="line">        <span class="comment">// oldStart索引右移，newEnd索引左移</span></span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">        newEndVnode = newCh[--newEndIdx]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果oldEndVnode和newStartVnode是同一个节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">        <span class="comment">// patch oldEndVnode和newStartVnode</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">        <span class="comment">// 如果removeOnly是false，则将oldEndVnode.elm移动到oldStartVnode.elm之前</span></span><br><span class="line">        canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">        <span class="comment">// oldEnd索引左移，newStart索引右移</span></span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果都不匹配</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldKeyToIdx)) oldKeyToIdx = <span class="title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试在oldChildren中寻找和newStartVnode的具有相同的key的Vnode</span></span><br><span class="line">        idxInOld = <span class="title function_">isDef</span>(newStartVnode.<span class="property">key</span>)</span><br><span class="line">          ? oldKeyToIdx[newStartVnode.<span class="property">key</span>]</span><br><span class="line">          : <span class="title function_">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果未找到，说明newStartVnode是一个新的节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isUndef</span>(idxInOld)) &#123; <span class="comment">// New element</span></span><br><span class="line">          <span class="comment">// 创建一个新Vnode</span></span><br><span class="line">          <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到了和newStartVnodej具有相同的key的Vnode，叫vnodeToMove</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          vnodeToMove = oldCh[idxInOld]</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !vnodeToMove) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">&#x27;It seems there are duplicate keys that is causing an update error. &#x27;</span> +</span><br><span class="line">              <span class="string">&#x27;Make sure each v-for item has a unique key.&#x27;</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 比较两个具有相同的key的新节点是否是同一个节点</span></span><br><span class="line">          <span class="comment">//不设key，newCh和oldCh只会进行头尾两端的相互比较，设key后，除了头尾两端的比较外，还会从用key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">            <span class="comment">// patch vnodeToMove和newStartVnode</span></span><br><span class="line">            <span class="title function_">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue)</span><br><span class="line">            <span class="comment">// 清除</span></span><br><span class="line">            oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">            <span class="comment">// 如果removeOnly是false，则将找到的和newStartVnodej具有相同的key的Vnode，叫vnodeToMove.elm</span></span><br><span class="line">            <span class="comment">// 移动到oldStartVnode.elm之前</span></span><br><span class="line">            canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, vnodeToMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果key相同，但是节点不相同，则创建一个新的节点</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// same key but different element. treat as new element</span></span><br><span class="line">            <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右移</span></span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>while</code>循环主要处理了以下五种情景：</p>
<ul>
<li>当新老 <code>VNode</code> 节点的 <code>start</code> 相同时，直接 <code>patchVnode</code> ，同时新老 <code>VNode</code> 节点的开始索引都加 1</li>
<li>当新老 <code>VNode</code> 节点的 <code>end</code>相同时，同样直接 <code>patchVnode</code> ，同时新老 <code>VNode</code> 节点的结束索引都减 1</li>
<li>当老 <code>VNode</code> 节点的 <code>start</code> 和新 <code>VNode</code> 节点的 <code>end</code> 相同时，这时候在 <code>patchVnode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldEndVnode</code> 的后面，同时老 <code>VNode</code> 节点开始索引加 1，新 <code>VNode</code> 节点的结束索引减 1</li>
<li>当老 <code>VNode</code> 节点的 <code>end</code> 和新 <code>VNode</code> 节点的 <code>start</code> 相同时，这时候在 <code>patchVnode</code> 后，还需要将当前真实 <code>dom</code> 节点移动到 <code>oldStartVnode</code> 的前面，同时老 <code>VNode</code> 节点结束索引减 1，新 <code>VNode</code> 节点的开始索引加 1</li>
<li>如果都不满足以上四种情形，那说明没有相同的节点可以复用，则会分为以下两种情况：<ul>
<li>从旧的 <code>VNode</code> 为 <code>key</code> 值，对应 <code>index</code> 序列为 <code>value</code> 值的哈希表中找到与 <code>newStartVnode</code> 一致 <code>key</code> 的旧的 <code>VNode</code> 节点，再进行<code>patchVnode </code>，同时将这个真实 <code>dom </code>移动到 <code>oldStartVnode</code> 对应的真实 <code>dom</code> 的前面</li>
<li>调用 <code>createElm</code> 创建一个新的 <code>dom</code> 节点放到当前 <code>newStartIdx</code> 的位置</li>
</ul>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>当数据发生改变时，订阅者<code>watcher</code>就会调用<code>patch</code>给真实的<code>DOM</code>打补丁</li>
<li>通过<code>isSameVnode</code>进行判断，相同则调用<code>patchVnode</code>方法</li>
<li><code>patchVnode</code>做了以下操作：<ul>
<li>找到对应的真实<code>dom</code>，称为<code>el</code></li>
<li>如果都有都有文本节点且不相等，将<code>el</code>文本节点设置为<code>Vnode</code>的文本节点</li>
<li>如果<code>oldVnode</code>有子节点而<code>VNode</code>没有，则删除<code>el</code>子节点</li>
<li>如果<code>oldVnode</code>没有子节点而<code>VNode</code>有，则将<code>VNode</code>的子节点真实化后添加到<code>el</code></li>
<li>如果两者都有子节点，则执行<code>updateChildren</code>函数比较子节点</li>
</ul>
</li>
<li><code>updateChildren</code>主要做了以下操作：<ul>
<li>设置新旧<code>VNode</code>的头尾指针</li>
<li>新旧头尾指针进行比较，循环向中间靠拢，根据情况调用<code>patchVnode</code>进行<code>patch</code>重复流程、调用<code>createElem</code>创建一个新节点，从哈希表寻找 <code>key</code>一致的<code>VNode</code> 节点再分情况操作</li>
</ul>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6881907432541552648#heading-1">https://juejin.cn/post/6881907432541552648#heading-1</a></li>
<li><a href="https://www.infoq.cn/article/udlcpkh4iqb0cr5wgy7f">https://www.infoq.cn/article/udlcpkh4iqb0cr5wgy7f</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实例挂载的过程</title>
    <url>/Vue/vue-new-vue/</url>
    <content><![CDATA[<p><img src="https://static.vue-js.com/63194810-3a09-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、思考"><a href="#一、思考" class="headerlink" title="一、思考"></a>一、思考</h2><p>我们都听过知其然知其所以然这句话</p>
<p>那么不知道大家是否思考过<code>new Vue()</code>这个过程中究竟做了些什么？</p>
<p>过程中是如何完成数据的绑定，又是如何将数据渲染到视图的等等</p>
<h2 id="一、分析"><a href="#一、分析" class="headerlink" title="一、分析"></a>一、分析</h2><p>首先找到<code>vue</code>的构造函数</p>
<p>源码位置：src\core\instance\index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    !(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vue</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_init</span>(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>options</code>是用户传递过来的配置项，如<code>data、methods</code>等常用的方法</p>
<p><code>vue</code>构建函数调用<code>_init</code>方法，但我们发现本文件中并没有此方法，但仔细可以看到文件下方定定义了很多初始化方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initMixin</span>(<span class="title class_">Vue</span>);     <span class="comment">// 定义 _init</span></span><br><span class="line"><span class="title function_">stateMixin</span>(<span class="title class_">Vue</span>);    <span class="comment">// 定义 $set $get $delete $watch 等</span></span><br><span class="line"><span class="title function_">eventsMixin</span>(<span class="title class_">Vue</span>);   <span class="comment">// 定义事件  $on  $once $off $emit</span></span><br><span class="line"><span class="title function_">lifecycleMixin</span>(<span class="title class_">Vue</span>);<span class="comment">// 定义 _update  $forceUpdate  $destroy</span></span><br><span class="line"><span class="title function_">renderMixin</span>(<span class="title class_">Vue</span>);   <span class="comment">// 定义 _render 返回虚拟dom</span></span><br></pre></td></tr></table></figure>

<p>首先可以看<code>initMixin</code>方法，发现该方法在<code>Vue</code>原型上定义了<code>_init</code>方法</p>
<p>源码位置：src\core\instance\init.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options?: <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">vm</span>: <span class="title class_">Component</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// a uid</span></span><br><span class="line">    vm.<span class="property">_uid</span> = uid++</span><br><span class="line">    <span class="keyword">let</span> startTag, endTag</span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">      startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;vm._uid&#125;</span>`</span></span><br><span class="line">      <span class="title function_">mark</span>(startTag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">    vm.<span class="property">_isVue</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// merge options</span></span><br><span class="line">    <span class="comment">// 合并属性，判断初始化的是否是组件，这里合并主要是 mixins 或 extends 的方法</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options.<span class="property">_isComponent</span>) &#123;</span><br><span class="line">      <span class="comment">// optimize internal component instantiation</span></span><br><span class="line">      <span class="comment">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class="line">      <span class="comment">// internal component options needs special treatment.</span></span><br><span class="line">      <span class="title function_">initInternalComponent</span>(vm, options)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 合并vue属性</span></span><br><span class="line">      vm.<span class="property">$options</span> = <span class="title function_">mergeOptions</span>(</span><br><span class="line">        <span class="title function_">resolveConstructorOptions</span>(vm.<span class="property">constructor</span>),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 初始化proxy拦截器</span></span><br><span class="line">      <span class="title function_">initProxy</span>(vm)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.<span class="property">_renderProxy</span> = vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// expose real self</span></span><br><span class="line">    vm.<span class="property">_self</span> = vm</span><br><span class="line">    <span class="comment">// 初始化组件生命周期标志位</span></span><br><span class="line">    <span class="title function_">initLifecycle</span>(vm)</span><br><span class="line">    <span class="comment">// 初始化组件事件侦听</span></span><br><span class="line">    <span class="title function_">initEvents</span>(vm)</span><br><span class="line">    <span class="comment">// 初始化渲染方法</span></span><br><span class="line">    <span class="title function_">initRender</span>(vm)</span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">    <span class="comment">// 初始化依赖注入内容，在初始化data、props之前</span></span><br><span class="line">    <span class="title function_">initInjections</span>(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">    <span class="comment">// 初始化props/data/method/watch/methods</span></span><br><span class="line">    <span class="title function_">initState</span>(vm)</span><br><span class="line">    <span class="title function_">initProvide</span>(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">      vm.<span class="property">_name</span> = <span class="title function_">formatComponentName</span>(vm, <span class="literal">false</span>)</span><br><span class="line">      <span class="title function_">mark</span>(endTag)</span><br><span class="line">      <span class="title function_">measure</span>(<span class="string">`vue <span class="subst">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 挂载元素</span></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$options</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      vm.$mount(vm.<span class="property">$options</span>.<span class="property">el</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>仔细阅读上面的代码，我们得到以下结论：</p>
<ul>
<li><p>在调用<code>beforeCreate</code>之前，数据初始化并未完成，像<code>data</code>、<code>props</code>这些属性无法访问到</p>
</li>
<li><p>到了<code>created</code>的时候，数据已经初始化完成，能够访问<code>data</code>、<code>props</code>这些属性，但这时候并未完成<code>dom</code>的挂载，因此无法访问到<code>dom</code>元素</p>
</li>
<li><p>挂载方法是调用<code>vm.$mount</code>方法</p>
</li>
</ul>
<p><code>initState</code>方法是完成<code>props/data/method/watch/methods</code>的初始化</p>
<p>源码位置：src\core\instance\state.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initState</span> (<span class="params">vm: Component</span>) &#123;</span><br><span class="line">  <span class="comment">// 初始化组件的watcher列表</span></span><br><span class="line">  vm.<span class="property">_watchers</span> = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span></span><br><span class="line">  <span class="comment">// 初始化props</span></span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">props</span>) <span class="title function_">initProps</span>(vm, opts.<span class="property">props</span>)</span><br><span class="line">  <span class="comment">// 初始化methods方法</span></span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">methods</span>) <span class="title function_">initMethods</span>(vm, opts.<span class="property">methods</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化data  </span></span><br><span class="line">    <span class="title function_">initData</span>(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">observe</span>(vm.<span class="property">_data</span> = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">computed</span>) <span class="title function_">initComputed</span>(vm, opts.<span class="property">computed</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">watch</span> &amp;&amp; opts.<span class="property">watch</span> !== nativeWatch) &#123;</span><br><span class="line">    <span class="title function_">initWatch</span>(vm, opts.<span class="property">watch</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们和这里主要看初始化<code>data</code>的方法为<code>initData</code>，它与<code>initState</code>在同一文件上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span> (<span class="params">vm: Component</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span></span><br><span class="line">  <span class="comment">// 获取到组件上的data</span></span><br><span class="line">  data = vm.<span class="property">_data</span> = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    ? <span class="title function_">getData</span>(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isPlainObject</span>(data)) &#123;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">&#x27;data functions should return an object:\n&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.<span class="property">$options</span>.<span class="property">props</span></span><br><span class="line">  <span class="keyword">const</span> methods = vm.<span class="property">$options</span>.<span class="property">methods</span></span><br><span class="line">  <span class="keyword">let</span> i = keys.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 属性名不能与方法名重复</span></span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; <span class="title function_">hasOwn</span>(methods, key)) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性名不能与state名称重复</span></span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; <span class="title function_">hasOwn</span>(props, key)) &#123;</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`The data property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title function_">isReserved</span>(key)) &#123; <span class="comment">// 验证key值的合法性</span></span><br><span class="line">      <span class="comment">// 将_data中的数据挂载到组件vm上,这样就可以通过this.xxx访问到组件上的数据</span></span><br><span class="line">      <span class="title function_">proxy</span>(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  <span class="comment">// 响应式监听data是数据的变化</span></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仔细阅读上面的代码，我们可以得到以下结论：</p>
<ul>
<li><p>初始化顺序：<code>props</code>、<code>methods</code>、<code>data</code></p>
</li>
<li><p><code>data</code>定义的时候可选择函数形式或者对象形式（组件只能为函数形式）</p>
</li>
</ul>
<p>关于数据响应式在这就不展开详细说明</p>
<p>上文提到挂载方法是调用<code>vm.$mount</code>方法</p>
<p>源码位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  el?: string | Element,</span></span><br><span class="line"><span class="params">  hydrating?: boolean</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 获取或查询元素</span></span><br><span class="line">  el = el &amp;&amp; <span class="title function_">query</span>(el)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="comment">// vue 不允许直接挂载到body或页面文档上</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="variable language_">document</span>.<span class="property">body</span> || el === <span class="variable language_">document</span>.<span class="property">documentElement</span>) &#123;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span></span><br><span class="line">  <span class="comment">// resolve template/el and convert to render function</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">render</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> template = options.<span class="property">template</span></span><br><span class="line">    <span class="comment">// 存在template模板，解析vue模板文件</span></span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.<span class="title function_">charAt</span>(<span class="number">0</span>) === <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">          template = <span class="title function_">idToTemplate</span>(template)</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !template) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">`Template element not found or is empty: <span class="subst">$&#123;options.template&#125;</span>`</span>,</span><br><span class="line">              <span class="variable language_">this</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.<span class="property">nodeType</span>) &#123;</span><br><span class="line">        template = template.<span class="property">innerHTML</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">&#x27;invalid template option:&#x27;</span> + template, <span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      <span class="comment">// 通过选择器获取元素内容</span></span><br><span class="line">      template = <span class="title function_">getOuterHTML</span>(el)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">        <span class="title function_">mark</span>(<span class="string">&#x27;compile&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *  1.将temmplate解析ast tree</span></span><br><span class="line"><span class="comment">       *  2.将ast tree转换成render语法字符串</span></span><br><span class="line"><span class="comment">       *  3.生成render方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = <span class="title function_">compileToFunctions</span>(template, &#123;</span><br><span class="line">        <span class="attr">outputSourceRange</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        <span class="attr">delimiters</span>: options.<span class="property">delimiters</span>,</span><br><span class="line">        <span class="attr">comments</span>: options.<span class="property">comments</span></span><br><span class="line">      &#125;, <span class="variable language_">this</span>)</span><br><span class="line">      options.<span class="property">render</span> = render</span><br><span class="line">      options.<span class="property">staticRenderFns</span> = staticRenderFns</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">        <span class="title function_">mark</span>(<span class="string">&#x27;compile end&#x27;</span>)</span><br><span class="line">        <span class="title function_">measure</span>(<span class="string">`vue <span class="subst">$&#123;<span class="variable language_">this</span>._name&#125;</span> compile`</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;compile end&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.<span class="title function_">call</span>(<span class="variable language_">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>阅读上面代码，我们能得到以下结论：</p>
<ul>
<li><p>不要将根元素放到<code>body</code>或者<code>html</code>上</p>
</li>
<li><p>可以在对象中定义<code>template/render</code>或者直接使用<code>template</code>、<code>el</code>表示元素选择器</p>
</li>
<li><p>最终都会解析成<code>render</code>函数，调用<code>compileToFunctions</code>，会将<code>template</code>解析成<code>render</code>函数</p>
</li>
</ul>
<p>对<code>template</code>的解析步骤大致分为以下几步：</p>
<ul>
<li><p>将<code>html</code>文档片段解析成<code>ast</code>描述符</p>
</li>
<li><p>将<code>ast</code>描述符解析成字符串</p>
</li>
<li><p>生成<code>render</code>函数</p>
</li>
</ul>
<p>生成<code>render</code>函数，挂载到<code>vm</code>上后，会再次调用<code>mount</code>方法</p>
<p>源码位置：src\platforms\web\runtime\index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public mount method</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  el?: string | Element,</span></span><br><span class="line"><span class="params">  hydrating?: boolean</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Component</span> &#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? <span class="title function_">query</span>(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 渲染组件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">mountComponent</span>(<span class="variable language_">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用<code>mountComponent</code>渲染组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mountComponent</span> (<span class="params"></span></span><br><span class="line"><span class="params">  vm: Component,</span></span><br><span class="line"><span class="params">  el: ?Element,</span></span><br><span class="line"><span class="params">  hydrating?: boolean</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Component</span> &#123;</span><br><span class="line">  vm.<span class="property">$el</span> = el</span><br><span class="line">  <span class="comment">// 如果没有获取解析的render函数，则会抛出警告</span></span><br><span class="line">  <span class="comment">// render是解析模板文件生成的</span></span><br><span class="line">  <span class="keyword">if</span> (!vm.<span class="property">$options</span>.<span class="property">render</span>) &#123;</span><br><span class="line">    vm.<span class="property">$options</span>.<span class="property">render</span> = createEmptyVNode</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> ((vm.<span class="property">$options</span>.<span class="property">template</span> &amp;&amp; vm.<span class="property">$options</span>.<span class="property">template</span>.<span class="title function_">charAt</span>(<span class="number">0</span>) !== <span class="string">&#x27;#&#x27;</span>) ||</span><br><span class="line">        vm.<span class="property">$options</span>.<span class="property">el</span> || el) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">&#x27;You are using the runtime-only build of Vue where the template &#x27;</span> +</span><br><span class="line">          <span class="string">&#x27;compiler is not available. Either pre-compile the templates into &#x27;</span> +</span><br><span class="line">          <span class="string">&#x27;render functions, or use the compiler-included build.&#x27;</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有获取到vue的模板文件</span></span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">&#x27;Failed to mount component: template or render function not defined.&#x27;</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行beforeMount钩子</span></span><br><span class="line">  <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updateComponent</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">    updateComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> name = vm.<span class="property">_name</span></span><br><span class="line">      <span class="keyword">const</span> id = vm.<span class="property">_uid</span></span><br><span class="line">      <span class="keyword">const</span> startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      <span class="keyword">const</span> endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">mark</span>(startTag)</span><br><span class="line">      <span class="keyword">const</span> vnode = vm.<span class="title function_">_render</span>()</span><br><span class="line">      <span class="title function_">mark</span>(endTag)</span><br><span class="line">      <span class="title function_">measure</span>(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> render`</span>, startTag, endTag)</span><br><span class="line"></span><br><span class="line">      <span class="title function_">mark</span>(startTag)</span><br><span class="line">      vm.<span class="title function_">_update</span>(vnode, hydrating)</span><br><span class="line">      <span class="title function_">mark</span>(endTag)</span><br><span class="line">      <span class="title function_">measure</span>(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> patch`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 定义更新函数</span></span><br><span class="line">    updateComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 实际调⽤是在lifeCycleMixin中定义的_update和renderMixin中定义的_render</span></span><br><span class="line">      vm.<span class="title function_">_update</span>(vm.<span class="title function_">_render</span>(), hydrating)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// we set this to vm._watcher inside the watcher&#x27;s constructor</span></span><br><span class="line">  <span class="comment">// since the watcher&#x27;s initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class="line">  <span class="comment">// component&#x27;s mounted hook), which relies on vm._watcher being already defined</span></span><br><span class="line">  <span class="comment">// 监听当前组件状态，当有数据变化时，更新组件</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, updateComponent, noop, &#123;</span><br><span class="line">    <span class="title function_">before</span> () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm.<span class="property">_isMounted</span> &amp;&amp; !vm.<span class="property">_isDestroyed</span>) &#123;</span><br><span class="line">        <span class="comment">// 数据更新引发的组件更新</span></span><br><span class="line">        <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeUpdate&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line">  hydrating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// manually mounted instance, call mounted on self</span></span><br><span class="line">  <span class="comment">// mounted is called for render-created child components in its inserted hook</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$vnode</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm.<span class="property">_isMounted</span> = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>阅读上面代码，我们得到以下结论：</p>
<ul>
<li>会触发<code>beforeCreate</code>钩子</li>
<li>定义<code>updateComponent</code>渲染页面视图的方法</li>
<li>监听组件数据，一旦发生变化，触发<code>beforeUpdate</code>生命钩子</li>
</ul>
<p><code>updateComponent</code>方法主要执行在<code>vue</code>初始化时声明的<code>render</code>，<code>update</code>方法</p>
<p><code>render</code>的作用主要是生成<code>vnode</code></p>
<p>源码位置：src\core\instance\render.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义vue 原型上的render方法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_render</span> = <span class="keyword">function</span> (<span class="params"></span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">vm</span>: <span class="title class_">Component</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="comment">// render函数来自于组件的option</span></span><br><span class="line">    <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.<span class="property">$options</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">        vm.<span class="property">$scopedSlots</span> = <span class="title function_">normalizeScopedSlots</span>(</span><br><span class="line">            _parentVnode.<span class="property">data</span>.<span class="property">scopedSlots</span>,</span><br><span class="line">            vm.<span class="property">$slots</span>,</span><br><span class="line">            vm.<span class="property">$scopedSlots</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set parent vnode. this allows render functions to have access</span></span><br><span class="line">    <span class="comment">// to the data on the placeholder node.</span></span><br><span class="line">    vm.<span class="property">$vnode</span> = _parentVnode</span><br><span class="line">    <span class="comment">// render self</span></span><br><span class="line">    <span class="keyword">let</span> vnode</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// There&#x27;s no need to maintain a stack because all render fns are called</span></span><br><span class="line">        <span class="comment">// separately from one another. Nested component&#x27;s render fns are called</span></span><br><span class="line">        <span class="comment">// when parent component is patched.</span></span><br><span class="line">        currentRenderingInstance = vm</span><br><span class="line">        <span class="comment">// 调用render方法，自己的独特的render方法， 传入createElement参数，生成vNode</span></span><br><span class="line">        vnode = render.<span class="title function_">call</span>(vm.<span class="property">_renderProxy</span>, vm.<span class="property">$createElement</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, vm, <span class="string">`render`</span>)</span><br><span class="line">        <span class="comment">// return error render result,</span></span><br><span class="line">        <span class="comment">// or previous vnode to prevent render error causing blank component</span></span><br><span class="line">        <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; vm.<span class="property">$options</span>.<span class="property">renderError</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                vnode = vm.<span class="property">$options</span>.<span class="property">renderError</span>.<span class="title function_">call</span>(vm.<span class="property">_renderProxy</span>, vm.<span class="property">$createElement</span>, e)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="title function_">handleError</span>(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">                vnode = vm.<span class="property">_vnode</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vnode = vm.<span class="property">_vnode</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        currentRenderingInstance = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the returned array contains only a single node, allow it</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode) &amp;&amp; vnode.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        vnode = vnode[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return empty vnode in case the render function errored out</span></span><br><span class="line">    <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> <span class="title class_">VNode</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; <span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode)) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">                <span class="string">&#x27;Multiple root nodes returned from render function. Render function &#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;should return a single root node.&#x27;</span>,</span><br><span class="line">                vm</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        vnode = <span class="title function_">createEmptyVNode</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set parent</span></span><br><span class="line">    vnode.<span class="property">parent</span> = _parentVnode</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>_update</code>主要功能是调用<code>patch</code>，将<code>vnode</code>转换为真实<code>DOM</code>，并且更新到页面中</p>
<p>源码位置：src\core\instance\lifecycle.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_update</span> = <span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">vm</span>: <span class="title class_">Component</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> prevEl = vm.<span class="property">$el</span></span><br><span class="line">    <span class="keyword">const</span> prevVnode = vm.<span class="property">_vnode</span></span><br><span class="line">    <span class="comment">// 设置当前激活的作用域</span></span><br><span class="line">    <span class="keyword">const</span> restoreActiveInstance = <span class="title function_">setActiveInstance</span>(vm)</span><br><span class="line">    vm.<span class="property">_vnode</span> = vnode</span><br><span class="line">    <span class="comment">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class="line">    <span class="comment">// based on the rendering backend used.</span></span><br><span class="line">    <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">      <span class="comment">// initial render</span></span><br><span class="line">      <span class="comment">// 执行具体的挂载逻辑</span></span><br><span class="line">      vm.<span class="property">$el</span> = vm.<span class="title function_">__patch__</span>(vm.<span class="property">$el</span>, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// updates</span></span><br><span class="line">      vm.<span class="property">$el</span> = vm.<span class="title function_">__patch__</span>(prevVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">restoreActiveInstance</span>()</span><br><span class="line">    <span class="comment">// update __vue__ reference</span></span><br><span class="line">    <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">      prevEl.<span class="property">__vue__</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$el</span>) &#123;</span><br><span class="line">      vm.<span class="property">$el</span>.<span class="property">__vue__</span> = vm</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if parent is an HOC, update its $el as well</span></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$vnode</span> &amp;&amp; vm.<span class="property">$parent</span> &amp;&amp; vm.<span class="property">$vnode</span> === vm.<span class="property">$parent</span>.<span class="property">_vnode</span>) &#123;</span><br><span class="line">      vm.<span class="property">$parent</span>.<span class="property">$el</span> = vm.<span class="property">$el</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class="line">    <span class="comment">// updated in a parent&#x27;s updated hook.</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><ul>
<li><p><code>new Vue</code>的时候调用会调用<code>_init</code>方法</p>
<ul>
<li>定义 <code>$set</code>、<code> $get</code> 、<code>$delete</code>、<code>$watch</code> 等方法</li>
<li>定义 <code>$on</code>、<code>$off</code>、<code>$emit</code>、<code>$off </code>等事件</li>
<li>定义 <code>_update</code>、<code>$forceUpdate</code>、<code>$destroy</code>生命周期</li>
</ul>
</li>
<li><p>调用<code>$mount</code>进行页面的挂载</p>
</li>
<li><p>挂载的时候主要是通过<code>mountComponent</code>方法</p>
</li>
<li><p>定义<code>updateComponent</code>更新函数</p>
</li>
<li><p>执行<code>render</code>生成虚拟<code>DOM</code></p>
</li>
<li><p><code>_update</code>将虚拟<code>DOM</code>生成真实<code>DOM</code>结构，并且渲染到页面中</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.cnblogs.com/gerry2019/p/12001661.html">https://www.cnblogs.com/gerry2019/p/12001661.html</a></li>
<li><a href="https://github.com/vuejs/vue/tree/dev/src/core/instance">https://github.com/vuejs/vue/tree/dev/src/core/instance</a> </li>
<li><a href="https://vue3js.cn/">https://vue3js.cn</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
