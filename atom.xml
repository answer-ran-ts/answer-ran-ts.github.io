<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlogMind</title>
  
  <subtitle>思维的栖息地</subtitle>
  <link href="https://blogmind.cloud/atom.xml" rel="self"/>
  
  <link href="https://blogmind.cloud/"/>
  <updated>2025-02-15T07:40:46.485Z</updated>
  <id>https://blogmind.cloud/</id>
  
  <author>
    <name>Answer Ran</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2.15 前端面试复盘（三）</title>
    <link href="https://blogmind.cloud/2025/02/15/engine-pre2/"/>
    <id>https://blogmind.cloud/2025/02/15/engine-pre2/</id>
    <published>2025-02-15T04:00:00.000Z</published>
    <updated>2025-02-15T07:40:46.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试官提问环节"><a href="#面试官提问环节" class="headerlink" title="面试官提问环节"></a>面试官提问环节</h1><h3 id="面试官：说说你对-Vue-响应式的理解？"><a href="#面试官：说说你对-Vue-响应式的理解？" class="headerlink" title="面试官：说说你对 Vue 响应式的理解？"></a>面试官：说说你对 Vue 响应式的理解？</h3><p>Vue 的响应式系统是其核心特性之一，我主要从以下几个方面来理解：</p><h4 id="Vue2-的响应式实现"><a href="#Vue2-的响应式实现" class="headerlink" title="Vue2 的响应式实现"></a>Vue2 的响应式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心是通过 Object.defineProperty 来劫持对象的属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="comment">// 每个属性对应一个 dep 用来收集依赖</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span></span><br><span class="line">      val = newVal</span><br><span class="line">      <span class="comment">// 通知更新</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际项目中遇到的问题：</span></span><br><span class="line"><span class="number">1.</span> 对数组的变化监听需要特殊处理</span><br><span class="line"><span class="number">2.</span> 新增、删除属性需要使用 <span class="title class_">Vue</span>.<span class="property">set</span>/<span class="keyword">delete</span></span><br><span class="line"><span class="number">3.</span> 嵌套对象需要递归遍历</span><br></pre></td></tr></table></figure><h4 id="Vue3-的响应式优化"><a href="#Vue3-的响应式优化" class="headerlink" title="Vue3 的响应式优化"></a>Vue3 的响应式优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Proxy 来代理整个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优势：</span></span><br><span class="line"><span class="number">1.</span> 可以监听数组变化</span><br><span class="line"><span class="number">2.</span> 可以监听对象属性的添加和删除</span><br><span class="line"><span class="number">3.</span> 支持 <span class="title class_">Map</span>、<span class="title class_">Set</span>、<span class="title class_">WeakMap</span>、<span class="title class_">WeakSet</span></span><br><span class="line"><span class="number">4.</span> 性能更好，不需要递归遍历</span><br></pre></td></tr></table></figure><h3 id="面试官：项目中遇到过哪些性能问题？如何解决的？"><a href="#面试官：项目中遇到过哪些性能问题？如何解决的？" class="headerlink" title="面试官：项目中遇到过哪些性能问题？如何解决的？"></a>面试官：项目中遇到过哪些性能问题？如何解决的？</h3><p>在之前提到的虚拟表格项目中，我遇到了以下性能问题：</p><h4 id="1-大数据渲染问题"><a href="#1-大数据渲染问题" class="headerlink" title="1. 大数据渲染问题"></a>1. 大数据渲染问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题：10万条数据渲染，导致页面卡顿</span><br><span class="line">解决方案：</span><br><span class="line">1. 实现虚拟滚动，只渲染可视区域数据</span><br><span class="line">2. 使用 transform 代替 top 定位</span><br><span class="line">3. 使用 RAF 优化滚动事件</span><br><span class="line">4. 实现缓冲区机制提升滚动体验</span><br></pre></td></tr></table></figure><h4 id="2-频繁更新问题"><a href="#2-频繁更新问题" class="headerlink" title="2. 频繁更新问题"></a>2. 频繁更新问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题：实时数据频繁更新导致性能问题</span><br><span class="line">解决方案：</span><br><span class="line">1. 使用 Web Worker 处理数据计算</span><br><span class="line">2. 实现增量更新机制</span><br><span class="line">3. 使用 Object.freeze 冻结不变数据</span><br><span class="line">4. 优化更新频率，合并多次更新</span><br></pre></td></tr></table></figure><h4 id="3-内存泄漏问题"><a href="#3-内存泄漏问题" class="headerlink" title="3. 内存泄漏问题"></a>3. 内存泄漏问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题：长时间运行后内存占用过高</span><br><span class="line">解决方案：</span><br><span class="line">1. 及时清理不可见区域的 DOM</span><br><span class="line">2. 解绑事件监听器</span><br><span class="line">3. 清理定时器和订阅</span><br><span class="line">4. 使用 WeakMap/WeakSet 存储引用</span><br></pre></td></tr></table></figure><h3 id="面试官：你是如何设计一个组件的？"><a href="#面试官：你是如何设计一个组件的？" class="headerlink" title="面试官：你是如何设计一个组件的？"></a>面试官：你是如何设计一个组件的？</h3><p>以虚拟表格组件为例，我的设计思路是：</p><h4 id="1-接口设计"><a href="#1-接口设计" class="headerlink" title="1. 接口设计"></a>1. 接口设计</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 保持简单直观：</span><br><span class="line">   - 必要的 props：data、columns、height</span><br><span class="line">   - 可选的功能 props：selectable、sortable、expandable</span><br><span class="line">   - 统一的事件命名：onSort、onSelect、onExpand</span><br><span class="line"></span><br><span class="line">2. 兼顾灵活性：</span><br><span class="line">   - 支持自定义列模板</span><br><span class="line">   - 支持自定义排序逻辑</span><br><span class="line">   - 支持自定义展开行内容</span><br></pre></td></tr></table></figure><h4 id="2-性能考虑"><a href="#2-性能考虑" class="headerlink" title="2. 性能考虑"></a>2. 性能考虑</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 渲染性能：</span><br><span class="line">   - 虚拟滚动</span><br><span class="line">   - 函数式组件</span><br><span class="line">   - 合理的更新粒度</span><br><span class="line"></span><br><span class="line">2. 内存优化：</span><br><span class="line">   - 缓存计算结果</span><br><span class="line">   - 及时清理资源</span><br><span class="line">   - 优化数据结构</span><br></pre></td></tr></table></figure><h4 id="3-可维护性"><a href="#3-可维护性" class="headerlink" title="3. 可维护性"></a>3. 可维护性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 代码组织：</span><br><span class="line">   - 单一职责</span><br><span class="line">   - 逻辑分层</span><br><span class="line">   - 清晰的注释</span><br><span class="line"></span><br><span class="line">2. 扩展性：</span><br><span class="line">   - 插件机制</span><br><span class="line">   - 钩子函数</span><br><span class="line">   - 预留扩展接口</span><br></pre></td></tr></table></figure><p>这些都是我在实际项目中总结的经验，每个方案都经过了实践验证。</p><h3 id="面试官：说说你对-Vue-生命周期的理解？"><a href="#面试官：说说你对-Vue-生命周期的理解？" class="headerlink" title="面试官：说说你对 Vue 生命周期的理解？"></a>面试官：说说你对 Vue 生命周期的理解？</h3><p>Vue 的生命周期是组件从创建到销毁的整个过程，我主要从以下几个方面来理解：</p><h4 id="Vue2-生命周期"><a href="#Vue2-生命周期" class="headerlink" title="Vue2 生命周期"></a>Vue2 生命周期</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 创建阶段：</span><br><span class="line">   <span class="attr">beforeCreate</span>: 实例创建前，data/methods 都不可用</span><br><span class="line">   <span class="attr">created</span>: 实例创建后，可访问 data/methods，但未挂载 <span class="variable constant_">DOM</span></span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span> 挂载阶段：</span><br><span class="line">   <span class="attr">beforeMount</span>: 模板编译完成，但未挂载到 <span class="variable constant_">DOM</span></span><br><span class="line">   <span class="attr">mounted</span>: <span class="variable constant_">DOM</span> 挂载完成，可以访问 <span class="variable constant_">DOM</span> 元素</span><br><span class="line">   </span><br><span class="line"><span class="number">3.</span> 更新阶段：</span><br><span class="line">   <span class="attr">beforeUpdate</span>: 数据更新，但 <span class="variable constant_">DOM</span> 未更新</span><br><span class="line">   <span class="attr">updated</span>: <span class="variable constant_">DOM</span> 更新完成</span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> 销毁阶段：</span><br><span class="line">   <span class="attr">beforeDestroy</span>: 实例销毁前，可以清理事件、定时器等</span><br><span class="line">   <span class="attr">destroyed</span>: 实例销毁后，所有指令解绑，子实例销毁</span><br><span class="line"></span><br><span class="line">实际应用：</span><br><span class="line">- <span class="attr">created</span>: 发起数据请求，初始化数据</span><br><span class="line">- <span class="attr">mounted</span>: 操作 <span class="variable constant_">DOM</span>，初始化第三方库</span><br><span class="line">- <span class="attr">beforeDestroy</span>: 清理定时器、取消订阅</span><br></pre></td></tr></table></figure><h4 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a>Vue3 生命周期</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onBeforeMount, onBeforeUnmount &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建阶段</span></span><br><span class="line">  <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件挂载前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件挂载后</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新阶段</span></span><br><span class="line">  <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件更新前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件更新后</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 销毁阶段</span></span><br><span class="line">  <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件卸载前</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件卸载后</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试官：Vue2-和-Vue3-的区别？"><a href="#面试官：Vue2-和-Vue3-的区别？" class="headerlink" title="面试官：Vue2 和 Vue3 的区别？"></a>面试官：Vue2 和 Vue3 的区别？</h3><p>主要从以下几个方面来说：</p><h4 id="1-响应式系统"><a href="#1-响应式系统" class="headerlink" title="1. 响应式系统"></a>1. 响应式系统</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2：Object.defineProperty</span></span><br><span class="line"><span class="number">1.</span> 需要递归遍历对象</span><br><span class="line"><span class="number">2.</span> 不能监听数组索引和长度变化</span><br><span class="line"><span class="number">3.</span> 不能监听对象属性的添加和删除</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3：Proxy</span></span><br><span class="line"><span class="number">1.</span> 可以监听整个对象</span><br><span class="line"><span class="number">2.</span> 可以监听数组变化</span><br><span class="line"><span class="number">3.</span> 支持 <span class="title class_">Map</span>、<span class="title class_">Set</span> 等数据结构</span><br><span class="line"><span class="number">4.</span> 性能更好，不需要递归</span><br></pre></td></tr></table></figure><h4 id="2-组合式-API"><a href="#2-组合式-API" class="headerlink" title="2. 组合式 API"></a>2. 组合式 API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2：Options API</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3：Composition API</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      doubleCount,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优势：</span><br><span class="line"><span class="number">1.</span> 更好的代码组织</span><br><span class="line"><span class="number">2.</span> 更好的逻辑复用</span><br><span class="line"><span class="number">3.</span> 更好的类型推导</span><br></pre></td></tr></table></figure><h4 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 编译优化：</span><br><span class="line">   - 静态节点提升</span><br><span class="line">   - Patch Flag 标记</span><br><span class="line">   - 块级树结构</span><br><span class="line">   </span><br><span class="line">2. 按需编译：</span><br><span class="line">   - Tree-shaking 支持</span><br><span class="line">   - 更小的打包体积</span><br><span class="line">   </span><br><span class="line">3. 新特性：</span><br><span class="line">   - Fragment</span><br><span class="line">   - Teleport</span><br><span class="line">   - Suspense</span><br></pre></td></tr></table></figure><h3 id="面试官：Vue-中如何实现组件通信？"><a href="#面试官：Vue-中如何实现组件通信？" class="headerlink" title="面试官：Vue 中如何实现组件通信？"></a>面试官：Vue 中如何实现组件通信？</h3><p>我通常使用以下几种方式：</p><h4 id="1-Props-Emit"><a href="#1-Props-Emit" class="headerlink" title="1. Props&#x2F;Emit"></a>1. Props&#x2F;Emit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child-component</span><br><span class="line">    :message=&quot;message&quot;</span><br><span class="line">    @update=&quot;handleUpdate&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;message&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&#x27;update&#x27;, &#x27;new value&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">适用场景：父子组件通信</span><br></pre></td></tr></table></figure><h4 id="2-Provide-Inject"><a href="#2-Provide-Inject" class="headerlink" title="2. Provide&#x2F;Inject"></a>2. Provide&#x2F;Inject</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">theme</span>: <span class="variable language_">this</span>.<span class="property">theme</span>,</span><br><span class="line">      <span class="attr">updateTheme</span>: <span class="variable language_">this</span>.<span class="property">updateTheme</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;updateTheme&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">适用场景：跨层级组件通信</span><br></pre></td></tr></table></figure><h4 id="3-Vuex-Pinia"><a href="#3-Vuex-Pinia" class="headerlink" title="3. Vuex&#x2F;Pinia"></a>3. Vuex&#x2F;Pinia</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vuex</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pinia</span></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">适用场景：全局状态管理</span><br></pre></td></tr></table></figure><h4 id="4-EventBus"><a href="#4-EventBus" class="headerlink" title="4. EventBus"></a>4. EventBus</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;update&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;update&#x27;</span>, data)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;update&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line">适用场景：非父子组件通信</span><br><span class="line">注意事项：需要及时销毁监听器</span><br></pre></td></tr></table></figure><p>这些都是我在实际项目中经常使用的通信方式，选择哪种方式主要取决于：</p><ol><li>组件间的关系（父子、兄弟、跨层级）</li><li>通信的频率和复杂度</li><li>是否需要状态管理</li><li>是否需要调试工具支持</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试官提问环节&quot;&gt;&lt;a href=&quot;#面试官提问环节&quot; class=&quot;headerlink&quot; title=&quot;面试官提问环节&quot;&gt;&lt;/a&gt;面试官提问环节&lt;/h1&gt;&lt;h3 id=&quot;面试官：说说你对-Vue-响应式的理解？&quot;&gt;&lt;a href=&quot;#面试官：说说你对-Vue-</summary>
      
    
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="技术面试" scheme="https://blogmind.cloud/tags/%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2.15 前端面试复盘（二）</title>
    <link href="https://blogmind.cloud/2025/02/15/engine-websocket/"/>
    <id>https://blogmind.cloud/2025/02/15/engine-websocket/</id>
    <published>2025-02-15T04:00:00.000Z</published>
    <updated>2025-02-15T07:33:04.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket-技术要点总结"><a href="#WebSocket-技术要点总结" class="headerlink" title="WebSocket 技术要点总结"></a>WebSocket 技术要点总结</h1><h2 id="WebSocket-连接管理详解"><a href="#WebSocket-连接管理详解" class="headerlink" title="WebSocket 连接管理详解"></a>WebSocket 连接管理详解</h2><h3 id="心跳检测与断线重连机制"><a href="#心跳检测与断线重连机制" class="headerlink" title="心跳检测与断线重连机制"></a>心跳检测与断线重连机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WebSocketClient</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置参数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">            <span class="attr">heartbeatInterval</span>: <span class="number">30000</span>,</span><br><span class="line">            <span class="attr">reconnectInterval</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="attr">maxReconnectAttempts</span>: <span class="number">5</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>; <span class="comment">// 重置重连次数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">startHeartbeat</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">clearHeartbeat</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">data</span> === <span class="string">&#x27;pong&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 收到心跳响应</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理其他消息</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">startHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="string">&#x27;ping&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">heartbeatInterval</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clearHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">heartbeatTimer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">heartbeatTimer</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">reconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> &lt; <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">maxReconnectAttempts</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>++;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">            &#125;, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">reconnectInterval</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>心跳检测是<strong>预防性</strong>的，用于及时发现连接问题。断线重连是<strong>补救性</strong>的，用于恢复已断开的连接。两者配合使用可以提供更可靠的连接保障。</p><h3 id="黏包问题"><a href="#黏包问题" class="headerlink" title="黏包问题"></a>黏包问题</h3><p>在 WebSocket 通信中，由于 TCP 的特性，可能会出现数据包粘连的情况。这就是所谓的黏包问题，主要表现为多个数据包在传输过程中粘在一起，接收端无法正确分割。</p><h4 id="TCP-特性与黏包原因"><a href="#TCP-特性与黏包原因" class="headerlink" title="TCP 特性与黏包原因"></a>TCP 特性与黏包原因</h4><p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。黏包问题产生的主要原因有：</p><ol><li><p><strong>TCP 是流式协议</strong></p><ul><li>TCP 传输的数据是连续的字节流，没有消息边界</li><li>应用层的一次写操作，并不对应网络上的一个数据包</li><li>TCP 可能将多个小数据包合并成一个大的数据包发送</li><li>也可能将一个大的数据包拆分成多个小数据包发送</li></ul></li><li><p><strong>Nagle 算法</strong></p><ul><li>TCP 默认启用 Nagle 算法，用于提高网络传输效率</li><li>算法会等待一定时间，收集多个小数据包后一起发送</li><li>这种优化机制直接导致了数据包的粘连</li></ul></li><li><p><strong>接收方 TCP 缓冲区</strong></p><ul><li>TCP 接收方会将收到的数据包暂存在缓冲区</li><li>应用程序如果读取不及时，多个数据包会在缓冲区中堆积</li><li>当应用程序一次性读取时，会同时读到多个数据包的数据</li></ul></li></ol><p>示意图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发送方                                接收方</span><br><span class="line">+------------+                     +------------+</span><br><span class="line">| 数据包 1   |                     | 数据包 1+2 |</span><br><span class="line">+------------+     TCP 传输        +------------+</span><br><span class="line">| 数据包 2   |  =============&gt;    | 数据       |</span><br><span class="line">+------------+     合并传输        | 无法区分边界|</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>消息帧格式设计</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> frame = &#123;</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="attr">messageLength</span>: number,  <span class="comment">// 消息总长度</span></span><br><span class="line">        <span class="attr">messageType</span>: string,    <span class="comment">// 消息类型</span></span><br><span class="line">        <span class="attr">timestamp</span>: number       <span class="comment">// 时间戳</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: any                   <span class="comment">// 消息主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现消息解析器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessageParser</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">buffer</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 缓存数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">parse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">buffer</span> += data;</span><br><span class="line">        <span class="keyword">const</span> messages = [];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查是否包含完整的消息头</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &lt; <span class="number">8</span>) <span class="keyword">break</span>;  <span class="comment">// 假设头部长度为8字节</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> headerLength = <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">const</span> header = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(<span class="number">0</span>, headerLength));</span><br><span class="line">            <span class="keyword">const</span> totalLength = header.<span class="property">messageLength</span> + headerLength;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否收到完整消息</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="property">length</span> &lt; totalLength) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提取完整消息</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(headerLength, totalLength);</span><br><span class="line">            messages.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: header.<span class="property">messageType</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(message)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新缓存</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">buffer</span> = <span class="variable language_">this</span>.<span class="property">buffer</span>.<span class="title function_">slice</span>(totalLength);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> messages;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="keyword">new</span> <span class="title class_">MessageParser</span>();</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = parser.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">    messages.<span class="title function_">forEach</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(msg.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;market&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleMarketData</span>(msg.<span class="property">data</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;trade&#x27;</span>:</span><br><span class="line">                <span class="title function_">handleTradeData</span>(msg.<span class="property">data</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// ... 处理其他类型消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>关键点说明</p></li></ol><ul><li>每个消息都有固定格式的头部，包含消息长度等信息</li><li>使用缓冲区暂存不完整的消息</li><li>通过消息长度字段来正确拆分消息</li><li>支持批量处理多个粘连的消息</li></ul><p>这种方案可以有效处理 WebSocket 通信中的黏包问题，保证数据的完整性和正确性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebSocket-技术要点总结&quot;&gt;&lt;a href=&quot;#WebSocket-技术要点总结&quot; class=&quot;headerlink&quot; title=&quot;WebSocket 技术要点总结&quot;&gt;&lt;/a&gt;WebSocket 技术要点总结&lt;/h1&gt;&lt;h2 id=&quot;WebSocket</summary>
      
    
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="WebSocket" scheme="https://blogmind.cloud/tags/WebSocket/"/>
    
    <category term="网络通信" scheme="https://blogmind.cloud/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>2.15 面对职场矛盾，要不要宣泄怒气</title>
    <link href="https://blogmind.cloud/2025/02/15/life-1/"/>
    <id>https://blogmind.cloud/2025/02/15/life-1/</id>
    <published>2025-02-15T04:00:00.000Z</published>
    <updated>2025-02-15T08:28:33.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面对职场矛盾，要不要宣泄怒气？？？"><a href="#面对职场矛盾，要不要宣泄怒气？？？" class="headerlink" title="面对职场矛盾，要不要宣泄怒气？？？"></a>面对职场矛盾，要不要宣泄怒气？？？</h1><h2 id="职场怒气管理决策模型"><a href="#职场怒气管理决策模型" class="headerlink" title="职场怒气管理决策模型"></a>职场怒气管理决策模型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[产生怒气] --&gt; B&#123;价值评估&#125;</span><br><span class="line">    B --&gt;|公司价值&gt;情绪成本| C[理性处理]</span><br><span class="line">    B --&gt;|情绪成本&gt;公司价值| D[考虑离职]</span><br><span class="line">    C --&gt; E[三步处理法]</span><br><span class="line">    E --&gt; F[24小时冷静期]</span><br><span class="line">    E --&gt; G[结构化表达]</span><br><span class="line">    E --&gt; H[寻求第三方案]</span><br><span class="line">    D --&gt; I[优雅退出策略]</span><br></pre></td></tr></table></figure><h2 id="替代宣泄的方案（更职业的处理方式）"><a href="#替代宣泄的方案（更职业的处理方式）" class="headerlink" title="替代宣泄的方案（更职业的处理方式）"></a>替代宣泄的方案（更职业的处理方式）</h2><h3 id="1-结构化沟通模板"><a href="#1-结构化沟通模板" class="headerlink" title="1. 结构化沟通模板"></a>1. 结构化沟通模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 非暴力沟通四步法</span><br><span class="line">[观察] + [感受] + [需求] + [请求]</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">&quot;张总，最近三次方案讨论会上（观察），</span><br><span class="line">您都直接否定了我的提案（观察），</span><br><span class="line">这让我感到困惑和受挫（感受）。</span><br><span class="line">我希望能够更好地理解项目方向（需求），</span><br><span class="line">能否请您具体说明期望的方案标准？（请求）&quot;</span><br></pre></td></tr></table></figure><h3 id="2-情绪转化工具"><a href="#2-情绪转化工具" class="headerlink" title="2. 情绪转化工具"></a>2. 情绪转化工具</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 怒气值转化公式：</span><br><span class="line">有效行动 = (怒气能量 × 专业素养) / 情绪管理能力</span><br><span class="line"></span><br><span class="line">实施步骤：</span><br><span class="line">1. 将愤怒事项写入《职场事件记录本》</span><br><span class="line">2. 标注情绪触发点（言语/行为/场景）</span><br><span class="line">3. 分析背后需求（被尊重/被认可/公平性）</span><br><span class="line">4. 制定改进方案（沟通方式/工作方法）</span><br></pre></td></tr></table></figure><h3 id="3-安全宣泄渠道"><a href="#3-安全宣泄渠道" class="headerlink" title="3. 安全宣泄渠道"></a>3. 安全宣泄渠道</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 方式         | 执行要点                      | 效果持续时间 |</span><br><span class="line">|--------------|-----------------------------|------------|</span><br><span class="line">| 运动宣泄     | 拳击/跑步至力竭               | 4-6小时     |</span><br><span class="line">| 写作疗法     | 写永不发送的&quot;愤怒信&quot;           | 1-2天       |</span><br><span class="line">| 职业化应对   | 将矛盾转化为优化流程的提案      | 长期有效    |</span><br><span class="line">| 心理咨询     | 通过EAP服务进行专业疏导        | 持续改善    |</span><br></pre></td></tr></table></figure><h2 id="关键决策因素评估表"><a href="#关键决策因素评估表" class="headerlink" title="关键决策因素评估表"></a>关键决策因素评估表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">| 评估维度       | 宣泄怒气的风险值 | 理性沟通的收益值 |</span><br><span class="line">|----------------|------------------|------------------|</span><br><span class="line">| 职业形象       | ⚠️⚠️⚠️⚠️⚠️ (5/5) | ✅✅✅✅✅ (5/5)  |</span><br><span class="line">| 工作推进       | ⚠️⚠️⚠️ (3/5)    | ✅✅✅✅ (4/5)   |</span><br><span class="line">| 团队关系       | ⚠️⚠️⚠️⚠️ (4/5)  | ✅✅✅ (3/5)     |</span><br><span class="line">| 个人成长       | ⚠️⚠️ (2/5)      | ✅✅✅✅ (4/5)   |</span><br><span class="line">| 法律风险       | ⚠️⚠️⚠️⚠️ (4/5)  | ✅✅✅✅✅ (5/5)  |</span><br></pre></td></tr></table></figure><h2 id="建议执行方案"><a href="#建议执行方案" class="headerlink" title="建议执行方案"></a>建议执行方案</h2><ol><li><strong>48小时冷静法则</strong>：任何情绪事件发生后，强制等待2个工作日再采取行动</li><li><strong>预案演练</strong>：提前准备3套标准化应对话术（肯定&#x2F;否定&#x2F;模糊场景）</li><li><strong>建立支持系统</strong>：发展1-2位可信赖的职场导师&#x2F;HR联系人</li><li><strong>设置底线清单</strong>：明确写出3条绝对不可接受的行为红线（如人格侮辱）</li></ol><p>最终建议：把”怒气”转化为”改进工作流程的提案”，既能释放压力，又能提升职业价值。例如将「领导总是挑刺」转化为「建议建立项目评审标准文档」，把个人矛盾升级为流程优化问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面对职场矛盾，要不要宣泄怒气？？？&quot;&gt;&lt;a href=&quot;#面对职场矛盾，要不要宣泄怒气？？？&quot; class=&quot;headerlink&quot; title=&quot;面对职场矛盾，要不要宣泄怒气？？？&quot;&gt;&lt;/a&gt;面对职场矛盾，要不要宣泄怒气？？？&lt;/h1&gt;&lt;h2 id=&quot;职场怒气管</summary>
      
    
    
    
    <category term="职场" scheme="https://blogmind.cloud/categories/%E8%81%8C%E5%9C%BA/"/>
    
    
    <category term="职场" scheme="https://blogmind.cloud/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>2.15 前端面试复盘（一）</title>
    <link href="https://blogmind.cloud/2025/02/15/engine-pre/"/>
    <id>https://blogmind.cloud/2025/02/15/engine-pre/</id>
    <published>2025-02-15T04:00:00.000Z</published>
    <updated>2025-02-15T08:26:12.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试技术要点总结"><a href="#前端面试技术要点总结" class="headerlink" title="前端面试技术要点总结"></a>前端面试技术要点总结</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>您好，我是XX，26岁，本科学历，是一名拥有3年工作经验的前端开发工程师。我熟练掌握 Vue 全家桶，有 Vue2、Vue3 的实际项目开发经验。同时也具备 React 及其生态系统的开发经验，包括 Hooks、Redux&#x2F;Mobx 等状态管理方案。在工作经历中，我参与过企业中台系统、官网、数据可视化大屏等多个重要项目的开发。熟悉 Element UI、Ant Design 等主流组件库，对前端工程化有较深理解，能够熟练使用 Webpack、Vite 等构建工具进行项目优化。在可视化领域，我有丰富的 ECharts 使用经验。此外，我也参与过小程序和 APP 的开发工作。我注重代码质量和开发效率，有较强的业务理解能力和团队协作精神。目前正在寻找前端开发相关的工作机会，期望薪资范围在14-16k。</p><h2 id="离职原因"><a href="#离职原因" class="headerlink" title="离职原因"></a>离职原因</h2><p>“我上一家公司是集团的子公司，虽然有转正编的机会，但主要使用的是公司内部封闭的技术框架，这限制了我在主流技术方面的成长。考虑到个人的职业发展，我希望能到一个技术氛围更好的平台，接触更多业界主流的技术栈和项目，同时也期望能获得更好的发展机会。”</p><h2 id="项目难点与解决方案"><a href="#项目难点与解决方案" class="headerlink" title="项目难点与解决方案"></a>项目难点与解决方案</h2><h3 id="1-实时数据展示与性能优化"><a href="#1-实时数据展示与性能优化" class="headerlink" title="1. 实时数据展示与性能优化"></a>1. 实时数据展示与性能优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 使用 WebSocket 实现电力数据实时推送，保证数据实时性</span><br><span class="line">- 对接 MQTT 协议，处理大量设备的实时数据上报</span><br><span class="line">- 实现断线重连机制，保证数据连续性</span><br><span class="line">- 优化数据更新策略，避免频繁 DOM 更新导致的性能问题</span><br></pre></td></tr></table></figure><blockquote><p>关于 WebSocket 的详细实现，包括心跳检测、断线重连和黏包问题的解决方案，请参考 <a href="../engine-websocket">WebSocket 技术要点总结</a></p></blockquote><h3 id="2-复杂图表的性能优化"><a href="#2-复杂图表的性能优化" class="headerlink" title="2. 复杂图表的性能优化"></a>2. 复杂图表的性能优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 使用 WebWorker 处理分时图、K线图的大量数据计算</span><br><span class="line">- 将复杂的数据运算迁移到 Worker 线程，避免主线程阻塞</span><br><span class="line">- 实现图表数据的增量更新，优化渲染性能</span><br><span class="line">- 处理历史数据与实时数据的无缝衔接</span><br></pre></td></tr></table></figure><h3 id="3-数据处理与展示"><a href="#3-数据处理与展示" class="headerlink" title="3. 数据处理与展示"></a>3. 数据处理与展示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 使用 HQChart 实现各类专业图表（分时图、K线图）</span><br><span class="line">- 处理大量历史数据的加载和缓存策略</span><br><span class="line">- 实现图表的缩放、拖拽等交互功能</span><br><span class="line">- 优化图表更新频率，平衡实时性和性能</span><br></pre></td></tr></table></figure><h2 id="说说你封装的组件"><a href="#说说你封装的组件" class="headerlink" title="说说你封装的组件"></a>说说你封装的组件</h2><h3 id="1-高性能虚拟表格组件"><a href="#1-高性能虚拟表格组件" class="headerlink" title="1.  - 高性能虚拟表格组件"></a>1.  - 高性能虚拟表格组件</h3><p>在一个数据密集型的企业中台项目中，我封装了一个具有高性能、高复用性的虚拟表格组件 <code>VirtualTable</code>。这个组件解决了大数据量表格渲染的性能问题，支持多种复杂场景。</p><h4 id="核心功能特性"><a href="#核心功能特性" class="headerlink" title="核心功能特性"></a>核心功能特性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 虚拟滚动：只渲染可视区域的数据，支持10万+数据量的流畅渲染</span><br><span class="line">- 动态列配置：支持列的显示/隐藏、拖拽排序、列宽调整</span><br><span class="line">- 多级表头：支持复杂的多级表头配置</span><br><span class="line">- 自定义列：支持通过插槽自定义列的渲染内容</span><br><span class="line">- 固定列：支持左右列固定，处理阴影、同步滚动</span><br><span class="line">- 行/列合并：支持单元格合并，自动计算合并范围</span><br><span class="line">- 排序/筛选：支持本地和远程排序筛选，多列组合排序</span><br><span class="line">- 行选择：支持单选、多选、全选、反选</span><br><span class="line">- 展开行：支持行展开/收起，异步加载子数据</span><br><span class="line">- 树形数据：支持树形结构展示，懒加载子节点</span><br></pre></td></tr></table></figure><h4 id="关键技术实现"><a href="#关键技术实现" class="headerlink" title="关键技术实现"></a>关键技术实现</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;VirtualTable&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 表格数据</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 列配置</span></span><br><span class="line">    <span class="attr">columns</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 可视区域高度</span></span><br><span class="line">    <span class="attr">height</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">400</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 行高</span></span><br><span class="line">    <span class="attr">rowHeight</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">40</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 固定列配置</span></span><br><span class="line">    <span class="attr">fixedColumns</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">left</span>: [], <span class="attr">right</span>: [] &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否开启多选</span></span><br><span class="line">    <span class="attr">selectable</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否显示展开行</span></span><br><span class="line">    <span class="attr">expandable</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 可视区域起始索引</span></span><br><span class="line">      <span class="attr">startIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 可视区域结束索引</span></span><br><span class="line">      <span class="attr">endIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// 缓冲区大小（上下各预留的行数）</span></span><br><span class="line">      <span class="attr">buffer</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="comment">// 选中行的 key 集合</span></span><br><span class="line">      <span class="attr">selectedKeys</span>: <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">      <span class="comment">// 展开行的 key 集合</span></span><br><span class="line">      <span class="attr">expandedKeys</span>: <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">      <span class="comment">// 列宽调整状态</span></span><br><span class="line">      <span class="attr">resizing</span>: &#123;</span><br><span class="line">        <span class="attr">column</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">startX</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 列拖拽状态</span></span><br><span class="line">      <span class="attr">dragging</span>: &#123;</span><br><span class="line">        <span class="attr">column</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">targetIndex</span>: -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算可视区域应该渲染的数据</span></span><br><span class="line">    <span class="title function_">visibleData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> start = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">startIndex</span> - <span class="variable language_">this</span>.<span class="property">buffer</span>)</span><br><span class="line">      <span class="keyword">const</span> end = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>, <span class="variable language_">this</span>.<span class="property">endIndex</span> + <span class="variable language_">this</span>.<span class="property">buffer</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">slice</span>(start, end).<span class="title function_">map</span>(<span class="function">(<span class="params">row, index</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...row,</span><br><span class="line">        <span class="attr">_index</span>: start + index <span class="comment">// 保存真实索引</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算表格内容总高度</span></span><br><span class="line">    <span class="title function_">totalHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">rowHeight</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算固定列样式</span></span><br><span class="line">    <span class="title function_">fixedColumnStyles</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; left, right &#125; = <span class="variable language_">this</span>.<span class="property">fixedColumns</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">left</span>: left.<span class="title function_">reduce</span>(<span class="function">(<span class="params">styles, col, index</span>) =&gt;</span> &#123;</span><br><span class="line">          styles[col.<span class="property">key</span>] = &#123; <span class="attr">left</span>: <span class="string">`<span class="subst">$&#123;index * <span class="variable language_">this</span>.columnWidth&#125;</span>px`</span> &#125;</span><br><span class="line">          <span class="keyword">return</span> styles</span><br><span class="line">        &#125;, &#123;&#125;),</span><br><span class="line">        <span class="attr">right</span>: right.<span class="title function_">reduce</span>(<span class="function">(<span class="params">styles, col, index</span>) =&gt;</span> &#123;</span><br><span class="line">          styles[col.<span class="property">key</span>] = &#123; <span class="attr">right</span>: <span class="string">`<span class="subst">$&#123;index * <span class="variable language_">this</span>.columnWidth&#125;</span>px`</span> &#125;</span><br><span class="line">          <span class="keyword">return</span> styles</span><br><span class="line">        &#125;, &#123;&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 处理滚动事件（使用 RAF 优化）</span></span><br><span class="line">    <span class="title function_">handleScroll</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollRAF</span>) <span class="title function_">cancelAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">scrollRAF</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollRAF</span> = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; scrollTop, scrollLeft &#125; = e.<span class="property">target</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算当前的起始索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startIndex</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(scrollTop / <span class="variable language_">this</span>.<span class="property">rowHeight</span>)</span><br><span class="line">        <span class="comment">// 计算当前的结束索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">endIndex</span> = <span class="variable language_">this</span>.<span class="property">startIndex</span> + <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">height</span> / <span class="variable language_">this</span>.<span class="property">rowHeight</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 同步固定列的滚动位置</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">syncFixedScroll</span>(scrollLeft)</span><br><span class="line">        <span class="comment">// 更新内容区域的位移</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updatePosition</span>(scrollTop)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新内容区域的位移（使用 transform 优化性能）</span></span><br><span class="line">    <span class="title function_">updatePosition</span>(<span class="params">scrollTop</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> transform = <span class="string">`translate3d(0, <span class="subst">$&#123;scrollTop&#125;</span>px, 0)`</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">content</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新固定列位置</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hasFixedColumns</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">leftFixed</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">rightFixed</span>.<span class="property">style</span>.<span class="property">transform</span> = transform</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理列宽调整</span></span><br><span class="line">    <span class="title function_">handleColumnResize</span>(<span class="params">column, event</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">resizing</span> = &#123;</span><br><span class="line">        column,</span><br><span class="line">        <span class="attr">startX</span>: event.<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">startWidth</span>: column.<span class="property">width</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onColumnResizing</span>)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onColumnResizeEnd</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列宽调整过程</span></span><br><span class="line">    <span class="title function_">onColumnResizing</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">resizing</span>.<span class="property">column</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> &#123; column, startX, startWidth &#125; = <span class="variable language_">this</span>.<span class="property">resizing</span></span><br><span class="line">      <span class="keyword">const</span> diff = event.<span class="property">clientX</span> - startX</span><br><span class="line">      <span class="keyword">const</span> newWidth = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">100</span>, startWidth + diff)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新列宽</span></span><br><span class="line">      column.<span class="property">width</span> = newWidth</span><br><span class="line">      <span class="comment">// 触发列宽变化事件</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;column-resize&#x27;</span>, column)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理行选择</span></span><br><span class="line">    <span class="title function_">handleRowSelect</span>(<span class="params">row, selected</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = row[<span class="variable language_">this</span>.<span class="property">rowKey</span>]</span><br><span class="line">      <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedKeys</span>.<span class="title function_">add</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedKeys</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;selection-change&#x27;</span>, <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">selectedKeys</span>))</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理展开行</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleRowExpand</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = row[<span class="variable language_">this</span>.<span class="property">rowKey</span>]</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 支持异步加载子数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loadChildrenData</span> &amp;&amp; !row.<span class="property">children</span>) &#123;</span><br><span class="line">          row.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            row.<span class="property">children</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadChildrenData</span>(row)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            row.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expandedKeys</span>.<span class="title function_">add</span>(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理排序</span></span><br><span class="line">    <span class="title function_">handleSort</span>(<span class="params">column</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!column.<span class="property">sortable</span>) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 支持多列排序</span></span><br><span class="line">      <span class="keyword">const</span> sortState = <span class="variable language_">this</span>.<span class="property">sortStates</span>[column.<span class="property">key</span>] || &#123; <span class="attr">order</span>: <span class="string">&#x27;none&#x27;</span> &#125;</span><br><span class="line">      <span class="keyword">const</span> nextOrder = <span class="variable language_">this</span>.<span class="title function_">getNextSortOrder</span>(sortState.<span class="property">order</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">sortStates</span>, column.<span class="property">key</span>, &#123; <span class="attr">order</span>: nextOrder &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">remote</span>) &#123;</span><br><span class="line">        <span class="comment">// 远程排序</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;sort-change&#x27;</span>, <span class="variable language_">this</span>.<span class="property">sortStates</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 本地排序</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">localSort</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地排序实现</span></span><br><span class="line">    <span class="title function_">localSort</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> sortColumns = <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="variable language_">this</span>.<span class="property">sortStates</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function">(<span class="params">[, state]</span>) =&gt;</span> state.<span class="property">order</span> !== <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (sortColumns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">displayData</span> = [...<span class="variable language_">this</span>.<span class="property">data</span>]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">displayData</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [key, state] <span class="keyword">of</span> sortColumns) &#123;</span><br><span class="line">          <span class="keyword">const</span> column = <span class="variable language_">this</span>.<span class="property">columnMap</span>[key]</span><br><span class="line">          <span class="keyword">const</span> compareResult = <span class="variable language_">this</span>.<span class="title function_">compare</span>(a[key], b[key], column.<span class="property">sortMethod</span>)</span><br><span class="line">          <span class="keyword">if</span> (compareResult !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">order</span> === <span class="string">&#x27;asc&#x27;</span> ? compareResult : -compareResult</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用函数式组件优化行渲染</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">TableRow</span>: &#123;</span><br><span class="line">      <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">props</span>: [<span class="string">&#x27;row&#x27;</span>, <span class="string">&#x27;columns&#x27;</span>, <span class="string">&#x27;rowIndex&#x27;</span>],</span><br><span class="line">      <span class="title function_">render</span>(<span class="params">h, &#123; props, scopedSlots &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; row, columns, rowIndex &#125; = props</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;tr&#x27;</span>, &#123; <span class="attr">key</span>: row[rowKey] &#125;,</span><br><span class="line">          columns.<span class="title function_">map</span>(<span class="function"><span class="params">column</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理自定义列模板</span></span><br><span class="line">            <span class="keyword">if</span> (scopedSlots[column.<span class="property">key</span>]) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, &#123;&#125;, [</span><br><span class="line">                scopedSlots[column.<span class="property">key</span>](&#123; row, column, <span class="attr">index</span>: rowIndex &#125;)</span><br><span class="line">              ])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认渲染</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;td&#x27;</span>, &#123;&#125;, [row[column.<span class="property">key</span>]])</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="性能优化措施"><a href="#性能优化措施" class="headerlink" title="性能优化措施"></a>性能优化措施</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. 虚拟滚动核心算法优化：</span><br><span class="line">   - 使用 transform 代替 top 定位，避免重排</span><br><span class="line">   - 实现缓冲区机制，提升滚动体验</span><br><span class="line">   - 使用 RAF 优化滚动事件处理</span><br><span class="line">   - 固定列同步滚动优化</span><br><span class="line">   - 滚动过程中延迟非必要更新</span><br><span class="line"></span><br><span class="line">2. 渲染性能优化：</span><br><span class="line">   - 使用 Vue 的函数式组件渲染表格行</span><br><span class="line">   - 关键数据使用 Object.freeze 冻结</span><br><span class="line">   - 合理使用 v-show 和 v-if</span><br><span class="line">   - 列宽调整使用 transform 实现</span><br><span class="line">   - 优化重绘区域，避免整表重绘</span><br><span class="line">   </span><br><span class="line">3. 内存优化：</span><br><span class="line">   - 实现数据分片加载</span><br><span class="line">   - 及时清理不可见区域的 DOM</span><br><span class="line">   - 使用事件委托优化事件处理</span><br><span class="line">   - 优化大数据量排序算法</span><br><span class="line">   - 按需加载展开行数据</span><br><span class="line"></span><br><span class="line">4. 用户体验优化：</span><br><span class="line">   - 添加列宽调整时的视觉反馈</span><br><span class="line">   - 优化固定列的阴影效果</span><br><span class="line">   - 实现平滑的滚动效果</span><br><span class="line">   - 添加加载状态和空数据提示</span><br><span class="line">   - 支持键盘快捷操作</span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;virtual-table</span><br><span class="line">    :data=&quot;tableData&quot;</span><br><span class="line">    :columns=&quot;columns&quot;</span><br><span class="line">    :height=&quot;500&quot;</span><br><span class="line">    :row-height=&quot;40&quot;</span><br><span class="line">    :fixed-columns=&quot;&#123; left: [&#x27;selection&#x27;], right: [&#x27;operation&#x27;] &#125;&quot;</span><br><span class="line">    :selectable=&quot;true&quot;</span><br><span class="line">    :expandable=&quot;true&quot;</span><br><span class="line">    @sort-change=&quot;handleSortChange&quot;</span><br><span class="line">    @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">    @row-expand=&quot;handleRowExpand&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 自定义展开行内容 --&gt;</span><br><span class="line">    &lt;template #expand=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;expand-content&quot;&gt;</span><br><span class="line">        &#123;&#123; row.description &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 自定义操作列 --&gt;</span><br><span class="line">    &lt;template #operation=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleEdit(row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;handleDelete(row)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/virtual-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">      columns: [</span><br><span class="line">        &#123; type: &#x27;selection&#x27;, width: 60, fixed: &#x27;left&#x27; &#125;,</span><br><span class="line">        &#123; key: &#x27;name&#x27;, title: &#x27;名称&#x27;, sortable: true &#125;,</span><br><span class="line">        &#123; key: &#x27;age&#x27;, title: &#x27;年龄&#x27;, sortable: true &#125;,</span><br><span class="line">        &#123; key: &#x27;address&#x27;, title: &#x27;地址&#x27;, width: 300 &#125;,</span><br><span class="line">        &#123; key: &#x27;operation&#x27;, title: &#x27;操作&#x27;, width: 150, fixed: &#x27;right&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async loadData() &#123;</span><br><span class="line">      // 模拟加载 10 万条数据</span><br><span class="line">      this.tableData = Array.from(&#123; length: 100000 &#125;, (_, index) =&gt; (&#123;</span><br><span class="line">        id: index,</span><br><span class="line">        name: `用户 $&#123;index&#125;`,</span><br><span class="line">        age: Math.floor(Math.random() * 100),</span><br><span class="line">        address: `地址 $&#123;index&#125;`</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这个组件在实际项目中显著提升了大数据量表格的渲染性能，将10万条数据的渲染时间从原来的3-4秒优化到了200ms以内，同时保持内存占用在合理范围内。该组件已在多个项目中复用，大大提高了开发效率。</p><p>主要应用场景：</p><ol><li>大数据量表格展示（10万+数据）</li><li>复杂的数据操作界面（多选、排序、筛选）</li><li>实时数据更新的监控页面</li><li>树形结构数据展示</li><li>需要高性能表格的企业级应用</li></ol><h2 id="说说你知道的HOC组件"><a href="#说说你知道的HOC组件" class="headerlink" title="说说你知道的HOC组件"></a>说说你知道的HOC组件</h2><h3 id="Vue2-中的-HOC-实现"><a href="#Vue2-中的-HOC-实现" class="headerlink" title="Vue2 中的 HOC 实现"></a>Vue2 中的 HOC 实现</h3><h4 id="1-权限控制-HOC"><a href="#1-权限控制-HOC" class="headerlink" title="1. 权限控制 HOC"></a>1. 权限控制 HOC</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withPermission.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withPermission</span>(<span class="params">WrappedComponent, permission</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithPermission&#x27;</span>,</span><br><span class="line">    <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="title class_">WrappedComponent</span>.<span class="property">props</span>,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; props, data &#125; = context</span><br><span class="line">      <span class="keyword">const</span> hasPermission = <span class="title function_">checkPermission</span>(permission)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;无权限访问&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span>, &#123;</span><br><span class="line">        ...data,</span><br><span class="line">        props</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PageWithPermission</span> = <span class="title function_">withPermission</span>(<span class="title class_">UserList</span>, <span class="string">&#x27;user:view&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-数据加载-HOC"><a href="#2-数据加载-HOC" class="headerlink" title="2. 数据加载 HOC"></a>2. 数据加载 HOC</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withLoading.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withLoading</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithLoading&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">fetchData</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Function</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">error</span> = err</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loading</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;Loading...&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">error</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">`Error: <span class="subst">$&#123;<span class="variable language_">this</span>.error.message&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span>, &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">          ...<span class="variable language_">this</span>.<span class="property">$props</span>,</span><br><span class="line">          <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserListWithLoading</span> = <span class="title function_">withLoading</span>(<span class="title class_">UserList</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue3-中的-HOC-实现"><a href="#Vue3-中的-HOC-实现" class="headerlink" title="Vue3 中的 HOC 实现"></a>Vue3 中的 HOC 实现</h3><h4 id="1-组合式-API-的权限控制-HOC"><a href="#1-组合式-API-的权限控制-HOC" class="headerlink" title="1. 组合式 API 的权限控制 HOC"></a>1. 组合式 API 的权限控制 HOC</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withPermission.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withPermission&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  <span class="attr">permission</span>: <span class="built_in">string</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithPermission&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hasPermission = <span class="title function_">checkPermission</span>(permission)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;无权限访问&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, props)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PageWithPermission</span> = <span class="title function_">withPermission</span>(<span class="title class_">UserList</span>, <span class="string">&#x27;user:view&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-响应式数据加载-HOC"><a href="#2-响应式数据加载-HOC" class="headerlink" title="2. 响应式数据加载 HOC"></a>2. 响应式数据加载 HOC</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withAsync.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withAsync&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, D = <span class="built_in">any</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  <span class="attr">fetchData</span>: <span class="function">() =&gt;</span> <span class="title class_">Promise</span>&lt;D&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithAsync&#x27;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line">      <span class="keyword">const</span> error = ref&lt;<span class="title class_">Error</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">const</span> data = ref&lt;D | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">          data.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchData</span>()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          error.<span class="property">value</span> = err <span class="keyword">as</span> <span class="title class_">Error</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loading.<span class="property">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;Loading...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">`Error: <span class="subst">$&#123;error.value.message&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, &#123; <span class="attr">data</span>: data.<span class="property">value</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserListWithAsync</span> = <span class="title function_">withAsync</span>(<span class="title class_">UserList</span>, fetchUserList)</span><br></pre></td></tr></table></figure><h4 id="3-性能优化-HOC"><a href="#3-性能优化-HOC" class="headerlink" title="3. 性能优化 HOC"></a>3. 性能优化 HOC</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withMemo.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, defineComponent, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> withMemo&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="title class_">WrappedComponent</span>: T,</span><br><span class="line">  propsAreEqual = <span class="function">(<span class="params"><span class="attr">prevProps</span>: <span class="built_in">any</span>, <span class="attr">nextProps</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(prevProps).<span class="title function_">every</span>(<span class="function"><span class="params">key</span> =&gt;</span> prevProps[key] === nextProps[key])</span><br><span class="line">  &#125;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;WithMemo&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;memoProps&#x27;</span>],</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> computedProps = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">memoProps</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">WrappedComponent</span> <span class="keyword">as</span> <span class="built_in">any</span>, computedProps.<span class="property">value</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">propsAreEqual</span>(<span class="variable language_">this</span>.<span class="property">$props</span>.<span class="property">memoProps</span>, <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">propsData</span>?.<span class="property">memoProps</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedComponent</span> = <span class="title function_">withMemo</span>(<span class="title class_">ExpensiveComponent</span>)</span><br></pre></td></tr></table></figure><h3 id="HOC-的优缺点"><a href="#HOC-的优缺点" class="headerlink" title="HOC 的优缺点"></a>HOC 的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 代码复用：将通用逻辑抽象到 HOC 中</span><br><span class="line">2. 关注点分离：将横切关注点从组件中抽离</span><br><span class="line">3. 无侵入性：不修改原组件的情况下扩展功能</span><br><span class="line">4. 灵活性：可以组合多个 HOC</span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 组件层级嵌套：多个 HOC 组合会产生多层嵌套</span><br><span class="line">2. props 命名冲突：多个 HOC 可能使用相同的 prop 名</span><br><span class="line">3. 静态方法丢失：需要手动处理静态方法的拷贝</span><br><span class="line">4. 调试困难：组件层级增加，调试变得复杂</span><br></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 使用组合式 API 替代简单的 HOC</span><br><span class="line">2. 合理使用 HOC 和组合式 API</span><br><span class="line">3. 使用 displayName 提高调试体验</span><br><span class="line">4. 避免在 render 方法中使用 HOC</span><br><span class="line">5. 向下传递不相关的 props</span><br><span class="line">6. 使用 compose 函数组合多个 HOC</span><br></pre></td></tr></table></figure><p>这些 HOC 组件在实际项目中主要用于：</p><ol><li>权限控制</li><li>数据加载和错误处理</li><li>性能优化</li><li>日志记录和监控</li><li>组件状态管理</li><li>主题和样式注入</li></ol><h2 id="小程序的发布流程"><a href="#小程序的发布流程" class="headerlink" title="小程序的发布流程"></a>小程序的发布流程</h2><h3 id="1-开发环境配置"><a href="#1-开发环境配置" class="headerlink" title="1. 开发环境配置"></a>1. 开发环境配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置项目的基本信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;miniprogram&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;小程序项目&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;wx123456789&quot;</span>,</span><br><span class="line">  <span class="string">&quot;projectname&quot;</span>: <span class="string">&quot;miniprogram-demo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-开发调试"><a href="#2-开发调试" class="headerlink" title="2. 开发调试"></a>2. 开发调试</h3><ul><li>使用微信开发者工具进行本地开发和调试</li><li>真机预览功能测试</li><li>自动化测试和单元测试</li></ul><h3 id="3-上传发布流程"><a href="#3-上传发布流程" class="headerlink" title="3. 上传发布流程"></a>3. 上传发布流程</h3><ol><li><p>代码上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 在开发者工具中点击&quot;上传&quot;</span><br><span class="line">- 填写版本号和备注信息</span><br><span class="line">- 选择开发分支</span><br></pre></td></tr></table></figure></li><li><p>提交审核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 登录小程序管理后台</span><br><span class="line">- 选择版本提交审核</span><br><span class="line">- 填写审核资料（功能介绍、测试账号等）</span><br><span class="line">- 等待审核结果（一般1-7天）</span><br></pre></td></tr></table></figure></li><li><p>发布上线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 审核通过后可以发布</span><br><span class="line">- 选择发布时间（立即/定时）</span><br><span class="line">- 灰度发布策略设置</span><br><span class="line">- 监控上线状态</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-版本管理"><a href="#4-版本管理" class="headerlink" title="4. 版本管理"></a>4. 版本管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 线上版本：对外发布的正式版本</span><br><span class="line">- 体验版本：内部测试使用</span><br><span class="line">- 开发版本：本地开发环境</span><br></pre></td></tr></table></figure><h2 id="小程序的主包和分包组件调用"><a href="#小程序的主包和分包组件调用" class="headerlink" title="小程序的主包和分包组件调用"></a>小程序的主包和分包组件调用</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><h4 id="主包"><a href="#主包" class="headerlink" title="主包"></a>主包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 主包配置</span></span><br><span class="line">  <span class="string">&quot;window&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;backgroundTextStyle&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;WeChat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;navigationBarTextStyle&quot;</span>: <span class="string">&quot;black&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pages&quot;</span>: [<span class="string">&quot;pages/index/index&quot;</span>],</span><br><span class="line">  <span class="string">&quot;subpackages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageA&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/cat/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/dog/index&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;root&quot;</span>: <span class="string">&quot;packageB&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;pages/apple/index&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pages/banana/index&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-组件调用方式"><a href="#2-组件调用方式" class="headerlink" title="2. 组件调用方式"></a>2. 组件调用方式</h3><h4 id="主包调用分包组件"><a href="#主包调用分包组件" class="headerlink" title="主包调用分包组件"></a>主包调用分包组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分包组件定义 (packageA/components/custom/index.js)</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onTap</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主包页面使用 (pages/index/index.json)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;custom&quot;</span>: <span class="string">&quot;/packageA/components/custom/index&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主包页面模板 (pages/index/index.wxml)</span></span><br><span class="line">&lt;custom title=<span class="string">&quot;测试&quot;</span> <span class="attr">bind</span>:click=<span class="string">&quot;handleClick&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="分包间组件调用"><a href="#分包间组件调用" class="headerlink" title="分包间组件调用"></a>分包间组件调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packageA 组件定义</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="title class_">Object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// packageB 页面使用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;component-a&quot;</span>: <span class="string">&quot;/packageA/components/component/index&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-性能优化建议"><a href="#3-性能优化建议" class="headerlink" title="3. 性能优化建议"></a>3. 性能优化建议</h3><ol><li><p>合理分包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 按功能模块划分包体</span><br><span class="line">- 控制单个分包大小（建议&lt;2MB）</span><br><span class="line">- 避免分包间过度依赖</span><br></pre></td></tr></table></figure></li><li><p>组件复用优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 公共组件放主包</span><br><span class="line">- 分包特有组件放分包</span><br><span class="line">- 使用组件模板提高复用性</span><br></pre></td></tr></table></figure></li><li><p>加载策略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预加载分包</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;preloadRule&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;network&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="string">&quot;packages&quot;</span>: [<span class="string">&quot;packageA&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分包异步化</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadSubpackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> wx.<span class="title function_">loadSubpackage</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;packageA&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;分包加载成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>资源管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 图片等静态资源按需分包</span><br><span class="line">- 使用 CDN 加速资源加载</span><br><span class="line">- 合理使用本地缓存</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端面试技术要点总结&quot;&gt;&lt;a href=&quot;#前端面试技术要点总结&quot; class=&quot;headerlink&quot; title=&quot;前端面试技术要点总结&quot;&gt;&lt;/a&gt;前端面试技术要点总结&lt;/h1&gt;&lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端开发" scheme="https://blogmind.cloud/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="技术面试" scheme="https://blogmind.cloud/tags/%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>微前端子应用如何部署？</title>
    <link href="https://blogmind.cloud/2025/02/15/micro-micro-deploy/"/>
    <id>https://blogmind.cloud/2025/02/15/micro-micro-deploy/</id>
    <published>2025-02-14T16:09:00.000Z</published>
    <updated>2025-02-12T16:43:14.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微前端子应用如何部署？"><a href="#微前端子应用如何部署？" class="headerlink" title="微前端子应用如何部署？"></a>微前端子应用如何部署？</h1><p>微前端子应用的部署方案主要有以下几种：</p><h2 id="1-独立部署模式"><a href="#1-独立部署模式" class="headerlink" title="1. 独立部署模式"></a>1. 独立部署模式</h2><p>这是最常见的部署方式，每个子应用独立部署到不同的服务器或 CDN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用配置</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;https://app1.example.com&#x27;</span>, <span class="comment">// 独立域名</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;https://app2.example.com&#x27;</span>, <span class="comment">// 独立域名</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>部署流程：</p><ol><li>子应用单独打包</li><li>部署到独立的服务器&#x2F;CDN</li><li>主应用配置对应的 entry 地址</li></ol><p>优点：</p><ul><li>部署独立，互不影响</li><li>可以使用不同的 CDN</li><li>便于独立扩展和维护</li></ul><p>缺点：</p><ul><li>需要管理多个部署地址</li><li>跨域问题需要处理</li></ul><h2 id="2-同域部署模式"><a href="#2-同域部署模式" class="headerlink" title="2. 同域部署模式"></a>2. 同域部署模式</h2><p>所有子应用部署在同一个域名下的不同目录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;/subapps/app1/&#x27;</span>, <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;/subapps/app2/&#x27;</span>, <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/www/</span><br><span class="line">  ├── index.html      <span class="comment"># 主应用</span></span><br><span class="line">  ├── subapps/</span><br><span class="line">  │   ├── app1/      <span class="comment"># 子应用1</span></span><br><span class="line">  │   └── app2/      <span class="comment"># 子应用2</span></span><br><span class="line">  └── nginx.conf</span><br></pre></td></tr></table></figure><p>Nginx 配置示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主应用</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /www;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子应用1</span></span><br><span class="line">    <span class="section">location</span> /subapps/app1/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /www/subapps/app1/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /subapps/app1/index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子应用2</span></span><br><span class="line">    <span class="section">location</span> /subapps/app2/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /www/subapps/app2/;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /subapps/app2/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>不存在跨域问题</li><li>部署管理更简单</li><li>资源共享更方便</li></ul><p>缺点：</p><ul><li>所有应用耦合在一起</li><li>单点故障风险</li><li>扩展性较差</li></ul><h2 id="3-动态部署模式"><a href="#3-动态部署模式" class="headerlink" title="3. 动态部署模式"></a>3. 动态部署模式</h2><p>通过配置中心动态管理子应用的部署地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置中心返回的数据结构</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">apps</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">APP1_ENTRY</span> || <span class="string">&#x27;https://app1.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">      <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">APP2_ENTRY</span> || <span class="string">&#x27;https://app2.example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">      <span class="attr">activeRule</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用动态注册</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/micro-config&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">registerMicroApps</span>(config.<span class="property">apps</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置中心实现示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config-server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/micro-config&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">apps</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">        <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> </span><br><span class="line">          ? <span class="string">&#x27;https://cdn.example.com/app1&#x27;</span> </span><br><span class="line">          : <span class="string">&#x27;http://localhost:8081&#x27;</span>,</span><br><span class="line">        <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">        <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...其他应用配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-CI-CD-配置示例"><a href="#4-CI-CD-配置示例" class="headerlink" title="4. CI&#x2F;CD 配置示例"></a>4. CI&#x2F;CD 配置示例</h2><p>使用 GitLab CI 进行自动化部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子应用构建</span></span><br><span class="line"><span class="attr">build-subapp:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到测试环境</span></span><br><span class="line"><span class="attr">deploy-test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@test-server:/www/subapps/app1/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到生产环境</span></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">aws</span> <span class="string">s3</span> <span class="string">sync</span> <span class="string">dist/</span> <span class="string">s3://prod-bucket/app1/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>环境配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">development</span>: &#123;</span><br><span class="line">    <span class="attr">app1</span>: <span class="string">&#x27;http://localhost:8081&#x27;</span>,</span><br><span class="line">    <span class="attr">app2</span>: <span class="string">&#x27;http://localhost:8082&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">production</span>: &#123;</span><br><span class="line">    <span class="attr">app1</span>: <span class="string">&#x27;https://cdn.example.com/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">app2</span>: <span class="string">&#x27;https://cdn.example.com/app2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;[process.<span class="property">env</span>.<span class="property">NODE_ENV</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>公共依赖处理</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.example.com/vendor/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.example.com/vendor/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>健康检查</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子应用入口添加健康检查接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/health&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;ok&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>部署检查清单</strong></p></li></ol><ul><li>确保所有静态资源路径正确</li><li>检查跨域配置</li><li>验证公共依赖加载</li><li>测试应用间通信</li><li>确认环境变量配置</li><li>验证路由是否正常</li></ul><p>通过合理选择部署方案并遵循最佳实践，可以使微前端应用的部署更加可靠和高效。选择哪种部署方式主要取决于团队规模、技术栈、基础设施等因素。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微前端子应用如何部署？&quot;&gt;&lt;a href=&quot;#微前端子应用如何部署？&quot; class=&quot;headerlink&quot; title=&quot;微前端子应用如何部署？&quot;&gt;&lt;/a&gt;微前端子应用如何部署？&lt;/h1&gt;&lt;p&gt;微前端子应用的部署方案主要有以下几种：&lt;/p&gt;
&lt;h2 id=&quot;1-</summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="部署" scheme="https://blogmind.cloud/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="微前端" scheme="https://blogmind.cloud/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>qiankun如何实现css隔离？</title>
    <link href="https://blogmind.cloud/2025/02/14/micro-css-isolation/"/>
    <id>https://blogmind.cloud/2025/02/14/micro-css-isolation/</id>
    <published>2025-02-13T16:09:00.000Z</published>
    <updated>2025-02-12T16:16:25.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qiankun如何实现css隔离？"><a href="#qiankun如何实现css隔离？" class="headerlink" title="qiankun如何实现css隔离？"></a>qiankun如何实现css隔离？</h1><p>qiankun 提供了三种 CSS 隔离方案，用于解决微应用之间的样式冲突问题：</p><h2 id="1-Shadow-DOM-隔离"><a href="#1-Shadow-DOM-隔离" class="headerlink" title="1. Shadow DOM 隔离"></a>1. Shadow DOM 隔离</h2><p>这是最严格的隔离方式，通过 Web Components 的 Shadow DOM 特性实现完全隔离。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">strictStyleIsolation</span>: <span class="literal">true</span> <span class="comment">// 开启 Shadow DOM 隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>工作原理：</p><ul><li>为微应用的容器创建一个 Shadow DOM</li><li>微应用的所有内容都在 Shadow DOM 中运行</li><li>CSS 完全隔离，内部样式不会影响外部，外部样式也不会影响内部</li></ul><p>优缺点：</p><ul><li>优点：完全隔离，互不影响</li><li>缺点：<ul><li>一些第三方库可能不兼容</li><li>弹窗类组件可能无法正常工作</li><li>部分老浏览器不支持</li></ul></li></ul><h2 id="2-动态样式表前缀隔离"><a href="#2-动态样式表前缀隔离" class="headerlink" title="2. 动态样式表前缀隔离"></a>2. 动态样式表前缀隔离</h2><p>这是 qiankun 默认的隔离方式，通过为每个微应用的样式添加特定前缀来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span> <span class="comment">// 开启样式前缀隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>工作原理：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 原始样式 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换后 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[data-qiankun-app1]</span> <span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure><ul><li>为微应用容器添加特定的 data 属性</li><li>动态处理所有样式规则，为选择器添加容器前缀</li><li>确保样式只在微应用内部生效</li></ul><p>优缺点：</p><ul><li>优点：<ul><li>兼容性好</li><li>实现相对简单</li><li>性能损耗小</li></ul></li><li>缺点：<ul><li>可能存在一些特殊选择器处理的边界情况</li><li>不能完全隔离，比如 body 上的样式</li></ul></li></ul><h2 id="3-手动样式隔离"><a href="#3-手动样式隔离" class="headerlink" title="3. 手动样式隔离"></a>3. 手动样式隔离</h2><p>不使用 qiankun 的隔离方案，而是通过开发规范和构建工具来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">true</span>, <span class="comment">// 启用 CSS Modules</span></span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">less</span>: &#123;</span><br><span class="line">        <span class="attr">modifyVars</span>: &#123;</span><br><span class="line">          <span class="comment">// 添加特定前缀</span></span><br><span class="line">          <span class="string">&#x27;@prefix&#x27;</span>: <span class="string">&#x27;app1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方案：</p><ol><li><p><strong>CSS Modules</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 源码 */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构建后 */</span></span><br><span class="line"><span class="selector-class">.app1_title_hash</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>BEM 命名规范</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app1-component__element--modifier</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>CSS-in-JS</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StyledComponent</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .title &#123;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><strong>选择合适的隔离方案</strong></li></ol><ul><li>如果对隔离要求严格，使用 Shadow DOM</li><li>如果需要兼容性，使用动态样式表前缀</li><li>如果项目规范好，可以考虑手动隔离</li></ul><ol start="2"><li><strong>注意事项</strong></li></ol><ul><li>避免使用全局选择器（*）</li><li>减少标签选择器的使用</li><li>合理使用 CSS 权重</li><li>注意处理第三方组件库的样式</li></ul><ol start="3"><li><strong>常见问题解决</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理动态生成的样式</span></span><br><span class="line"><span class="keyword">const</span> dynamicStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">dynamicStyle.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-qiankun-app1&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">dynamicStyle.<span class="property">textContent</span> = <span class="string">&#x27;.dynamic &#123; color: blue; &#125;&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(dynamicStyle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理第三方组件弹窗</span></span><br><span class="line"><span class="comment">// 在主应用中预留弹窗容器</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;modal-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><p>通过合理使用这些隔离方案，可以有效避免微应用之间的样式冲突，保证应用的稳定运行。选择哪种方案主要取决于项目的具体需求、浏览器兼容性要求以及团队的开发规范。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;qiankun如何实现css隔离？&quot;&gt;&lt;a href=&quot;#qiankun如何实现css隔离？&quot; class=&quot;headerlink&quot; title=&quot;qiankun如何实现css隔离？&quot;&gt;&lt;/a&gt;qiankun如何实现css隔离？&lt;/h1&gt;&lt;p&gt;qiankun 提供</summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="最佳实践" scheme="https://blogmind.cloud/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="微前端" scheme="https://blogmind.cloud/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>qiankun如何实现js隔离？</title>
    <link href="https://blogmind.cloud/2025/02/13/micro-snapshotSandbox/"/>
    <id>https://blogmind.cloud/2025/02/13/micro-snapshotSandbox/</id>
    <published>2025-02-12T16:09:00.000Z</published>
    <updated>2025-02-12T16:43:20.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qiankun如何实现js隔离？"><a href="#qiankun如何实现js隔离？" class="headerlink" title="qiankun如何实现js隔离？"></a>qiankun如何实现js隔离？</h1><p>qiankun 提供了两种 JavaScript 隔离方式：</p><ol><li><strong>快照沙箱 (SnapshotSandbox)</strong></li></ol><ul><li>适用于单实例场景</li><li>工作原理：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnapshotSandbox</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">windowSnapshot</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 激活沙箱</span></span><br><span class="line">  <span class="title function_">active</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 保存当前 window 状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop] = <span class="variable language_">window</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 恢复之前的状态</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">prop</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>[prop] = <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>[prop];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 退出沙箱</span></span><br><span class="line">  <span class="title function_">inactive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 记录更改的状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">window</span>[prop] !== <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modifyPropsMap</span>[prop] = <span class="variable language_">window</span>[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 还原 window 状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>[prop] = <span class="variable language_">this</span>.<span class="property">windowSnapshot</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>代理沙箱 (ProxySandbox)</strong></li></ol><ul><li>适用于多实例场景</li><li>工作原理：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxySandbox</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fakeWindow = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">target, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">        target[prop] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">(<span class="params">target, prop</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 优先从 fake window 中取值</span></span><br><span class="line">        <span class="keyword">return</span> prop <span class="keyword">in</span> target ? target[prop] : <span class="variable language_">window</span>[prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">proxy</span> = proxy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>主要隔离原理：</p><ol><li><strong>快照沙箱</strong>：</li></ol><ul><li>进入微应用时保存主应用的 window 状态</li><li>恢复微应用的 window 状态</li><li>退出微应用时保存微应用的 window 状态</li><li>恢复主应用的 window 状态</li></ul><ol start="2"><li><strong>代理沙箱</strong>：</li></ol><ul><li>为每个微应用创建一个独立的 fakeWindow</li><li>通过 Proxy 代理对 window 对象的访问</li><li>所有对 window 的修改都会被限制在 fakeWindow 中</li><li>读取时会先从 fakeWindow 查找，找不到再从真实 window 中查找</li></ul><p>使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 qiankun 配置中开启 js 沙箱</span></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app1&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">sandbox</span>: &#123;</span><br><span class="line">        <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span>, <span class="comment">// 开启样式隔离</span></span><br><span class="line">        <span class="attr">strictStyleIsolation</span>: <span class="literal">false</span>,      <span class="comment">// 严格的样式隔离</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>需要注意的点：</p><ol><li>快照沙箱只适合单实例应用，因为多个实例会相互影响</li><li>代理沙箱性能更好，且支持多实例，是更推荐的方案</li><li>某些特殊场景可能需要关闭沙箱：<ul><li>使用一些特殊的第三方库</li><li>需要跨应用共享变量</li></ul></li><li>沙箱机制可能无法完全隔离某些复杂的全局污染</li></ol><p>这就是 qiankun 实现 JavaScript 隔离的核心机制。通过这种方式，可以有效防止微应用之间的 JavaScript 代码相互污染。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;qiankun如何实现js隔离？&quot;&gt;&lt;a href=&quot;#qiankun如何实现js隔离？&quot; class=&quot;headerlink&quot; title=&quot;qiankun如何实现js隔离？&quot;&gt;&lt;/a&gt;qiankun如何实现js隔离？&lt;/h1&gt;&lt;p&gt;qiankun 提供了两种 </summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="最佳实践" scheme="https://blogmind.cloud/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="微前端" scheme="https://blogmind.cloud/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>什么是CI/CD？</title>
    <link href="https://blogmind.cloud/2025/02/12/micro-ci-cd/"/>
    <id>https://blogmind.cloud/2025/02/12/micro-ci-cd/</id>
    <published>2025-02-11T16:09:00.000Z</published>
    <updated>2025-02-12T16:42:50.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是CI-CD？"><a href="#什么是CI-CD？" class="headerlink" title="什么是CI&#x2F;CD？"></a>什么是CI&#x2F;CD？</h1><p>CI&#x2F;CD 是一种现代软件开发实践，它包含两个主要概念：持续集成（Continuous Integration）和持续交付&#x2F;部署（Continuous Delivery&#x2F;Deployment）。</p><h2 id="持续集成（CI）"><a href="#持续集成（CI）" class="headerlink" title="持续集成（CI）"></a>持续集成（CI）</h2><p>持续集成是指开发人员频繁地将代码集成到主干分支的过程。</p><h3 id="CI-的主要步骤"><a href="#CI-的主要步骤" class="headerlink" title="CI 的主要步骤"></a>CI 的主要步骤</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml CI配置示例</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lint</span>      <span class="comment"># 代码检查</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span>      <span class="comment"># 单元测试</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span>     <span class="comment"># 构建</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lint-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br></pre></td></tr></table></figure><h3 id="CI-的核心功能"><a href="#CI-的核心功能" class="headerlink" title="CI 的核心功能"></a>CI 的核心功能</h3><ol><li><p><strong>自动化构建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常见的构建命令</span></span><br><span class="line">npm run build</span><br><span class="line">yarn build</span><br><span class="line">pnpm build</span><br></pre></td></tr></table></figure></li><li><p><strong>自动化测试</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jest 测试示例</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Calculator&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>代码质量检查</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESLint 配置示例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="持续交付-部署（CD）"><a href="#持续交付-部署（CD）" class="headerlink" title="持续交付&#x2F;部署（CD）"></a>持续交付&#x2F;部署（CD）</h2><p>持续交付&#x2F;部署是将软件自动发布到生产环境的过程。</p><h3 id="CD-的部署流程"><a href="#CD-的部署流程" class="headerlink" title="CD 的部署流程"></a>CD 的部署流程</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整的 CI/CD 流水线示例</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-prod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@test-server:/var/www/app/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-prod</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span> <span class="string">-av</span> <span class="string">dist/</span> <span class="string">user@prod-server:/var/www/app/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span>  <span class="comment"># 手动触发生产环境部署</span></span><br></pre></td></tr></table></figure><h3 id="CD-的主要特点"><a href="#CD-的主要特点" class="headerlink" title="CD 的主要特点"></a>CD 的主要特点</h3><ol><li><p><strong>环境管理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环境配置示例</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">development</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;http://dev-api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">staging</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;http://staging-api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">production</span>: &#123;</span><br><span class="line">    <span class="attr">api</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>自动化部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署脚本示例</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Deploying to <span class="variable">$ENV</span> environment...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份当前版本</span></span><br><span class="line"><span class="built_in">cp</span> -r /var/www/app /var/www/app_backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署新版本</span></span><br><span class="line">rsync -av dist/ /var/www/app/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 健康检查</span></span><br><span class="line"><span class="keyword">if</span> curl -s <span class="string">&quot;https://<span class="variable">$DOMAIN</span>/health&quot;</span> | grep -q <span class="string">&quot;ok&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Deploy successful!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Deploy failed! Rolling back...&quot;</span></span><br><span class="line">    <span class="built_in">cp</span> -r /var/www/app_backup /var/www/app</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="CI-CD-的优势"><a href="#CI-CD-的优势" class="headerlink" title="CI&#x2F;CD 的优势"></a>CI&#x2F;CD 的优势</h2><ol><li><strong>提高开发效率</strong></li></ol><ul><li>自动化构建和测试</li><li>快速发现并修复问题</li><li>减少手动操作错误</li></ul><ol start="2"><li><p><strong>保证代码质量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交前的代码检查</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pre-push&quot;</span>: <span class="string">&quot;npm test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>快速迭代</strong></p></li></ol><ul><li>频繁、小批量的发布</li><li>降低发布风险</li><li>快速获取用户反馈</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>分支管理策略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git Flow 工作流</span></span><br><span class="line">main      <span class="comment"># 生产环境分支</span></span><br><span class="line">develop   <span class="comment"># 开发环境分支</span></span><br><span class="line">feature/* <span class="comment"># 功能分支</span></span><br><span class="line">release/* <span class="comment"># 发布分支</span></span><br><span class="line">hotfix/*  <span class="comment"># 热修复分支</span></span><br></pre></td></tr></table></figure></li><li><p><strong>版本控制</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard-version&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>监控和告警</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部署后的监控</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/metrics&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;healthy&#x27;</span>,</span><br><span class="line">    <span class="attr">uptime</span>: process.<span class="title function_">uptime</span>(),</span><br><span class="line">    <span class="attr">memory</span>: process.<span class="title function_">memoryUsage</span>(),</span><br><span class="line">    <span class="attr">cpu</span>: process.<span class="title function_">cpuUsage</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>回滚机制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本回滚脚本</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">rollback</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> version=<span class="variable">$1</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Rolling back to version <span class="variable">$version</span>...&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 从备份恢复</span></span><br><span class="line">  aws s3 <span class="built_in">cp</span> s3://backups/app-<span class="variable">$version</span>.zip .</span><br><span class="line">  unzip app-<span class="variable">$version</span>.zip -d /var/www/app</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 更新数据库版本</span></span><br><span class="line">  npm run migrate:rollback</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过实施 CI&#x2F;CD，团队可以：</p><ul><li>更快地交付价值</li><li>提高代码质量</li><li>减少人为错误</li><li>增强团队协作</li><li>提升用户满意度</li></ul><p>选择合适的 CI&#x2F;CD 工具和流程，对于提高团队的开发效率和产品质量至关重要。常见的 CI&#x2F;CD 工具包括：Jenkins、GitLab CI、GitHub Actions、Circle CI 等。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是CI-CD？&quot;&gt;&lt;a href=&quot;#什么是CI-CD？&quot; class=&quot;headerlink&quot; title=&quot;什么是CI&amp;#x2F;CD？&quot;&gt;&lt;/a&gt;什么是CI&amp;#x2F;CD？&lt;/h1&gt;&lt;p&gt;CI&amp;#x2F;CD 是一种现代软件开发实践，它包含两个主要概念</summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="DevOps" scheme="https://blogmind.cloud/tags/DevOps/"/>
    
    <category term="部署" scheme="https://blogmind.cloud/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="最佳实践" scheme="https://blogmind.cloud/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>如何部署和使用公司组件库？</title>
    <link href="https://blogmind.cloud/2025/02/11/micro-component-deploy/"/>
    <id>https://blogmind.cloud/2025/02/11/micro-component-deploy/</id>
    <published>2025-02-10T16:09:00.000Z</published>
    <updated>2025-02-12T16:43:03.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何部署和使用公司组件库？"><a href="#如何部署和使用公司组件库？" class="headerlink" title="如何部署和使用公司组件库？"></a>如何部署和使用公司组件库？</h1><p>本文介绍如何部署和使用公司内部组件库，包括发布流程、使用方式和最佳实践。</p><h2 id="1-组件库发布"><a href="#1-组件库发布" class="headerlink" title="1. 组件库发布"></a>1. 组件库发布</h2><h3 id="1-1-发布准备"><a href="#1-1-发布准备" class="headerlink" title="1.1 发布准备"></a>1.1 发布准备</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@company/vue-components&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dist&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; npm publish&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-私有仓库配置"><a href="#1-2-私有仓库配置" class="headerlink" title="1.2 私有仓库配置"></a>1.2 私有仓库配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .npmrc</span></span><br><span class="line">registry=http://npm.company.com</span><br><span class="line">@company:registry=http://npm.company.com</span><br><span class="line">//npm.company.com/:_authToken=<span class="variable">$&#123;NPM_TOKEN&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-发布流程"><a href="#1-3-发布流程" class="headerlink" title="1.3 发布流程"></a>1.3 发布流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 更新版本号</span></span><br><span class="line">npm version patch  <span class="comment"># 修订版本</span></span><br><span class="line">npm version minor  <span class="comment"># 次版本</span></span><br><span class="line">npm version major  <span class="comment"># 主版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构建并发布</span></span><br><span class="line">npm run release</span><br></pre></td></tr></table></figure><h2 id="2-组件库使用"><a href="#2-组件库使用" class="headerlink" title="2. 组件库使用"></a>2. 组件库使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm i @company/vue-components -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># pnpm</span></span><br><span class="line">pnpm add @company/vue-components</span><br></pre></td></tr></table></figure><h3 id="2-2-完整引入"><a href="#2-2-完整引入" class="headerlink" title="2.2 完整引入"></a>2.2 完整引入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyUI</span> <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/style.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">MyUI</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-按需引入"><a href="#2-3-按需引入" class="headerlink" title="2.3 按需引入"></a>2.3 按需引入</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// 自定义组件解析器</span></span><br><span class="line">        <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (name.<span class="title function_">startsWith</span>(<span class="string">&#x27;My&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">              name,</span><br><span class="line">              <span class="attr">from</span>: <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-主题定制"><a href="#3-主题定制" class="headerlink" title="3. 主题定制"></a>3. 主题定制</h2><h3 id="3-1-CSS-变量覆盖"><a href="#3-1-CSS-变量覆盖" class="headerlink" title="3.1 CSS 变量覆盖"></a>3.1 CSS 变量覆盖</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在项目的根样式文件中覆盖变量 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#f60</span>;</span><br><span class="line">  <span class="attr">--border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-运行时配置"><a href="#3-2-运行时配置" class="headerlink" title="3.2 运行时配置"></a>3.2 运行时配置</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; setTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态设置主题</span></span><br><span class="line"><span class="title function_">setTheme</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;primary-color&#x27;</span>: <span class="string">&#x27;#f60&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><h3 id="4-1-版本管理"><a href="#4-1-版本管理" class="headerlink" title="4.1 版本管理"></a>4.1 版本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package.json 中锁定版本</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@company/vue-components&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>  <span class="comment"># 使用 ^ 允许次版本更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 .npmrc 配置源</span></span><br><span class="line">save-exact=<span class="literal">true</span>  <span class="comment"># 锁定具体版本</span></span><br></pre></td></tr></table></figure><h3 id="4-2-按需加载优化"><a href="#4-2-按需加载优化" class="headerlink" title="4.2 按需加载优化"></a>4.2 按需加载优化</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 组件按需加载</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 样式按需加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/button.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/input.css&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-类型支持"><a href="#4-3-类型支持" class="headerlink" title="4.3 类型支持"></a>4.3 类型支持</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@company/vue-components/types&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h2><h3 id="5-1-版本冲突"><a href="#5-1-版本冲突" class="headerlink" title="5.1 版本冲突"></a>5.1 版本冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查已安装版本</span></span><br><span class="line">npm <span class="built_in">ls</span> @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装指定版本</span></span><br><span class="line">npm i @company/vue-components@1.0.0</span><br></pre></td></tr></table></figure><h3 id="5-2-样式问题"><a href="#5-2-样式问题" class="headerlink" title="5.2 样式问题"></a>5.2 样式问题</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 确保样式文件已引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@company/vue-components/dist/style.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 检查样式优先级</span></span><br><span class="line"><span class="comment">// 在组件上添加自定义类名覆盖样式</span></span><br><span class="line">&lt;my-button <span class="keyword">class</span>=<span class="string">&quot;custom-button&quot;</span>&gt;按钮&lt;/my-button&gt;</span><br><span class="line"></span><br><span class="line">.<span class="property">custom</span>-button &#123;</span><br><span class="line">  <span class="comment">/* 自定义样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-按需加载失败"><a href="#5-3-按需加载失败" class="headerlink" title="5.3 按需加载失败"></a>5.3 按需加载失败</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 检查构建配置</span></span><br><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [<span class="string">&#x27;@company/vue-components/es/button&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 检查组件引入方式</span></span><br><span class="line"><span class="comment">// ✅ 正确方式</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components&#x27;</span></span><br><span class="line"><span class="comment">// ❌ 错误方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@company/vue-components/button&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-升级指南"><a href="#6-升级指南" class="headerlink" title="6. 升级指南"></a>6. 升级指南</h2><ol><li><strong>升级前准备</strong></li></ol><ul><li>查看更新日志</li><li>测试环境验证</li><li>准备回滚方案</li></ul><ol start="2"><li><p><strong>升级步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 更新依赖</span></span><br><span class="line">npm update @company/vue-components</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 检查破坏性更新</span></span><br><span class="line">npm run <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 按需修改代码</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意事项</strong></p></li></ol><ul><li>主版本升级需要关注破坏性更新</li><li>升级后需要完整回归测试</li><li>建议渐进式升级，避免跨多个版本</li></ul><p>通过以上内容，可以帮助团队更好地使用和维护组件库。持续关注组件库的更新和问题反馈，确保组件库的稳定性和可用性。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何部署和使用公司组件库？&quot;&gt;&lt;a href=&quot;#如何部署和使用公司组件库？&quot; class=&quot;headerlink&quot; title=&quot;如何部署和使用公司组件库？&quot;&gt;&lt;/a&gt;如何部署和使用公司组件库？&lt;/h1&gt;&lt;p&gt;本文介绍如何部署和使用公司内部组件库，包括发布流程、</summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="部署" scheme="https://blogmind.cloud/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
    <category term="组件库" scheme="https://blogmind.cloud/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>如何开发公司基建组件库？</title>
    <link href="https://blogmind.cloud/2025/02/10/micro-component-library/"/>
    <id>https://blogmind.cloud/2025/02/10/micro-component-library/</id>
    <published>2025-02-09T16:09:00.000Z</published>
    <updated>2025-02-12T16:42:57.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何开发公司基建组件库？"><a href="#如何开发公司基建组件库？" class="headerlink" title="如何开发公司基建组件库？"></a>如何开发公司基建组件库？</h1><p>组件库是前端基础建设中的重要一环，一个好的组件库可以提高开发效率、统一用户体验。本文将介绍如何基于 Vue 3 开发一个企业级组件库。</p><h2 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h2><h3 id="1-1-技术选型"><a href="#1-1-技术选型" class="headerlink" title="1.1 技术选型"></a>1.1 技术选型</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.69.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vitest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-tsc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Vite-配置"><a href="#1-2-Vite-配置" class="headerlink" title="1.2 Vite 配置"></a>1.2 Vite 配置</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/index.ts&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MyLib&#x27;</span>,</span><br><span class="line">      <span class="attr">fileName</span>: <span class="function">(<span class="params">format</span>) =&gt;</span> <span class="string">`index.<span class="subst">$&#123;format&#125;</span>.js`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-组件开发规范"><a href="#2-组件开发规范" class="headerlink" title="2. 组件开发规范"></a>2. 组件开发规范</h2><h3 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my-components/</span><br><span class="line">├── src/</span><br><span class="line">│   ├── components/     <span class="comment"># 组件目录</span></span><br><span class="line">│   │   ├── button/    </span><br><span class="line">│   │   │   ├── index.ts</span><br><span class="line">│   │   │   ├── button.vue</span><br><span class="line">│   │   │   └── __tests__/</span><br><span class="line">│   │   └── input/</span><br><span class="line">│   ├── hooks/         <span class="comment"># 组合式函数</span></span><br><span class="line">│   ├── utils/         <span class="comment"># 工具函数</span></span><br><span class="line">│   └── styles/        <span class="comment"># 全局样式</span></span><br><span class="line">├── docs/              <span class="comment"># 文档</span></span><br><span class="line">└── example/           <span class="comment"># 示例</span></span><br></pre></td></tr></table></figure><h3 id="2-2-组件示例"><a href="#2-2-组件示例" class="headerlink" title="2.2 组件示例"></a>2.2 组件示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- src/components/button/button.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    :class=&quot;[</span><br><span class="line">      &#x27;my-button&#x27;,</span><br><span class="line">      `my-button--$&#123;type&#125;`,</span><br><span class="line">      `my-button--$&#123;size&#125;`,</span><br><span class="line">      &#123; &#x27;is-disabled&#x27;: disabled &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    @click=&quot;handleClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface Props &#123;</span><br><span class="line">  type?: &#x27;primary&#x27; | &#x27;default&#x27; | &#x27;text&#x27;</span><br><span class="line">  size?: &#x27;small&#x27; | &#x27;medium&#x27; | &#x27;large&#x27;</span><br><span class="line">  disabled?: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  type: &#x27;default&#x27;,</span><br><span class="line">  size: &#x27;medium&#x27;,</span><br><span class="line">  disabled: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;click&#x27;, event: MouseEvent): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const handleClick = (event: MouseEvent) =&gt; &#123;</span><br><span class="line">  if (!props.disabled) &#123;</span><br><span class="line">    emit(&#x27;click&#x27;, event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.my-button &#123;</span><br><span class="line">  border: none;</span><br><span class="line">  padding: 8px 16px;</span><br><span class="line">  border-radius: 4px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  </span><br><span class="line">  &amp;--primary &#123;</span><br><span class="line">    background: var(--primary-color);</span><br><span class="line">    color: white;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;--default &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;.is-disabled &#123;</span><br><span class="line">    opacity: 0.5;</span><br><span class="line">    cursor: not-allowed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-样式方案"><a href="#3-样式方案" class="headerlink" title="3. 样式方案"></a>3. 样式方案</h2><h3 id="3-1-CSS-变量"><a href="#3-1-CSS-变量" class="headerlink" title="3.1 CSS 变量"></a>3.1 CSS 变量</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/styles/variables.scss</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">// 主题色</span></span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attr">--success-color</span>: <span class="number">#52c41a</span>;</span><br><span class="line">  <span class="attr">--warning-color</span>: <span class="number">#faad14</span>;</span><br><span class="line">  <span class="attr">--danger-color</span>: <span class="number">#f5222d</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 文字颜色</span></span><br><span class="line">  <span class="attr">--text-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attr">--text-color-secondary</span>: <span class="number">#666</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 间距</span></span><br><span class="line">  <span class="attr">--spacing-small</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--spacing-medium</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attr">--spacing-large</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-主题定制"><a href="#3-2-主题定制" class="headerlink" title="3.2 主题定制"></a>3.2 主题定制</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/theme.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setTheme</span>(<span class="params"><span class="attr">theme</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">entries</span>(theme).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">`--<span class="subst">$&#123;key&#125;</span>`</span>, value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="title function_">setTheme</span>(&#123;</span><br><span class="line">  <span class="string">&#x27;primary-color&#x27;</span>: <span class="string">&#x27;#f60&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;text-color&#x27;</span>: <span class="string">&#x27;#222&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-单元测试"><a href="#4-单元测试" class="headerlink" title="4. 单元测试"></a>4. 单元测试</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/button/__tests__/button.test.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; describe, it, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;vitest&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;../button.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Button&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;renders slot content&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>, &#123;</span><br><span class="line">      <span class="attr">slots</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;Click me&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">text</span>()).<span class="title function_">toBe</span>(<span class="string">&#x27;Click me&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;emits click event when not disabled&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>)</span><br><span class="line">    <span class="keyword">await</span> wrapper.<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>(<span class="string">&#x27;click&#x27;</span>)).<span class="title function_">toBeTruthy</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;does not emit click event when disabled&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Button</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">disabled</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> wrapper.<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>(<span class="string">&#x27;click&#x27;</span>)).<span class="title function_">toBeFalsy</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-发布配置"><a href="#5-发布配置" class="headerlink" title="5. 发布配置"></a>5. 发布配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@company/vue-components&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dist&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;.&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.es.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.umd.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;./dist/style.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/style.css&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vitest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc --noEmit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><ol><li><strong>组件设计原则</strong></li></ol><ul><li>保持组件的单一职责</li><li>提供合理的默认值</li><li>支持主题定制</li><li>完善的类型定义</li><li>详细的 Props 文档</li></ul><ol start="2"><li><strong>性能优化</strong></li></ol><ul><li>合理使用 computed 和 watch</li><li>避免不必要的组件渲染</li><li>按需加载组件</li><li>提供 Tree Shaking 支持</li></ul><ol start="3"><li><strong>开发建议</strong></li></ol><ul><li>统一的代码风格</li><li>完整的测试覆盖</li><li>规范的 Git 提交信息</li><li>及时的文档更新</li><li>版本号语义化管理</li></ul><p>通过以上实践，可以搭建一个高质量的 Vue 组件库。持续维护和迭代，根据用户反馈不断优化，才能打造一个好用的企业级组件库。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何开发公司基建组件库？&quot;&gt;&lt;a href=&quot;#如何开发公司基建组件库？&quot; class=&quot;headerlink&quot; title=&quot;如何开发公司基建组件库？&quot;&gt;&lt;/a&gt;如何开发公司基建组件库？&lt;/h1&gt;&lt;p&gt;组件库是前端基础建设中的重要一环，一个好的组件库可以提高开发</summary>
      
    
    
    
    <category term="前端" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="架构" scheme="https://blogmind.cloud/categories/%E5%89%8D%E7%AB%AF/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
    <category term="组件库" scheme="https://blogmind.cloud/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
    <category term="基建" scheme="https://blogmind.cloud/tags/%E5%9F%BA%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何理性看待AI发展：一把双刃剑</title>
    <link href="https://blogmind.cloud/2025/02/06/ai-ai-development-perspective/"/>
    <id>https://blogmind.cloud/2025/02/06/ai-ai-development-perspective/</id>
    <published>2025-02-05T16:00:00.000Z</published>
    <updated>2025-02-07T08:24:37.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人工智能(AI)正以前所未有的速度发展，从ChatGPT到DALL-E，从自动驾驶到智能医疗，AI技术正在重塑我们的生活方式和工作模式。作为21世纪最具革命性的技术之一，AI就像一把双刃剑，既能创造巨大价值，也可能带来意想不到的挑战。本文将深入分析AI发展的方方面面，帮助我们以更理性的态度看待AI技术的发展。</p><h2 id="AI发展的积极影响"><a href="#AI发展的积极影响" class="headerlink" title="AI发展的积极影响"></a>AI发展的积极影响</h2><h3 id="1-效率提升"><a href="#1-效率提升" class="headerlink" title="1. 效率提升"></a>1. 效率提升</h3><ul><li><p><strong>工作自动化</strong></p><ul><li>自动处理重复性文档工作，提高办公效率</li><li>智能客服24小时在线，提升服务质量</li><li>工业自动化生产，提高产能和精确度</li></ul></li><li><p><strong>决策优化</strong></p><ul><li>大数据分析辅助决策，降低决策风险</li><li>预测模型提供决策参考，提高准确率</li><li>实时数据处理，支持快速响应</li></ul></li><li><p><strong>资源配置</strong></p><ul><li>智能调度系统优化物流配送</li><li>能源使用智能管理，降低资源浪费</li><li>智能算法优化人力资源分配</li></ul></li></ul><h3 id="2-创新突破"><a href="#2-创新突破" class="headerlink" title="2. 创新突破"></a>2. 创新突破</h3><ul><li><p><strong>医疗健康</strong></p><ul><li>AI辅助诊断提高疾病识别准确率</li><li>药物研发周期大幅缩短</li><li>个性化治疗方案制定</li><li>远程医疗服务普及</li></ul></li><li><p><strong>科研进展</strong></p><ul><li>加速科学计算和模拟</li><li>发现新材料和新物质</li><li>气候变化预测更准确</li><li>空间探索取得新突破</li></ul></li><li><p><strong>产品创新</strong></p><ul><li>智能产品快速迭代</li><li>个性化定制更便捷</li><li>新产品研发周期缩短</li><li>用户体验持续优化</li></ul></li></ul><h3 id="3-生活改善"><a href="#3-生活改善" class="headerlink" title="3. 生活改善"></a>3. 生活改善</h3><ul><li><p><strong>智能家居</strong></p><ul><li>家电智能控制，提升生活便利性</li><li>能源使用更环保高效</li><li>居家安全保障增强</li><li>老人和儿童照护更周到</li></ul></li><li><p><strong>教育革新</strong></p><ul><li>个性化学习计划制定</li><li>教育资源普惠化</li><li>在线教育更加智能</li><li>终身学习更加便捷</li></ul></li><li><p><strong>娱乐体验</strong></p><ul><li>游戏体验更加真实</li><li>虚拟现实技术提升</li><li>内容创作更加丰富</li><li>个性化推荐更准确</li></ul></li></ul><h2 id="AI发展的潜在风险"><a href="#AI发展的潜在风险" class="headerlink" title="AI发展的潜在风险"></a>AI发展的潜在风险</h2><h3 id="1-就业冲击"><a href="#1-就业冲击" class="headerlink" title="1. 就业冲击"></a>1. 就业冲击</h3><ul><li><p><strong>岗位替代</strong></p><ul><li>基础性工作岗位加速消失</li><li>传统行业面临转型压力</li><li>就业结构急剧变化</li></ul></li><li><p><strong>技能挑战</strong></p><ul><li>现有技能快速过时</li><li>新技能学习压力增大</li><li>职业转型难度加大</li></ul></li><li><p><strong>就业市场变化</strong></p><ul><li>人才需求结构性失衡</li><li>就业竞争加剧</li><li>收入差距可能扩大</li></ul></li></ul><h3 id="2-伦理挑战"><a href="#2-伦理挑战" class="headerlink" title="2. 伦理挑战"></a>2. 伦理挑战</h3><ul><li><p><strong>隐私安全</strong></p><ul><li>个人数据被过度收集</li><li>隐私边界日益模糊</li><li>数据安全风险增加</li><li>个人信息滥用问题</li></ul></li><li><p><strong>算法公平</strong></p><ul><li>AI决策可能存在偏见</li><li>算法歧视问题</li><li>责任归属难以界定</li><li>社会公平受到挑战</li></ul></li><li><p><strong>人机关系</strong></p><ul><li>人类自主性可能受限</li><li>过度依赖AI的风险</li><li>人际关系疏离化</li><li>心理健康新挑战</li></ul></li></ul><h3 id="3-社会影响"><a href="#3-社会影响" class="headerlink" title="3. 社会影响"></a>3. 社会影响</h3><ul><li><p><strong>数字鸿沟</strong></p><ul><li>贫富差距可能扩大</li><li>教育资源获取不均</li><li>技术普及度差异</li><li>区域发展不平衡</li></ul></li><li><p><strong>社会结构</strong></p><ul><li>传统社会关系改变</li><li>社会价值观转变</li><li>文化传承面临挑战</li><li>社会治理新课题</li></ul></li></ul><h2 id="如何理性应对"><a href="#如何理性应对" class="headerlink" title="如何理性应对"></a>如何理性应对</h2><h3 id="1-个人层面"><a href="#1-个人层面" class="headerlink" title="1. 个人层面"></a>1. 个人层面</h3><ul><li><p><strong>终身学习</strong></p><ul><li>持续更新知识储备</li><li>培养跨领域能力</li><li>提升数字化素养</li><li>保持学习积极性</li></ul></li><li><p><strong>能力培养</strong></p><ul><li>强化创造性思维</li><li>提升批判性思考</li><li>发展情商和共情能力</li><li>培养人机协作能力</li></ul></li></ul><h3 id="2-社会层面"><a href="#2-社会层面" class="headerlink" title="2. 社会层面"></a>2. 社会层面</h3><ul><li><p><strong>制度建设</strong></p><ul><li>完善AI伦理准则</li><li>建立监管框架</li><li>保护个人权益</li><li>促进公平发展</li></ul></li><li><p><strong>教育改革</strong></p><ul><li>更新教育理念</li><li>改革课程体系</li><li>加强技能培训</li><li>普及AI教育</li></ul></li></ul><h3 id="3-发展方向"><a href="#3-发展方向" class="headerlink" title="3. 发展方向"></a>3. 发展方向</h3><ul><li><p><strong>以人为本</strong></p><ul><li>强调技术向善</li><li>注重人文关怀</li><li>维护人类尊严</li><li>促进共同发展</li></ul></li><li><p><strong>可持续发展</strong></p><ul><li>平衡效率与公平</li><li>注重环境保护</li><li>促进包容性增长</li><li>维护社会稳定</li></ul></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>AI发展是一把真正的双刃剑，它既能带来前所未有的发展机遇，也可能产生难以预料的风险。关键在于我们如何趋利避害，在享受技术红利的同时，也要未雨绸缪，防范潜在风险。</p><p>我们需要以开放、包容但审慎的态度拥抱AI技术，在个人、企业和社会层面都要做好充分准备。只有正确认识和把握这把双刃剑，在发展中坚持以人为本，注重可持续发展，我们才能在AI时代走得更稳、走得更远。</p><p>让我们携手共建一个人机协作、互惠共赢的美好未来。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;人工智能(AI)正以前所未有的速度发展，从ChatGPT到DALL-E，从自动驾驶到智能医疗，AI技术正在重塑我们的生活方式和工作模式。作为</summary>
      
    
    
    
    <category term="AI" scheme="https://blogmind.cloud/categories/AI/"/>
    
    
    <category term="AI" scheme="https://blogmind.cloud/tags/AI/"/>
    
    <category term="人工智能" scheme="https://blogmind.cloud/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="技术发展" scheme="https://blogmind.cloud/tags/%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95/"/>
    
    <category term="AI伦理" scheme="https://blogmind.cloud/tags/AI%E4%BC%A6%E7%90%86/"/>
    
    <category term="未来发展" scheme="https://blogmind.cloud/tags/%E6%9C%AA%E6%9D%A5%E5%8F%91%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>你了解axios的原理吗？有看过它的源码吗？</title>
    <link href="https://blogmind.cloud/2025/02/03/vue-axiosCode/"/>
    <id>https://blogmind.cloud/2025/02/03/vue-axiosCode/</id>
    <published>2025-02-03T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.105Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/1564f7d0-4662-11eb-ab90-d9ae814b240d.png"></p><h2 id="一、axios的使用"><a href="#一、axios的使用" class="headerlink" title="一、axios的使用"></a>一、axios的使用</h2><p>关于<code>axios</code>的基本使用，上篇文章已经有所涉及，这里再稍微回顾下：</p><p><strong>发送请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(config) <span class="comment">// 直接传入配置</span></span><br><span class="line"><span class="title function_">axios</span>(url[, config]) <span class="comment">// 传入url和配置</span></span><br><span class="line">axios[method](url[, option]) <span class="comment">// 直接调用请求方式方法，传入url和配置</span></span><br><span class="line">axios[method](url[, data[, option]]) <span class="comment">// 直接调用请求方式方法，传入data、url和配置</span></span><br><span class="line">axios.<span class="title function_">request</span>(option) <span class="comment">// 调用 request 方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.<span class="title function_">create</span>(config)</span><br><span class="line"><span class="comment">// axiosInstance 也具有以上 axios 的能力</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([axiosInstance1, axiosInstance2]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(response1, response2))</span><br><span class="line"><span class="comment">// 调用 all 和传入 spread 回调</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>请求拦截器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写发送请求前处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写发送请求错误相关的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>响应拦截器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写得到响应数据后处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里写得到错误响应处理的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>取消请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;xxxx&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 取消请求 (请求原因是可选的)</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;主动取消请求&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;xxxx&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">cancel</span>(<span class="string">&#x27;主动取消请求&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、实现一个简易版axios"><a href="#二、实现一个简易版axios" class="headerlink" title="二、实现一个简易版axios"></a>二、实现一个简易版axios</h2><p>构建一个<code>Axios</code>构造函数，核心代码为<code>request</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;url = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;get&#x27;</span>, data = &#123;&#125;&#125; = config;</span><br><span class="line">            <span class="comment">// 发送ajax请求</span></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.<span class="title function_">send</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出<code>axios</code>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终导出axios的方法，即实例的request方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">    <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">    <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到最后的全局变量axios</span></span><br><span class="line"><span class="keyword">let</span> axios = <span class="title class_">CreateAxiosFn</span>();</span><br></pre></td></tr></table></figure><p>上述就已经能够实现<code>axios(&#123; &#125;)</code>这种方式的请求</p><p>下面是来实现下<code>axios.method()</code>这种形式的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义get,post...方法，挂在到Axios原型上</span></span><br><span class="line"><span class="keyword">const</span> methodsArr = [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;post&#x27;</span>];</span><br><span class="line">methodsArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">met</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[met] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行&#x27;</span>+met+<span class="string">&#x27;方法&#x27;</span>);</span><br><span class="line">        <span class="comment">// 处理单个方法</span></span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>].<span class="title function_">includes</span>(met)) &#123; <span class="comment">// 2个参数(url[, config])</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: met,</span><br><span class="line">                <span class="attr">url</span>: <span class="variable language_">arguments</span>[<span class="number">0</span>],</span><br><span class="line">                ...<span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 3个参数(url[,data[,config]])</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">method</span>: met,</span><br><span class="line">                <span class="attr">url</span>: <span class="variable language_">arguments</span>[<span class="number">0</span>],</span><br><span class="line">                <span class="attr">data</span>: <span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;,</span><br><span class="line">                ...<span class="variable language_">arguments</span>[<span class="number">2</span>] || &#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将<code>Axios.prototype</code>上的方法搬运到<code>request</code>上</p><p>首先实现个工具类，实现将<code>b</code>方法混入到<code>a</code>，并且修改<code>this</code>指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = &#123;</span><br><span class="line">  <span class="title function_">extend</span>(<span class="params">a,b, context</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (b.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> b[key] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          a[key] = b[key].<span class="title function_">bind</span>(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          a[key] = b[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改导出的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">  <span class="comment">// 增加代码</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, axios)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建拦截器的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterceptorsManage</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">use</span>(<span class="params">fullfield, rejected</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      fullfield,</span><br><span class="line">      rejected</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>axios.interceptors.response.use</code>和<code>axios.interceptors.request.use</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Axios</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 新增代码</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">            <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorsManage</span>,</span><br><span class="line">            <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorsManage</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line"> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行语句<code>axios.interceptors.response.use</code>和<code>axios.interceptors.request.use</code>的时候，实现获取<code>axios</code>实例上的<code>interceptors</code>对象，然后再获取<code>response</code>或<code>request</code>拦截器，再执行对应的拦截器的<code>use</code>方法</p><p>把<code>Axios</code>上的方法和属性搬到<code>request</code>过去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CreateAxiosFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> axios = <span class="keyword">new</span> <span class="title class_">Axios</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> req = axios.<span class="property">request</span>.<span class="title function_">bind</span>(axios);</span><br><span class="line">  <span class="comment">// 混入方法， 处理axios的request方法，使之拥有get,post...方法</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, axios)</span><br><span class="line">  <span class="comment">// 新增代码</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(req, axios)</span><br><span class="line">  <span class="keyword">return</span> req;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>request</code>也有了<code>interceptors</code>对象，在发送请求的时候，会先获取<code>request</code>拦截器的<code>handlers</code>的方法来执行</p><p>首先将执行<code>ajax</code>的请求封装成一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">sendAjax</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sendAjax</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;url = <span class="string">&#x27;&#x27;</span>, method = <span class="string">&#x27;get&#x27;</span>, data = &#123;&#125;&#125; = config;</span><br><span class="line">        <span class="comment">// 发送ajax请求</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(config);</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得<code>handlers</code>中的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 拦截器和请求组装队列</span></span><br><span class="line">    <span class="keyword">let</span> chain = [<span class="variable language_">this</span>.<span class="property">sendAjax</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="literal">undefined</span>] <span class="comment">// 成对出现的，失败回调暂时不处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;</span><br><span class="line">        chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fullfield</span>, interceptor.<span class="property">rejected</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应拦截</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">interceptor</span> =&gt;</span> &#123;</span><br><span class="line">        chain.<span class="title function_">push</span>(interceptor.<span class="property">fullfield</span>, interceptor.<span class="property">rejected</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行队列，每次执行一对，并给promise赋最新的值</span></span><br><span class="line">    <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">    <span class="keyword">while</span>(chain.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chains</code>大概是<code>[&#39;fulfilled1&#39;,&#39;reject1&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;this.sendAjax&#39;,&#39;undefined&#39;,&#39;fulfilled2&#39;,&#39;reject2&#39;,&#39;fulfilled1&#39;,&#39;reject1&#39;]</code>这种形式</p><p>这样就能够成功实现一个简易版<code>axios</code></p><h2 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h2><p>首先看看目录结构</p><p> <img src="https://static.vue-js.com/9d90eaa0-48b6-11eb-85f6-6fac77c0c9b3.png"></p><p><code>axios</code>发送请求有很多实现的方法，实现入口文件为<code>axios.js </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">defaultConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(defaultConfig);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// instance指向了request方法，且上下文指向context，所以可以直接以 instance(option) 方式调用 </span></span><br><span class="line">  <span class="comment">// Axios.prototype.request 内对第一个参数的数据类型判断，使我们能够以 instance(url, option) 方式调用</span></span><br><span class="line">  <span class="keyword">var</span> instance = <span class="title function_">bind</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把Axios.prototype上的方法扩展到instance对象上，</span></span><br><span class="line">  <span class="comment">// 并指定上下文为context，这样执行Axios原型链上的方法时，this会指向context</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copy context to instance</span></span><br><span class="line">  <span class="comment">// 把context对象上的自身属性和方法扩展到instance上</span></span><br><span class="line">  <span class="comment">// 注：因为extend内部使用的forEach方法对对象做for in 遍历时，只遍历对象本身的属性，而不会遍历原型链上的属性</span></span><br><span class="line">  <span class="comment">// 这样，instance 就有了  defaults、interceptors 属性。</span></span><br><span class="line">  utils.<span class="title function_">extend</span>(instance, context);</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the default instance to be exported 创建一个由默认配置生成的axios实例</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="title function_">createInstance</span>(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factory for creating new instances 扩展axios.create工厂函数，内部也是 createInstance</span></span><br><span class="line">axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(axios.<span class="property">defaults</span>, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose all/spread</span></span><br><span class="line">axios.<span class="property">all</span> = <span class="keyword">function</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios.<span class="property">spread</span> = <span class="keyword">function</span> <span class="title function_">spread</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">wrap</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = axios;</span><br></pre></td></tr></table></figure><p>主要核心是 <code>Axios.prototype.request</code>，各种请求方式的调用实现都是在 <code>request</code> 内部实现的， 简单看下 <code>request</code> 的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="comment">// 判断 config 参数是否是 字符串，如果是则认为第一个参数是 URL，第二个参数是真正的config</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = <span class="variable language_">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    <span class="comment">// 把 url 放置到 config 对象中，便于之后的 mergeConfig</span></span><br><span class="line">    config.<span class="property">url</span> = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 config 参数是否是 字符串，则整体都当做config</span></span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 合并默认配置和传入的配置</span></span><br><span class="line">  config = <span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>, config);</span><br><span class="line">  <span class="comment">// 设置请求方法</span></span><br><span class="line">  config.<span class="property">method</span> = config.<span class="property">method</span> ? config.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    something... 此部分会在后续拦截器单独讲述</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Axios 原型上挂载 &#x27;delete&#x27;, &#x27;get&#x27;, &#x27;head&#x27;, &#x27;options&#x27; 且不传参的请求方法，实现内部也是 request</span></span><br><span class="line">utils.<span class="title function_">forEach</span>([<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>], <span class="keyword">function</span> <span class="title function_">forEachMethodNoData</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[method] = <span class="keyword">function</span>(<span class="params">url, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(utils.<span class="title function_">merge</span>(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Axios 原型上挂载 &#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27; 且传参的请求方法，实现内部同样也是 request</span></span><br><span class="line">utils.<span class="title function_">forEach</span>([<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>], <span class="keyword">function</span> <span class="title function_">forEachMethodWithData</span>(<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[method] = <span class="keyword">function</span>(<span class="params">url, data, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(utils.<span class="title function_">merge</span>(config || &#123;&#125;, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">url</span>: url,</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>request</code>入口参数为<code>config</code>，可以说<code>config</code>贯彻了<code>axios</code>的一生</p><p><code>axios</code> 中的 <code>config </code>主要分布在这几个地方：</p><ul><li>默认配置 <code>defaults.js</code></li><li><code>config.method</code>默认为 <code>get</code></li><li>调用 <code>createInstance</code> 方法创建 <code>axios </code>实例，传入的<code>config</code></li><li>直接或间接调用 <code>request</code> 方法，传入的 <code>config</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="comment">// 创建一个由默认配置生成的axios实例</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="title function_">createInstance</span>(defaults);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展axios.create工厂函数，内部也是 createInstance</span></span><br><span class="line">axios.<span class="property">create</span> = <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createInstance</span>(<span class="title function_">mergeConfig</span>(axios.<span class="property">defaults</span>, instanceConfig));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Axios.js</span></span><br><span class="line"><span class="comment">// 合并默认配置和传入的配置</span></span><br><span class="line">config = <span class="title function_">mergeConfig</span>(<span class="variable language_">this</span>.<span class="property">defaults</span>, config);</span><br><span class="line"><span class="comment">// 设置请求方法</span></span><br><span class="line">config.<span class="property">method</span> = config.<span class="property">method</span> ? config.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从源码中，可以看到优先级：默认配置对象<code>default</code> &lt; <code>method:get</code> &lt; <code>Axios</code>的实例属性<code>this.default</code> &lt; <code>request</code>参数</p><p>下面重点看看<code>request</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    先是 mergeConfig ... 等，不再阐述</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法</span></span><br><span class="line">    chain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">    <span class="comment">// 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法</span></span><br><span class="line">    chain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象</span></span><br><span class="line">  <span class="keyword">var</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环拦截器的链</span></span><br><span class="line">  <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>()); <span class="comment">// 每一次向外弹出拦截器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回 promise</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拦截器<code>interceptors</code>是在构建<code>axios</code>实例化的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">instanceConfig</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">defaults</span> = instanceConfig;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(), <span class="comment">// 请求拦截</span></span><br><span class="line">    <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>() <span class="comment">// 响应拦截</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InterceptorManager</code>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截器的初始化 其实就是一组钩子函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">InterceptorManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用拦截器实例的use时就是往钩子函数中push方法</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span> <span class="title function_">use</span>(<span class="params">fulfilled, rejected</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">fulfilled</span>: fulfilled,</span><br><span class="line">    <span class="attr">rejected</span>: rejected</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器是可以取消的，根据use的时候返回的ID，把某一个拦截器方法置为null</span></span><br><span class="line"><span class="comment">// 不能用 splice 或者 slice 的原因是 删除之后 id 就会变化，导致之后的顺序或者是操作不可控</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eject</span> = <span class="keyword">function</span> <span class="title function_">eject</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handlers</span>[id]) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>[id] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就是在 Axios的request方法中 中循环拦截器的方法 forEach 循环执行钩子函数</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span> = <span class="keyword">function</span> <span class="title function_">forEach</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  utils.<span class="title function_">forEach</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>, <span class="keyword">function</span> <span class="title function_">forEachHandler</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (h !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">fn</span>(h);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求拦截器方法是被 <code>unshift</code>到拦截器中，响应拦截器是被<code>push</code>到拦截器中的。最终它们会拼接上一个叫<code>dispatchRequest</code>的方法被后续的 <code>promise</code> 顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./../utils&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> transformData = <span class="built_in">require</span>(<span class="string">&#x27;./transformData&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isCancel = <span class="built_in">require</span>(<span class="string">&#x27;../cancel/isCancel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> defaults = <span class="built_in">require</span>(<span class="string">&#x27;../defaults&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isAbsoluteURL = <span class="built_in">require</span>(<span class="string">&#x27;./../helpers/isAbsoluteURL&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> combineURLs = <span class="built_in">require</span>(<span class="string">&#x27;./../helpers/combineURLs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求是否已被取消，如果已经被取消，抛出已取消</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwIfCancellationRequested</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="title function_">throwIfRequested</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果包含baseUrl, 并且不是config.url绝对路径，组合baseUrl以及config.url</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">baseURL</span> &amp;&amp; !<span class="title function_">isAbsoluteURL</span>(config.<span class="property">url</span>)) &#123;</span><br><span class="line">    <span class="comment">// 组合baseURL与url形成完整的请求路径</span></span><br><span class="line">    config.<span class="property">url</span> = <span class="title function_">combineURLs</span>(config.<span class="property">baseURL</span>, config.<span class="property">url</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config.<span class="property">headers</span> = config.<span class="property">headers</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用/lib/defaults.js中的transformRequest方法，对config.headers和config.data进行格式化</span></span><br><span class="line">  <span class="comment">// 比如将headers中的Accept，Content-Type统一处理成大写</span></span><br><span class="line">  <span class="comment">// 比如如果请求正文是一个Object会格式化为JSON字符串，并添加application/json;charset=utf-8的Content-Type</span></span><br><span class="line">  <span class="comment">// 等一系列操作</span></span><br><span class="line">  config.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">    config.<span class="property">data</span>,</span><br><span class="line">    config.<span class="property">headers</span>,</span><br><span class="line">    config.<span class="property">transformRequest</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并不同配置的headers，config.headers的配置优先级更高</span></span><br><span class="line">  config.<span class="property">headers</span> = utils.<span class="title function_">merge</span>(</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">common</span> || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span>[config.<span class="property">method</span>] || &#123;&#125;,</span><br><span class="line">    config.<span class="property">headers</span> || &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除headers中的method属性</span></span><br><span class="line">  utils.<span class="title function_">forEach</span>(</span><br><span class="line">    [<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;put&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>, <span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cleanHeaderConfig</span>(<span class="params">method</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> config.<span class="property">headers</span>[method];</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果config配置了adapter，使用config中配置adapter的替代默认的请求方法</span></span><br><span class="line">  <span class="keyword">var</span> adapter = config.<span class="property">adapter</span> || defaults.<span class="property">adapter</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用adapter方法发起请求（adapter根据浏览器环境或者Node环境会有不同）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 请求正确返回的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否以及取消了请求，如果取消了请求抛出以取消</span></span><br><span class="line">      <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用/lib/defaults.js中的transformResponse方法，对服务器返回的数据进行格式化</span></span><br><span class="line">      <span class="comment">// 例如，使用JSON.parse对响应正文进行解析</span></span><br><span class="line">      response.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">        response.<span class="property">data</span>,</span><br><span class="line">        response.<span class="property">headers</span>,</span><br><span class="line">        config.<span class="property">transformResponse</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求失败的回调</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onAdapterRejection</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_">isCancel</span>(reason)) &#123;</span><br><span class="line">        <span class="title function_">throwIfCancellationRequested</span>(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (reason &amp;&amp; reason.<span class="property">response</span>) &#123;</span><br><span class="line">          reason.<span class="property">response</span>.<span class="property">data</span> = <span class="title function_">transformData</span>(</span><br><span class="line">            reason.<span class="property">response</span>.<span class="property">data</span>,</span><br><span class="line">            reason.<span class="property">response</span>.<span class="property">headers</span>,</span><br><span class="line">            config.<span class="property">transformResponse</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来看看<code>axios</code>是如何实现取消请求的，实现文件在<code>CancelToken.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CancelToken</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;executor must be a function.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在 CancelToken 上定义一个 pending 状态的 promise ，将 resolve 回调赋值给外部变量 resolvePromise</span></span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">promiseExecutor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    resolvePromise = resolve;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> token = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 立即执行 传入的 executor函数，将真实的 cancel 方法通过参数传递出去。</span></span><br><span class="line">  <span class="comment">// 一旦调用就执行 resolvePromise 即前面的 promise 的 resolve，就更改promise的状态为 resolve。</span></span><br><span class="line">  <span class="comment">// 那么xhr中定义的 CancelToken.promise.then方法就会执行, 从而xhr内部会取消请求</span></span><br><span class="line">  <span class="title function_">executor</span>(<span class="keyword">function</span> <span class="title function_">cancel</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断请求是否已经取消过，避免多次执行</span></span><br><span class="line">    <span class="keyword">if</span> (token.<span class="property">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    token.<span class="property">reason</span> = <span class="keyword">new</span> <span class="title class_">Cancel</span>(message);</span><br><span class="line">    <span class="title function_">resolvePromise</span>(token.<span class="property">reason</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CancelToken</span>.<span class="property">source</span> = <span class="keyword">function</span> <span class="title function_">source</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// source 方法就是返回了一个 CancelToken 实例，与直接使用 new CancelToken 是一样的操作</span></span><br><span class="line">  <span class="keyword">var</span> cancel;</span><br><span class="line">  <span class="keyword">var</span> token = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 返回创建的 CancelToken 实例以及取消方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: token,</span><br><span class="line">    <span class="attr">cancel</span>: cancel</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际上取消请求的操作是在 <code>xhr.js</code> 中也有响应的配合的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span><br><span class="line">    config.<span class="property">cancelToken</span>.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onCanceled</span>(<span class="params">cancel</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取消请求</span></span><br><span class="line">        request.<span class="title function_">abort</span>();</span><br><span class="line">        <span class="title function_">reject</span>(cancel);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>巧妙的地方在 <code>CancelToken</code>中 <code>executor</code> 函数，通过<code>resolve</code>函数的传递与执行，控制<code>promise</code>的状态</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p> <img src="https://static.vue-js.com/b1d2ebd0-48b6-11eb-ab90-d9ae814b240d.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://juejin.cn/post/6856706569263677447#heading-4">https://juejin.cn/post/6856706569263677447#heading-4</a></li><li><a href="https://juejin.cn/post/6844903907500490766">https://juejin.cn/post/6844903907500490766</a></li><li><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/1564f7d0-4662-11eb-ab90-d9ae814b240d.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、axios的使用&quot;&gt;&lt;a href=&quot;#一、axios的使用&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>双向数据绑定是什么</title>
    <link href="https://blogmind.cloud/2025/02/02/vue-bind/"/>
    <id>https://blogmind.cloud/2025/02/02/vue-bind/</id>
    <published>2025-02-02T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.088Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/cef7dcc0-3ac9-11eb-85f6-6fac77c0c9b3.png"></p><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h2><p>双向绑定主要包含两个方向的数据同步：</p><ul><li>数据层（Model）到视图层（View）的绑定</li><li>视图层（View）到数据层（Model）的绑定</li></ul><h2 id="2-实现机制"><a href="#2-实现机制" class="headerlink" title="2. 实现机制"></a>2. 实现机制</h2><p>主要通过三个重要部分实现：</p><ol><li><strong>数据劫持（Observer）</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.defineProperty 实现数据劫持</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">addDep</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="comment">// 通知所有依赖进行更新</span></span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>依赖收集器（Dep）</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []; <span class="comment">// 存储所有的依赖</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addDep</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通知所有依赖更新</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> sub.<span class="title function_">update</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>观察者（Watcher）</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="comment">// 触发 getter，进行依赖收集</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>];</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 更新视图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3. 工作流程"></a>3. 工作流程</h2><ol><li><p><strong>初始化阶段</strong>：</p><ul><li>对数据进行劫持，设置 getter&#x2F;setter</li><li>编译模板，找到动态绑定的数据</li><li>创建 Watcher 实例</li></ul></li><li><p><strong>数据更新阶段</strong>：</p><ul><li>Model 更新：触发 setter → 通知依赖 → 更新 View</li><li>View 更新：触发事件 → 更新 Model → 触发 setter → 更新相关视图</li></ul></li></ol><h2 id="4-简单示例"><a href="#4-简单示例" class="headerlink" title="4. 简单示例"></a>4. 简单示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ol><li>当输入框的值改变时，会触发 setter，更新数据并通知相关依赖更新视图</li><li>当 message 数据改变时，会通过依赖通知机制更新显示的文本</li></ol><h2 id="5-Vue-3-的改进"><a href="#5-Vue-3-的改进" class="headerlink" title="5. Vue 3 的改进"></a>5. Vue 3 的改进</h2><p>Vue 3 使用 Proxy 替代了 Object.defineProperty，提供了更好的性能和功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue 3 的响应式实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      <span class="title function_">track</span>(target, key);</span><br><span class="line">      <span class="keyword">return</span> target[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">      <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要优势：</p><ul><li>可以监听数组变化</li><li>可以监听对象属性的添加和删除</li><li>支持 Map、Set 等数据结构</li><li>性能更好，不需要递归遍历对象</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>性能考虑：</p><ul><li>不要在大型数组或对象上使用双向绑定</li><li>使用 v-once 处理静态内容</li><li>合理使用计算属性和侦听器</li></ul></li><li><p>可能的问题：</p><ul><li>数据量大时可能会有性能问题</li><li>复杂的双向绑定可能导致数据流向难以追踪</li><li>需要考虑内存泄漏问题</li></ul></li></ol><p>理解双向绑定的原理对于更好地使用框架和优化应用性能非常重要。在实际开发中，我们通常不需要自己实现双向绑定，但了解其原理有助于我们更好地使用和调试应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/cef7dcc0-3ac9-11eb-85f6-6fac77c0c9b3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-基本原理&quot;&gt;&lt;a href=&quot;#1-基本原理&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0的设计目标是什么？做了哪些优化</title>
    <link href="https://blogmind.cloud/2025/01/31/vue3-goal/"/>
    <id>https://blogmind.cloud/2025/01/31/vue3-goal/</id>
    <published>2025-01-31T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.106Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/b93b49c0-5c58-11eb-85f6-6fac77c0c9b3.png"></p><h2 id="一、设计目标"><a href="#一、设计目标" class="headerlink" title="一、设计目标"></a>一、设计目标</h2><p>不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下<code>Vue3</code>之前我们或许会面临的问题</p><ul><li><p>随着功能的增长，复杂组件的代码变得越来越难以维护</p></li><li><p>缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制</p></li><li><p>类型推断不够友好</p></li><li><p><code>bundle</code>的时间太久了</p></li></ul><p>而 <code>Vue3</code> 经过长达两三年时间的筹备，做了哪些事情？</p><p>我们从结果反推</p><ul><li>更小</li><li>更快</li><li>TypeScript支持</li><li>API设计一致性</li><li>提高自身可维护性</li><li>开放更多底层功能</li></ul><p>一句话概述，就是更小更快更友好了</p><h3 id="更小"><a href="#更小" class="headerlink" title="更小"></a>更小</h3><p><code>Vue3</code>移除一些不常用的 <code>API</code></p><p>引入<code>tree-shaking</code>，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了</p><h3 id="更快"><a href="#更快" class="headerlink" title="更快"></a>更快</h3><p>主要体现在编译方面：</p><ul><li>diff算法优化</li><li>静态提升</li><li>事件监听缓存</li><li>SSR优化</li></ul><p>下篇文章我们会进一步介绍</p><h3 id="更友好"><a href="#更友好" class="headerlink" title="更友好"></a>更友好</h3><p><code>vue3</code>在兼顾<code>vue2</code>的<code>options API</code>的同时还推出了<code>composition API</code>，大大增加了代码的逻辑组织和代码复用能力</p><p>这里代码简单演示下：</p><p>存在一个获取鼠标位置的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">update</span> = e=&gt;&#123;</span><br><span class="line">        state.<span class="property">x</span> = e.<span class="property">pageX</span>;</span><br><span class="line">        state.<span class="property">y</span> = e.<span class="property">pageY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toRefs</span>(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要调用这个函数，即可获取<code>x</code>、<code>y</code>的坐标，完全不用关注实现过程</p><p>试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高</p><p>同时，<code>VUE3</code>是基于<code>typescipt</code>编写的，可以享受到自动的类型定义提示</p><h2 id="三、优化方案"><a href="#三、优化方案" class="headerlink" title="三、优化方案"></a>三、优化方案</h2><p><code>vue3</code>从很多层面都做了优化，可以分成三个方面：</p><ul><li>源码</li><li>性能</li><li>语法 API</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>源码可以从两个层面展开：</p><ul><li>源码管理</li><li>TypeScript</li></ul><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p><code>vue3</code>整个源码是通过 <code>monorepo </code>的方式维护的，根据功能将不同的模块拆分到<code>packages </code>目录下面不同的子目录中</p><p> <img src="https://static.vue-js.com/d7c32520-5c58-11eb-ab90-d9ae814b240d.png"></p><p>这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性</p><p>另外一些 <code>package</code>（比如 <code>reactivity</code> 响应式库）是可以独立于 <code>Vue</code> 使用的，这样用户如果只想使用 <code>Vue3 </code>的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 <code>Vue</code></p><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p><code>Vue3</code>是基于<code>typeScript</code>编写的，提供了更好的类型检查，能支持复杂的类型推导</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p><code>vue3</code>是从什么哪些方面对性能进行进一步优化呢？</p><ul><li>体积优化</li><li>编译优化</li><li>数据劫持优化</li></ul><p>这里讲述数据劫持：</p><p>在<code>vue2</code>中，数据劫持是通过<code>Object.defineProperty </code>，这个 API 有一些缺陷，并不能检测对象属性的添加和删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// track</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// trigger</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>尽管<code> Vue</code>为了解决这个问题提供了 <code>set </code>和<code>delete </code>实例方法，但是对于用户来说，还是增加了一定的心智负担</p><p>同时在面对嵌套层级比较深的情况下，就存在性能问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">      <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">c</span>: &#123;</span><br><span class="line">          <span class="attr">d</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之下，<code>vue3</code>是通过<code>proxy</code>监听整个对象，那么对于删除还是监听当然也能监听到</p><p>同时<code>Proxy </code> 并不能监听到内部深层次的对象变化，而 <code>Vue3</code> 的处理方式是在<code> getter</code> 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归</p><h3 id="语法-API"><a href="#语法-API" class="headerlink" title="语法 API"></a>语法 API</h3><p>这里当然说的就是<code>composition API</code>，其两大显著的优化：</p><ul><li>优化逻辑组织</li><li>优化逻辑复用</li></ul><h4 id="逻辑组织"><a href="#逻辑组织" class="headerlink" title="逻辑组织"></a>逻辑组织</h4><p>一张图，我们可以很直观地感受到 <code>Composition API </code>在逻辑组织方面的优势</p><p> <img src="https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png"></p><p>相同功能的代码编写在一块，而不像<code>options API</code>那样，各个功能的代码混成一块</p><h4 id="逻辑复用"><a href="#逻辑复用" class="headerlink" title="逻辑复用"></a>逻辑复用</h4><p>在<code>vue2</code>中，我们是通过<code>mixin</code>实现功能混合，如果多个<code>mixin</code>混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰</p><p>而通过<code>composition</code>这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可</p><p>同样是上文的获取鼠标位置的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs, reactive, onUnmounted, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">update</span> = e=&gt;&#123;</span><br><span class="line">        state.<span class="property">x</span> = e.<span class="property">pageX</span>;</span><br><span class="line">        state.<span class="property">y</span> = e.<span class="property">pageY</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,update);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">toRefs</span>(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useMousePosition <span class="keyword">from</span> <span class="string">&#x27;./mouse&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>()</span><br><span class="line">        <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，整个数据来源清晰了，即使去编写更多的<code>hook</code>函数，也不会出现命名冲突的问题</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://juejin.cn/post/6850418112878575629#heading-5">https://juejin.cn/post/6850418112878575629#heading-5</a></li><li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/b93b49c0-5c58-11eb-85f6-6fac77c0c9b3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、设计目标&quot;&gt;&lt;a href=&quot;#一、设计目标&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？</title>
    <link href="https://blogmind.cloud/2025/01/30/vue3-composition/"/>
    <id>https://blogmind.cloud/2025/01/30/vue3-composition/</id>
    <published>2025-01-30T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.106Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="https://static.vue-js.com/8d6dd7b0-6048-11eb-85f6-6fac77c0c9b3.png"></p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p><code>Composition API</code> 可以说是<code>Vue3</code>的最大特点，那么为什么要推出<code>Composition Api</code>，解决了什么问题？</p><p>通常使用<code>Vue2</code>开发的项目，普遍会存在以下问题：</p><ul><li>代码的可读性随着组件变大而变差</li><li>每一种代码复用的方式，都存在缺点</li><li>TypeScript支持有限</li></ul><p>以上通过使用<code>Composition Api</code>都能迎刃而解</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、Options-Api"><a href="#一、Options-Api" class="headerlink" title="一、Options Api"></a>一、Options Api</h3><p><code>Options API</code>，即大家常说的选项API，即以<code>vue</code>为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑</p><p>如下图：</p><p> <img src="https://static.vue-js.com/9bf6d9d0-6048-11eb-85f6-6fac77c0c9b3.png"></p><p>可以看到<code>Options</code>代码编写方式，如果是组件状态，则写在<code>data</code>属性上，如果是方法，则写在<code>methods</code>属性上…</p><p>用组件的选项 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组织逻辑在大多数情况下都有效</p><p>然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解</p><h3 id="二、Composition-Api"><a href="#二、Composition-Api" class="headerlink" title="二、Composition Api"></a>二、Composition Api</h3><p>在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）</p><p>即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API</p><p> <img src="https://static.vue-js.com/acee9200-6048-11eb-ab90-d9ae814b240d.png"></p><h3 id="三、对比"><a href="#三、对比" class="headerlink" title="三、对比"></a>三、对比</h3><p>下面对<code>Composition Api </code>与<code>Options Api</code>进行两大方面的比较</p><ul><li>逻辑组织</li><li>逻辑复用</li></ul><h4 id="逻辑组织"><a href="#逻辑组织" class="headerlink" title="逻辑组织"></a>逻辑组织</h4><h5 id="Options-API"><a href="#Options-API" class="headerlink" title="Options API"></a>Options API</h5><p>假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色）</p><p> <img src="https://static.vue-js.com/dc83d070-6048-11eb-ab90-d9ae814b240d.png"></p><p>可以看到，这种碎片化使得理解和维护复杂组件变得困难</p><p>选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块</p><h5 id="Compostion-API"><a href="#Compostion-API" class="headerlink" title="Compostion API"></a>Compostion API</h5><p>而<code>Compositon API</code>正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去</p><p>下面举个简单例子，将处理<code>count</code>属性相关的代码放在同一个函数了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleConut</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span> = count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        double,</span><br><span class="line">        handleConut,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件上中使用<code>count</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; count, double, handleConut &#125; = <span class="title function_">useCount</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count,</span><br><span class="line">            double,</span><br><span class="line">            handleConut</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再来一张图进行对比，可以很直观地感受到 <code>Composition API </code>在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可</p><p><img src="https://static.vue-js.com/e5804bc0-5c58-11eb-85f6-6fac77c0c9b3.png"></p><h4 id="逻辑复用"><a href="#逻辑复用" class="headerlink" title="逻辑复用"></a>逻辑复用</h4><p>在<code>Vue2</code>中，我们是用过<code>mixin</code>去复用相同的逻辑</p><p>下面举个例子，我们会另起一个<code>mixin.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MoveMixin</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleKeyup</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>);</span><br><span class="line">      <span class="comment">// 上下左右 x y</span></span><br><span class="line">      <span class="keyword">switch</span> (e.<span class="property">code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">y</span>--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">y</span>++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">x</span>--;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">x</span>++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleKeyup</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleKeyup</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> mousePositionMixin <span class="keyword">from</span> <span class="string">&#x27;./mouse&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mixins</span>: [mousePositionMixin]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用单个<code>mixin</code>似乎问题不大，但是当我们一个组件混入大量不同的 <code>mixins</code> 的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mixins</span>: [mousePositionMixin, fooMixin, barMixin, otherMixin]</span><br></pre></td></tr></table></figure><p>会存在两个非常明显的问题：</p><ul><li>命名冲突</li><li>数据来源不清晰</li></ul><p>现在通过<code>Compositon API</code>这种方式改写上面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> position = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleKeyup</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>);</span><br><span class="line">    <span class="comment">// 上下左右 x y</span></span><br><span class="line">    <span class="keyword">switch</span> (e.<span class="property">code</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">        <span class="comment">// y.value--;</span></span><br><span class="line">        position.<span class="property">y</span>--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">        <span class="comment">// y.value++;</span></span><br><span class="line">        position.<span class="property">y</span>++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">        <span class="comment">// x.value--;</span></span><br><span class="line">        position.<span class="property">x</span>--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">        <span class="comment">// x.value++;</span></span><br><span class="line">        position.<span class="property">x</span>++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleKeyup);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;keyup&quot;</span>, handleKeyup);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; position &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Mouse position: x &#123;&#123; x &#125;&#125; / y &#123;&#123; y &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useMove &#125; <span class="keyword">from</span> <span class="string">&quot;./useMove&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; position &#125; = <span class="title function_">useMove</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">toRefs</span>(position);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      x,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      y,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在逻辑组织和逻辑复用方面，<code>Composition API</code>是优于<code>Options  API</code></li><li>因为<code>Composition API</code>几乎是函数，会有更好的类型推断。</li><li><code>Composition API </code>对 <code>tree-shaking</code> 友好，代码也更容易压缩</li><li><code>Composition API</code>中见不到<code>this</code>的使用，减少了<code>this</code>指向不明的情况</li><li>如果是小型组件，可以继续使用<code>Options API</code>，也是十分友好的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;img src=&quot;https://static.vue-js.com/8d6dd7b0-6048-11eb-85f6-6fac77c0c9b3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>用Vue3.0 写过组件吗？如果想实现一个 Modal你会怎么设计？</title>
    <link href="https://blogmind.cloud/2025/01/22/vue3-modal-component/"/>
    <id>https://blogmind.cloud/2025/01/22/vue3-modal-component/</id>
    <published>2025-01-22T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.106Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="https://static.vue-js.com/e294c660-6370-11eb-ab90-d9ae814b240d.png"></p><h2 id="一、组件设计"><a href="#一、组件设计" class="headerlink" title="一、组件设计"></a>一、组件设计</h2><p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式</p><p>现在有一个场景，点击新增与编辑都弹框出来进行填写，功能上大同小异，可能只是标题内容或者是显示的主体内容稍微不同</p><p>这时候就没必要写两个组件，只需要根据传入的参数不同，组件显示不同内容即可</p><p>这样，下次开发相同界面程序时就可以写更少的代码，意义着更高的开发效率，更少的 <code>Bug </code>和更少的程序体积</p><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><p>实现一个<code>Modal</code>组件，首先确定需要完成的内容：</p><ul><li><p>遮罩层</p></li><li><p>标题内容</p></li><li><p>主体内容</p></li><li><p>确定和取消按钮</p></li></ul><p>主体内容需要灵活，所以可以是字符串，也可以是一段 <code>html</code> 代码</p><p>特点是它们在当前<code>vue</code>实例之外独立存在，通常挂载于<code>body</code>之上</p><p>除了通过引入<code>import</code>的形式，我们还可通过<code>API</code>的形式进行组件的调用</p><p>还可以包括配置全局样式、国际化、与<code>typeScript</code>结合</p><h2 id="三、实现流程"><a href="#三、实现流程" class="headerlink" title="三、实现流程"></a>三、实现流程</h2><p>首先看看大致流程：</p><ul><li><p>目录结构</p></li><li><p>组件内容</p></li><li><p>实现 API 形式</p></li><li><p>事件处理</p></li><li><p>其他完善</p></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><code>Modal</code>组件相关的目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── plugins</span><br><span class="line">│   └── modal</span><br><span class="line">│       ├── Content.tsx // 维护 Modal 的内容，用于 h 函数和 jsx 语法</span><br><span class="line">│       ├── Modal.vue // 基础组件</span><br><span class="line">│       ├── config.ts // 全局默认配置</span><br><span class="line">│       ├── index.ts // 入口</span><br><span class="line">│       ├── locale // 国际化相关</span><br><span class="line">│       │   ├── index.ts</span><br><span class="line">│       │   └── lang</span><br><span class="line">│       │       ├── en-US.ts</span><br><span class="line">│       │       ├── zh-CN.ts</span><br><span class="line">│       │       └── zh-TW.ts</span><br><span class="line">│       └── modal.type.ts // ts类型声明相关</span><br></pre></td></tr></table></figure><p>因为 Modal 会被 <code>app.use(Modal)</code> 调用作为一个插件，所以都放在<code>plugins</code>目录下</p><h3 id="组件内容"><a href="#组件内容" class="headerlink" title="组件内容"></a>组件内容</h3><p>首先实现<code>modal.vue</code>的主体显示内容大致如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isTeleport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;modelValue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:style</span>=<span class="string">&quot;style&quot;</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">&quot;maskClose &amp;&amp; !loading &amp;&amp; handleCancel()&quot;</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__title line line--b&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title || t(&quot;r.title&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">v-if</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">:title</span>=<span class="string">&quot;t(&#x27;r.close&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">class</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">                      @<span class="attr">click</span>=<span class="string">&quot;!loading &amp;&amp; handleCancel()&quot;</span></span></span><br><span class="line"><span class="tag">                      &gt;</span>✕&lt;/span</span><br><span class="line">                    &gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Content</span> <span class="attr">v-if</span>=<span class="string">&quot;typeof content === &#x27;function&#x27;&quot;</span> <span class="attr">:render</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                    &#123;&#123; content &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__btns line line--t&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;loading&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleConfirm&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span> ❍ <span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; t(&quot;r.confirm&quot;) &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;!loading &amp;&amp; handleCancel()&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123; t(&quot;r.cancel&quot;) &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最外层上通过Vue3 <code>Teleport</code> 内置组件进行包裹，其相当于传送门，将里面的内容传送至<code>body</code>之上</p><p>并且从<code>DOM</code>结构上来看，把<code>modal</code>该有的内容（遮罩层、标题、内容、底部按钮）都实现了</p><p>关于主体内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal__content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span> <span class="attr">v-if</span>=<span class="string">&quot;typeof content===&#x27;function&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:render</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        &#123;&#123;content&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到根据传入<code>content</code>的类型不同，对应显示不同得到内容</p><p>最常见的则是通过调用字符串和默认插槽的形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 默认插槽</span><br><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;show&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;演示 slot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;show&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">title</span>=<span class="string">&quot;演示 content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">content</span>=<span class="string">&quot;hello world~&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>通过 API 形式调用<code>Modal</code>组件的时候，<code>content</code>可以使用下面两种</p><ul><li>h 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$modal.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;演示 h 函数&#x27;</span>,</span><br><span class="line">  <span class="title function_">content</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;color:red;&#x27;</span>,</span><br><span class="line">        <span class="attr">onClick</span>: <span class="function">(<span class="params">$event: Event</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>, $event.<span class="property">target</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;hello world ~&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>JSX</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$modal.<span class="title function_">show</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;演示 jsx 语法&#x27;</span>,</span><br><span class="line">  <span class="title function_">content</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;($event:</span> <span class="attr">Event</span>) =&gt;</span> console.log(&#x27;clicked&#x27;, $event.target)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        hello world ~</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现-API-形式"><a href="#实现-API-形式" class="headerlink" title="实现 API 形式"></a>实现 API 形式</h3><p>那么组件如何实现<code>API</code>形式调用<code>Modal</code>组件呢？</p><p>在<code>Vue2</code>中，我们可以借助<code>Vue</code>实例以及<code>Vue.extend</code>的方式获得组件实例，然后挂载到<code>body</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;./Modal.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ComponentClass</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Modal</span>);</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">ComponentClass</span>(&#123; <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>) &#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instance.<span class="property">$el</span>);</span><br></pre></td></tr></table></figure><p>虽然<code>Vue3</code>移除了<code>Vue.extend</code>方法，但可以通过<code>createVNode</code>实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;./Modal.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(<span class="title class_">Modal</span>);</span><br><span class="line"><span class="title function_">render</span>(vnode, container);</span><br><span class="line"><span class="keyword">const</span> instance = vnode.<span class="property">component</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container);</span><br></pre></td></tr></table></figure><p>在<code>Vue2</code>中，可以通过<code>this</code>的形式调用全局 API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">vue</span>) &#123;</span><br><span class="line">       vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$create</span> = create</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Vue3 的 <code>setup</code> 中已经没有 <code>this </code>概念了，需要调用<code>app.config.globalProperties</code>挂载到全局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$create</span> = create</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>下面再看看看<code>Modal</code>组件内部是如何处理「确定」「取消」事件的，既然是<code>Vue3</code>，当然采用<code>Compositon API</code> 形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modal.vue</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 获得当前组件实例</span></span><br><span class="line">  <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    instance.<span class="property">_hub</span> = &#123;</span><br><span class="line">      <span class="string">&#x27;on-cancel&#x27;</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">      <span class="string">&#x27;on-confirm&#x27;</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleConfirm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;on-confirm&#x27;</span>);</span><br><span class="line">    instance.<span class="property">_hub</span>[<span class="string">&#x27;on-confirm&#x27;</span>]();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;on-cancel&#x27;</span>);</span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">    instance.<span class="property">_hub</span>[<span class="string">&#x27;on-cancel&#x27;</span>]();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    handleConfirm,</span><br><span class="line">    handleCancel</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中，可以看得到除了使用传统<code>emit</code>的形式使父组件监听，还可通过<code>_hub</code>属性中添加 <code>on-cancel</code>，<code>on-confirm</code>方法实现在<code>API</code>中进行监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$modal</span> = &#123;</span><br><span class="line">   <span class="title function_">show</span>(<span class="params">&#123;&#125;</span>) &#123;</span><br><span class="line">     <span class="comment">/* 监听 确定、取消 事件 */</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再来目睹下<code>_hub</code>是如何实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$modal</span> = &#123;</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        /* 其他选项 */</span></span><br><span class="line"><span class="params">        onConfirm,</span></span><br><span class="line"><span class="params">        onCancel</span></span><br><span class="line"><span class="params">    &#125;</span>) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; props, _hub &#125; = instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">_closeModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            props.<span class="property">modelValue</span> = <span class="literal">false</span>;</span><br><span class="line">            container.<span class="property">parentNode</span>!.<span class="title function_">removeChild</span>(container);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 往 _hub 新增事件的具体实现</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(_hub, &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="string">&#x27;on-confirm&#x27;</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (onConfirm) &#123;</span><br><span class="line">                <span class="keyword">const</span> fn = <span class="title function_">onConfirm</span>();</span><br><span class="line">                <span class="comment">// 当方法返回为 Promise</span></span><br><span class="line">                <span class="keyword">if</span> (fn &amp;&amp; fn.<span class="property">then</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">await</span> fn;</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">                        <span class="title function_">_closeModal</span>();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        <span class="comment">// 发生错误时，不关闭弹框</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">                        props.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">_closeModal</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">_closeModal</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="string">&#x27;on-cancel&#x27;</span>() &#123;</span><br><span class="line">                onCancel &amp;&amp; <span class="title function_">onCancel</span>();</span><br><span class="line">                <span class="title function_">_closeModal</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="其他完善"><a href="#其他完善" class="headerlink" title="其他完善"></a>其他完善</h3><p>关于组件实现国际化、与<code>typsScript</code>结合，大家可以根据自身情况在此基础上进行更改</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://segmentfault.com/a/1190000038928664">https://segmentfault.com/a/1190000038928664</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;img src=&quot;https://static.vue-js.com/e294c660-6370-11eb-ab90-d9ae814b240d.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、组件设计&quot;&gt;&lt;a href=&quot;#一、组件设计&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中组件和插件有什么区别？</title>
    <link href="https://blogmind.cloud/2025/01/21/vue-components-plugin/"/>
    <id>https://blogmind.cloud/2025/01/21/vue-components-plugin/</id>
    <published>2025-01-21T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.090Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/683475e0-3acc-11eb-ab90-d9ae814b240d.png" alt="image.png"></p><h2 id="一、组件是什么"><a href="#一、组件是什么" class="headerlink" title="一、组件是什么"></a>一、组件是什么</h2><p>回顾以前对组件的定义：</p><p>组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在<code>Vue</code>中每一个<code>.vue</code>文件都可以视为一个组件</p><p>组件的优势</p><ul><li><p>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</p></li><li><p>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</p></li><li><p>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</p></li></ul><h2 id="二、插件是什么"><a href="#二、插件是什么" class="headerlink" title="二、插件是什么"></a>二、插件是什么</h2><p>插件通常用来为 <code>Vue</code> 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ul><li>添加全局方法或者属性。如: <code>vue-custom-element</code></li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 <code>vue-touch</code></li><li>通过全局混入来添加一些组件选项。如<code> vue-router</code></li><li>添加 <code>Vue</code> 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 <code>API</code>，同时提供上面提到的一个或多个功能。如<code> vue-router</code></li></ul><h2 id="三、两者的区别"><a href="#三、两者的区别" class="headerlink" title="三、两者的区别"></a>三、两者的区别</h2><p>两者的区别主要表现在以下几个方面：</p><ul><li>编写形式</li><li>注册形式</li><li>使用场景</li></ul><h3 id="编写形式"><a href="#编写形式" class="headerlink" title="编写形式"></a>编写形式</h3><h4 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h4><p>编写一个组件，可以有很多方式，我们最常见的就是<code>vue</code>单文件的这种格式，每一个<code>.vue</code>文件我们都可以看成是一个组件</p><p><code>vue</code>文件标准格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们还可以通过<code>template</code>属性来编写一个组件，如果组件内容多，我们可以在外部定义<code>template</code>组件内容，如果组件内容并不多，我们可直接写在<code>template</code>属性上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;testComponent&quot;</span>&gt;     <span class="comment">// 组件显示的内容</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>   </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;componentA&#x27;</span>,&#123; </span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#testComponent&#x27;</span>  </span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;component&lt;/div&gt;`</span>  <span class="comment">// 组件内容少可以通过这种形式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h4><p><code>vue</code>插件的实现应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">bind</span> (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册形式"><a href="#注册形式" class="headerlink" title="注册形式"></a>注册形式</h3><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><p><code>vue</code>组件注册主要分为全局注册与局部注册</p><p>全局注册通过<code>Vue.component</code>方法，第一个参数为组件的名称，第二个参数为传入的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br></pre></td></tr></table></figure><p>局部注册只需在用到的地方通过<code>components</code>属性注册一个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component1 = &#123;...&#125; <span class="comment">// 定义一个组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">components</span>:&#123;</span><br><span class="line">component1   <span class="comment">// 局部注册</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插件注册"><a href="#插件注册" class="headerlink" title="插件注册"></a>插件注册</h4><p>插件的注册通过<code>Vue.use()</code>的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(插件名字,&#123; <span class="comment">/* ... */</span>&#125; )</span><br></pre></td></tr></table></figure><p>注意的是：</p><p>注册插件的时候，需要在调用 <code>new Vue()</code> 启动应用之前完成</p><p><code>Vue.use</code>会自动阻止多次注册相同插件，只会注册一次</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>具体的其实在插件是什么章节已经表述了，这里在总结一下</p><p>组件 <code>(Component)</code> 是用来构成你的 <code>App</code> 的业务模块，它的目标是 <code>App.vue</code></p><p>插件 <code>(Plugin)</code> 是用来增强你的技术栈的功能模块，它的目标是 <code>Vue</code> 本身</p><p>简单来说，插件就是指对<code>Vue</code>的功能的增强或补充</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/683475e0-3acc-11eb-ab90-d9ae814b240d.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、组件是什么&quot;&gt;&lt;a href=&quot;#一、组件是什么&quot; cl</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件之间的通信方式都有哪些？</title>
    <link href="https://blogmind.cloud/2025/01/18/vue-communication/"/>
    <id>https://blogmind.cloud/2025/01/18/vue-communication/</id>
    <published>2025-01-18T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:33.443Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/7de50d20-3aca-11eb-85f6-6fac77c0c9b3.png"></p><h2 id="一、组件间通信的概念"><a href="#一、组件间通信的概念" class="headerlink" title="一、组件间通信的概念"></a>一、组件间通信的概念</h2><p>开始之前，我们把<strong>组件间通信</strong>这个词进行拆分</p><ul><li>组件</li><li>通信</li></ul><p>都知道组件是<code>vue</code>最强大的功能之一，<code>vue</code>中每一个<code>.vue</code>我们都可以视之为一个组件通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。广义上，任何信息的交通都是通信<strong>组件间通信</strong>即指组件(<code>.vue</code>)通过某种方式来传递信息以达到某个目的举个栗子我们在使用<code>UI</code>框架中的<code>table</code>组件，可能会往<code>table</code>组件中传入某些数据，这个本质就形成了组件之间的通信</p><h2 id="二、组件间通信解决了什么"><a href="#二、组件间通信解决了什么" class="headerlink" title="二、组件间通信解决了什么"></a>二、组件间通信解决了什么</h2><p>在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式从上面这段话，我们可以看到通信的本质是信息同步，共享回到<code>vue</code>中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统</p><h2 id="二、组件间通信的分类"><a href="#二、组件间通信的分类" class="headerlink" title="二、组件间通信的分类"></a>二、组件间通信的分类</h2><p>组件间通信的分类可以分成以下</p><ul><li>父子组件之间的通信</li><li>兄弟组件之间的通信</li><li>祖孙与后代组件之间的通信</li><li>非关系组件间之间的通信</li></ul><p>关系图:</p><p> <img src="https://static.vue-js.com/85b92400-3aca-11eb-ab90-d9ae814b240d.png"></p><h2 id="三、组件间通信的方案"><a href="#三、组件间通信的方案" class="headerlink" title="三、组件间通信的方案"></a>三、组件间通信的方案</h2><p>整理<code>vue</code>中8种常规的通信方案</p><ol><li>通过 props 传递</li><li>通过 $emit 触发自定义事件</li><li>使用 ref</li><li>EventBus</li><li>$parent 或$root</li><li>attrs 与 listeners</li><li>Provide 与 Inject</li><li>Vuex</li></ol><h3 id="props传递数据"><a href="#props传递数据" class="headerlink" title="props传递数据"></a>props传递数据</h3><p> <img src="https://static.vue-js.com/8f80a670-3aca-11eb-ab90-d9ae814b240d.png"></p><ul><li>适用场景：父组件传递数据给子组件</li><li>子组件设置<code>props</code>属性，定义接收父组件传递过来的参数</li><li>父组件在使用子组件标签中通过字面量来传递值</li></ul><p><code>Children.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;  </span><br><span class="line">    <span class="comment">// 字符串形式  </span></span><br><span class="line"> <span class="attr">name</span>:<span class="title class_">String</span> <span class="comment">// 接收的类型参数  </span></span><br><span class="line">    <span class="comment">// 对象形式  </span></span><br><span class="line">    <span class="attr">age</span>:&#123;    </span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">// 接收的类型为数值  </span></span><br><span class="line">        <span class="attr">defaule</span>:<span class="number">18</span>,  <span class="comment">// 默认值为18  </span></span><br><span class="line">       <span class="attr">require</span>:<span class="literal">true</span> <span class="comment">// age属性必须传递  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>Father.vue</code>组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> name=<span class="string">&quot;jack&quot;</span> age=<span class="number">18</span> /&gt;  </span><br></pre></td></tr></table></figure><h3 id="emit-触发自定义事件"><a href="#emit-触发自定义事件" class="headerlink" title="$emit 触发自定义事件"></a>$emit 触发自定义事件</h3><ul><li>适用场景：子组件传递数据给父组件</li><li>子组件通过<code>$emit触发</code>自定义事件，<code>$emit</code>第二个参数为传递的数值</li><li>父组件绑定监听器获取到子组件传递过来的参数</li></ul><p><code>Chilfen.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;add&#x27;</span>, good)  </span><br></pre></td></tr></table></figure><p><code>Father.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> @add=<span class="string">&quot;cartAdd($event)&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>父组件在使用子组件的时候设置<code>ref</code></li><li>父组件通过设置子组件<code>ref</code>来获取数据</li></ul><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Children</span> ref=<span class="string">&quot;foo&quot;</span> /&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">foo</span>  <span class="comment">// 获取子组件实例，通过子组件实例我们就能拿到对应的数据  </span></span><br></pre></td></tr></table></figure><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><ul><li>使用场景：兄弟组件传值</li><li>创建一个中央事件总线<code>EventBus</code></li><li>兄弟组件通过<code>$emit</code>触发自定义事件，<code>$emit</code>第二个参数为传递的数值</li><li>另一个兄弟组件通过<code>$on</code>监听自定义事件</li></ul><p><code>Bus.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个中央时间总线类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = &#123;&#125;;   <span class="comment">// 存放事件的名字  </span></span><br><span class="line">  &#125;  </span><br><span class="line">  $on(name, fn) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] = <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] || [];  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">push</span>(fn);  </span><br><span class="line">  &#125;  </span><br><span class="line">  $emit(name, args) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">callbacks</span>[name]) &#123;  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(args));  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// main.js  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Bus</span>() <span class="comment">// 将$bus挂载到vue实例的原型上  </span></span><br><span class="line"><span class="comment">// 另一种方式  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>() <span class="comment">// Vue已经实现了Bus的功能  </span></span><br></pre></td></tr></table></figure><p><code>Children1.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;foo&#x27;</span>)  </span><br></pre></td></tr></table></figure><p><code>Children2.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;foo&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handle</span>)  </span><br></pre></td></tr></table></figure><h3 id="parent-或-root"><a href="#parent-或-root" class="headerlink" title="$parent 或$ root"></a>$parent 或$ root</h3><ul><li>通过共同祖辈<code>$parent</code>或者<code>$root</code>搭建通信桥连</li></ul><p>兄弟组件</p><p><code>this.$parent.on(&#39;add&#39;,this.add)   </code></p><p>另一个兄弟组件</p><p><code>this.$parent.emit(&#39;add&#39;)   </code></p><h3 id="attrs-与-listeners"><a href="#attrs-与-listeners" class="headerlink" title="$attrs  与$ listeners"></a>$attrs  与$ listeners</h3><ul><li>适用场景：祖先传递数据给子孙</li><li>设置批量向下传属性<code>$attrs</code>和 <code>$listeners</code></li><li>包含了父级作用域中不作为 <code>prop</code> 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。</li><li>可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传⼊内部组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child：并未在props中声明foo  </span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.<span class="property">foo</span>&#125;&#125;&lt;/p&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// parent  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">foo</span>=<span class="string">&quot;foo&quot;</span>/&gt;</span></span>  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给Grandson隔代传值，communication/index.vue  </span></span><br><span class="line">&lt;<span class="title class_">Child2</span> msg=<span class="string">&quot;lalala&quot;</span> @some-event=<span class="string">&quot;onSomeEvent&quot;</span>&gt;&lt;/<span class="title class_">Child2</span>&gt;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Child2做展开  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson</span>&gt;</span></span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Grandson使⽤  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;some-event&#x27;, &#x27;msg from grandson&#x27;)&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">&#123;&#123;msg&#125;&#125;  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure><h3 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h3><ul><li>在祖先组件定义<code>provide</code>属性，返回传递的值</li><li>在后代组件通过<code>inject</code>接收组件传递过来的值</li></ul><p>祖先组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">provide</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        <span class="attr">foo</span>:<span class="string">&#x27;foo&#x27;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>后代组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;foo&#x27;</span>] <span class="comment">// 获取到祖先组件传递过来的值  </span></span><br></pre></td></tr></table></figure><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a><code>vuex</code></h3><ul><li><p>适用场景: 复杂关系的组件数据传递</p></li><li><p><code>Vuex</code>作用相当于一个用来存储共享变量的容器<br> <img src="https://static.vue-js.com/fa207cd0-3aca-11eb-ab90-d9ae814b240d.png"></p></li><li><p><code>state</code>用来存放共享变量的地方</p></li><li><p><code>getter</code>，可以增加一个<code>getter</code>派生状态，(相当于<code>store</code>中的计算属性），用来获得共享变量的值</p></li><li><p><code>mutations</code>用来存放修改<code>state</code>的方法。</p></li><li><p><code>actions</code>也是用来存放修改state的方法，不过<code>action</code>是在<code>mutations</code>的基础上进行。常用来做一些异步操作</p></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>父子关系的组件数据传递选择 <code>props</code>  与 <code>$emit</code>进行传递，也可选择<code>ref</code></li><li>兄弟关系的组件数据传递可选择<code>$bus</code>，其次可以选择<code>$parent</code>进行传递</li><li>祖先与后代组件数据传递可选择<code>attrs</code>与<code>listeners</code>或者 <code>Provide</code>与 <code>Inject</code></li><li>复杂关系的组件数据传递可以通过<code>vuex</code>存放共享的变量</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://juejin.cn/post/6844903990052782094#heading-0">https://juejin.cn/post/6844903990052782094#heading-0</a></li><li><a href="https://zh.wikipedia.org/wiki//%E9/%80/%9A/%E4/%BF/%A1">https://zh.wikipedia.org/wiki/\%E9\%80\%9A\%E4\%BF\%A1</a></li><li><a href="https://vue3js.cn/docs/zh">https://vue3js.cn/docs/zh</a></li></ul><p>面试官VUE系列总进度：5／33</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484101&idx=1&sn=83b0983f0fca7d7c556e4cb0bff8c9b8&chksm=fc10c093cb674985ef3bd2966f66fc28c5eb70b0037e4be1af4bf54fb6fa9571985abd31d52f&scene=21#wechat_redirect">面试官：说说你对vue的理解?</a>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484119&idx=1&sn=d171b28a00d42549d279498944a98519&chksm=fc10c081cb6749976814aaeda6a6433db418223cec57edda7e15b9e5a0ca69ad549655639c61&scene=21#wechat_redirect">面试官：说说你对SPA（单页应用）的理解?</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484167&idx=1&sn=7b00b4333ab2722f25f12586b70667ca&chksm=fc10c151cb6748476008dab2f4e6c6264f5d19678305955c85cec1b619e56e8f7457b7357fb9&scene=21#wechat_redirect">面试官：说说你对双向绑定的理解?</a>  </p><p><a href="http://mp.weixin.qq.com/s?__biz=MzU1OTgxNDQ1Nw==&mid=2247484176&idx=1&sn=5623421ed2678046ed9e438aadf6e26f&chksm=fc10c146cb67485015f24f7e9f5862c4c685fc33485fe30e1b375a534b4031978439c554e0c0&scene=21#wechat_redirect">面试官：说说你对Vue生命周期的理解?</a>  </p><p> <img src="https://static.vue-js.com/821b87b0-3ac6-11eb-ab90-d9ae814b240d.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/7de50d20-3aca-11eb-85f6-6fac77c0c9b3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、组件间通信的概念&quot;&gt;&lt;a href=&quot;#一、组件间通信的概念&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目中有封装过axios吗？主要是封装哪方面的？</title>
    <link href="https://blogmind.cloud/2025/01/16/vue-axios/"/>
    <id>https://blogmind.cloud/2025/01/16/vue-axios/</id>
    <published>2025-01-16T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.105Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/2bf1e460-45a7-11eb-85f6-6fac77c0c9b3.png"></p><h2 id="一、axios是什么"><a href="#一、axios是什么" class="headerlink" title="一、axios是什么"></a>一、axios是什么</h2><p><code>axios</code> 是一个轻量的 <code>HTTP</code>客户端</p><p>基于 <code>XMLHttpRequest</code> 服务来执行 <code>HTTP</code> 请求，支持丰富的配置，支持 <code>Promise</code>，支持浏览器端和 <code>Node.js</code> 端。自<code>Vue</code>2.0起，尤大宣布取消对 <code>vue-resource</code> 的官方推荐，转而推荐 <code>axios</code>。现在 <code>axios</code> 已经成为大部分 <code>Vue</code> 开发者的首选</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 <code>XMLHttpRequests</code></li><li>从 <code>node.js</code> 创建 <code>http</code>请求</li><li>支持 <code>Promise</code> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换<code> JSON</code> 数据</li><li>客户端支持防御<code>XSRF</code></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 项目中安装</span></span><br><span class="line">npm install axios --S</span><br><span class="line"><span class="comment">// cdn 引入</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;        </span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;xxx&#x27;</span>,    <span class="comment">// 设置请求的地址</span></span><br><span class="line">  <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>, <span class="comment">// 设置请求方法</span></span><br><span class="line">  <span class="attr">params</span>:&#123;      <span class="comment">// get请求使用params进行参数凭借,如果是post请求用data</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="comment">// res为后端返回的数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并发请求<code>axios.all([])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">    .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">res1, res2</span>) &#123; </span><br><span class="line">    <span class="comment">// res1第一个请求的返回的内容，res2第二个请求返回的内容</span></span><br><span class="line">    <span class="comment">// 两个请求都执行完成才会执行</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="二、为什么要封装"><a href="#二、为什么要封装" class="headerlink" title="二、为什么要封装"></a>二、为什么要封装</h2><p><code>axios</code> 的 API 很友好，你完全可以很轻松地在项目中直接使用。</p><p>不过随着项目规模增大，如果每发起一次<code>HTTP</code>请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍</p><p>这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 <code>axios</code> 再使用</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;http://localhost:3000/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 配置代码</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 其他请求配置...</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// todo: 真正业务逻辑代码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误处理代码  </span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">  <span class="comment">// handle authorization error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">  <span class="comment">// handle server forbidden error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他错误处理.....</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了</p><p>这时候我们就需要对<code>axios</code>进行二次封装，让使用更为便利</p><h2 id="三、如何封装"><a href="#三、如何封装" class="headerlink" title="三、如何封装"></a>三、如何封装</h2><p>封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间…….</p><p>设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分</p><p>请求头 :  来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务)</p><p>状态码:   根据接口返回的不同<code>status</code> ， 来执行不同的业务，这块需要和后端约定好</p><p>请求方法：根据<code>get</code>、<code>post</code>等方法进行一个再次封装，使用起来更为方便</p><p>请求拦截器:  根据请求的请求头设定，来决定哪些请求可以访问</p><p>响应拦截器： 这块就是根据 后端&#96;返回来的状态码判定执行不同业务</p><h3 id="设置接口请求前缀"><a href="#设置接口请求前缀" class="headerlink" title="设置接口请求前缀"></a>设置接口请求前缀</h3><p>利用<code>node</code>环境变量来作判断，用来区分开发、测试、生产环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://dev.xxx.com&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://prod.xxx.com&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本地调试的时候，还需要在<code>vue.config.js</code>文件中配置<code>devServer</code>实现代理转发，从而实现跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/proxyApi&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://dev.xxx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;/proxyApi&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="设置请求头与超时时间"><a href="#设置请求头与超时时间" class="headerlink" title="设置请求头与超时时间"></a>设置请求头与超时时间</h3><p>大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30000</span>,  <span class="comment">// 请求 30s 超时</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">post</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="封装请求方法"><a href="#封装请求方法" class="headerlink" title="封装请求方法"></a>封装请求方法</h3><p>先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">httpGet</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  params = &#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">      params</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post</span></span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">httpPost</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  data = &#123;&#125;,</span></span><br><span class="line"><span class="params">  params = &#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">          ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="comment">// 发送的数据</span></span><br><span class="line">      data,</span><br><span class="line">      <span class="comment">// url参数</span></span><br><span class="line">      params</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把封装的方法放在一个<code>api.js</code>文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; httpGet, httpPost &#125; <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getorglist</span> = (<span class="params">params = &#123;&#125;</span>) =&gt; <span class="title function_">httpGet</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;apps/api/org/list&#x27;</span>, params &#125;)</span><br></pre></td></tr></table></figure><p>页面中就能直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; getorglist &#125; <span class="keyword">from</span> <span class="string">&#x27;@/assets/js/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">getorglist</span>(&#123; <span class="attr">id</span>: <span class="number">200</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样可以把<code>api</code>统一管理起来，以后维护修改只需要在<code>api.js</code>文件操作即可</p><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><p>请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的</span></span><br><span class="line">    token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><p>响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">  <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">511</span>) &#123;</span><br><span class="line">      <span class="comment">// 未授权调取授权接口</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">510</span>) &#123;</span><br><span class="line">      <span class="comment">// 未登录跳转登录页</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 我们可以在这里对异常状态作统一处理</span></span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理请求失败的情况</span></span><br><span class="line">    <span class="comment">// 对不同返回码对相应处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>封装是编程中很有意义的手段，简单的<code>axios</code>封装，就可以让我们可以领略到它的魅力</li><li>封装 <code>axios</code> 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.html.cn/qa/vue-js/20544.html">https://www.html.cn/qa/vue-js/20544.html</a></li><li><a href="https://juejin.cn/post/6844904033782611976">https://juejin.cn/post/6844904033782611976</a></li><li><a href="https://juejin.cn/post/6844903801451708429">https://juejin.cn/post/6844903801451708429</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://static.vue-js.com/2bf1e460-45a7-11eb-85f6-6fac77c0c9b3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、axios是什么&quot;&gt;&lt;a href=&quot;#一、axios是什么&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？</title>
    <link href="https://blogmind.cloud/2025/01/14/vue3-proxy/"/>
    <id>https://blogmind.cloud/2025/01/14/vue3-proxy/</id>
    <published>2025-01-14T08:00:00.000Z</published>
    <updated>2025-02-08T06:49:30.106Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="https://static.vue-js.com/57aa5c80-5f7f-11eb-ab90-d9ae814b240d.png"></p><h2 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h2><p>定义：<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p><h5 id="为什么能实现响应式"><a href="#为什么能实现响应式" class="headerlink" title="为什么能实现响应式"></a>为什么能实现响应式</h5><p>通过<code>defineProperty</code> 两个属性，<code>get</code>及<code>set</code></p><ul><li>get</li></ul><p>属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值</p><ul><li>set</li></ul><p>属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined</p><p>下面通过代码展示：</p><p>定义一个响应式函数<code>defineReactive</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    app.<span class="property">innerText</span> = obj.<span class="property">foo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                val = newVal</span><br><span class="line">                <span class="title function_">update</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>defineReactive</code>，数据发生变化触发<code>update</code>方法，实现数据响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title function_">defineReactive</span>(obj, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    obj.<span class="property">foo</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>在对象存在多个<code>key</code>情况下，需要进行遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在嵌套对象的情况，还需要在<code>defineReactive</code>中进行递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title function_">observe</span>(val)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">                val = newVal</span><br><span class="line">                <span class="title function_">update</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当给<code>key</code>赋值为对象的时候，还需要在<code>set</code>属性中进行递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="title function_">observe</span>(newVal) <span class="comment">// 新值是对象的情况</span></span><br><span class="line">        <span class="title function_">notifyUpdate</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题</p><p>现在对一个对象进行删除与添加属性操作，无法劫持到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">observe</span>(obj)</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">foo</span> <span class="comment">// no ok</span></span><br><span class="line">obj.<span class="property">jar</span> = <span class="string">&#x27;xxx&#x27;</span> <span class="comment">// no ok</span></span><br></pre></td></tr></table></figure><p>当我们对一个数组进行监听的时候，并不那么好使了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrData = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arrData.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">defineProperty</span>(arrData,index,val)</span><br><span class="line">&#125;)</span><br><span class="line">arrData.<span class="title function_">push</span>() <span class="comment">// no ok</span></span><br><span class="line">arrData.<span class="title function_">pop</span>()  <span class="comment">// no ok</span></span><br><span class="line">arrDate[<span class="number">0</span>] = <span class="number">99</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>可以看到数据的<code>api</code>无法劫持到，从而无法实现数据响应式，</p><p>所以在<code>Vue2</code>中，增加了<code>set</code>、<code>delete</code> API，并且对数组<code>api</code>方法进行一个重写</p><p>还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>检测不到对象属性的添加和删除</li><li>数组<code>API</code>方法无法监听到</li><li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li></ul><h2 id="二、proxy"><a href="#二、proxy" class="headerlink" title="二、proxy"></a>二、proxy</h2><p><code>Proxy</code>的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了</p><p>在<code>ES6</code>系列中，我们详细讲解过<code>Proxy</code>的使用，就不再述说了</p><p>下面通过代码进行展示：</p><p>定义一个响应式方法<code>reactive</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下简单数据的操作，发现都能劫持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1.获取</span></span><br><span class="line">state.<span class="property">foo</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 2.设置已存在属性</span></span><br><span class="line">state.<span class="property">foo</span> = <span class="string">&#x27;fooooooo&#x27;</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 3.设置不存在属性</span></span><br><span class="line">state.<span class="property">dong</span> = <span class="string">&#x27;dong&#x27;</span> <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// 4.删除属性</span></span><br><span class="line"><span class="keyword">delete</span> state.<span class="property">dong</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>再测试嵌套对象情况，这时候发现就不那么 OK 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">bar</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置嵌套对象属性</span></span><br><span class="line">state.<span class="property">bar</span>.<span class="property">a</span> = <span class="number">10</span> <span class="comment">// no ok</span></span><br></pre></td></tr></table></figure><p>如果要解决，需要在<code>get</code>之上再进行一层代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">isObject</span>(res) ? <span class="title function_">reactive</span>(res) : res</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>Object.defineProperty</code>只能遍历对象属性进行劫持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">defineReactive</span>(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Proxy</code>直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Proxy相当于在对象外层加拦截</span></span><br><span class="line">    <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`获取<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`设置<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, key)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`删除<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;res&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Proxy</code>可以直接监听数组的变化（<code>push</code>、<code>shift</code>、<code>splice</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> proxtObj = <span class="title function_">reactive</span>(obj)</span><br><span class="line">obj.<span class="title function_">psuh</span>(<span class="number">4</span>) <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p><code>Proxy</code>有多达13种拦截方法,不限于<code>apply</code>、<code>ownKeys</code>、<code>deleteProperty</code>、<code>has</code>等等，这是<code>Object.defineProperty</code>不具备的</p><p>正因为<code>defineProperty</code>自身的缺陷，导致<code>Vue2</code>在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外<code>set</code>、<code>delete</code>方法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组重写</span></span><br><span class="line"><span class="keyword">const</span> originalProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Object</span>.<span class="title function_">create</span>(originalProto)</span><br><span class="line">[<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  arrayProto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    originalProto[method].<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">arguments</span>)</span><br><span class="line">    dep.<span class="title function_">notice</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set、delete</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(obj,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;newbar&#x27;</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">delete</span>(obj),<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Proxy</code> 不兼容IE，也没有 <code>polyfill</code>, <code>defineProperty</code> 能支持到IE9</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;img src=&quot;https://static.vue-js.com/57aa5c80-5f7f-11eb-ab90-d9ae814b240d.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Object-defineProperty&quot;&gt;&lt;a href=&quot;#一、Object-d</summary>
      
    
    
    
    <category term="Vue" scheme="https://blogmind.cloud/categories/Vue/"/>
    
    
    <category term="面试" scheme="https://blogmind.cloud/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Vue" scheme="https://blogmind.cloud/tags/Vue/"/>
    
  </entry>
  
</feed>
